// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="aes_main,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.706000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=14,HLS_SYN_DSP=6,HLS_SYN_FF=3455,HLS_SYN_LUT=9893,HLS_VERSION=2019_1}" *)

module aes_main (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_return
);

parameter    ap_ST_fsm_state1 = 36'd1;
parameter    ap_ST_fsm_state2 = 36'd2;
parameter    ap_ST_fsm_state3 = 36'd4;
parameter    ap_ST_fsm_state4 = 36'd8;
parameter    ap_ST_fsm_state5 = 36'd16;
parameter    ap_ST_fsm_state6 = 36'd32;
parameter    ap_ST_fsm_state7 = 36'd64;
parameter    ap_ST_fsm_state8 = 36'd128;
parameter    ap_ST_fsm_state9 = 36'd256;
parameter    ap_ST_fsm_state10 = 36'd512;
parameter    ap_ST_fsm_state11 = 36'd1024;
parameter    ap_ST_fsm_state12 = 36'd2048;
parameter    ap_ST_fsm_state13 = 36'd4096;
parameter    ap_ST_fsm_state14 = 36'd8192;
parameter    ap_ST_fsm_state15 = 36'd16384;
parameter    ap_ST_fsm_state16 = 36'd32768;
parameter    ap_ST_fsm_state17 = 36'd65536;
parameter    ap_ST_fsm_state18 = 36'd131072;
parameter    ap_ST_fsm_state19 = 36'd262144;
parameter    ap_ST_fsm_state20 = 36'd524288;
parameter    ap_ST_fsm_state21 = 36'd1048576;
parameter    ap_ST_fsm_state22 = 36'd2097152;
parameter    ap_ST_fsm_state23 = 36'd4194304;
parameter    ap_ST_fsm_state24 = 36'd8388608;
parameter    ap_ST_fsm_state25 = 36'd16777216;
parameter    ap_ST_fsm_state26 = 36'd33554432;
parameter    ap_ST_fsm_state27 = 36'd67108864;
parameter    ap_ST_fsm_state28 = 36'd134217728;
parameter    ap_ST_fsm_state29 = 36'd268435456;
parameter    ap_ST_fsm_state30 = 36'd536870912;
parameter    ap_ST_fsm_state31 = 36'd1073741824;
parameter    ap_ST_fsm_state32 = 36'd2147483648;
parameter    ap_ST_fsm_state33 = 36'd4294967296;
parameter    ap_ST_fsm_state34 = 36'd8589934592;
parameter    ap_ST_fsm_state35 = 36'd17179869184;
parameter    ap_ST_fsm_state36 = 36'd34359738368;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [35:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] word_address0;
reg    word_ce0;
reg    word_we0;
wire   [31:0] word_q0;
reg   [8:0] word_address1;
reg    word_ce1;
wire   [31:0] word_q1;
reg   [4:0] key_address0;
reg    key_ce0;
reg    key_we0;
reg   [31:0] key_d0;
wire   [31:0] key_q0;
reg   [4:0] key_address1;
reg    key_ce1;
reg    key_we1;
reg   [31:0] key_d1;
reg   [5:0] round_val;
reg   [31:0] nb;
reg   [4:0] statemt_address0;
reg    statemt_ce0;
reg    statemt_we0;
reg   [31:0] statemt_d0;
wire   [31:0] statemt_q0;
reg   [4:0] statemt_address1;
reg    statemt_ce1;
reg    statemt_we1;
reg   [31:0] statemt_d1;
wire   [31:0] statemt_q1;
wire   [3:0] out_enc_statemt_address0;
reg    out_enc_statemt_ce0;
wire   [7:0] out_enc_statemt_q0;
reg   [31:0] main_result;
wire   [3:0] out_dec_statemt_address0;
reg    out_dec_statemt_ce0;
wire   [7:0] out_dec_statemt_q0;
reg   [31:0] reg_441;
wire    ap_CS_fsm_state13;
wire   [0:0] icmp_ln107_fu_469_p2;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state31;
wire   [31:0] i_fu_475_p2;
reg   [31:0] i_reg_592;
wire   [4:0] i_1_fu_487_p2;
reg   [4:0] i_1_reg_600;
wire    ap_CS_fsm_state20;
wire   [0:0] icmp_ln123_fu_481_p2;
wire   [0:0] icmp_ln124_fu_509_p2;
reg   [0:0] icmp_ln124_reg_615;
wire    ap_CS_fsm_state21;
wire   [31:0] zext_ln113_fu_530_p1;
wire    ap_CS_fsm_state27;
wire    grp_InversShiftRow_ByteS_fu_375_ap_ready;
wire    grp_InversShiftRow_ByteS_fu_375_ap_done;
wire   [31:0] i_2_fu_534_p2;
reg   [31:0] i_2_reg_625;
wire    ap_CS_fsm_state28;
wire   [4:0] i_3_fu_552_p2;
reg   [4:0] i_3_reg_637;
wire    ap_CS_fsm_state34;
wire   [0:0] icmp_ln129_fu_546_p2;
wire   [0:0] icmp_ln130_fu_568_p2;
reg   [0:0] icmp_ln130_reg_652;
wire    ap_CS_fsm_state35;
wire    grp_AddRoundKey_InversMi_fu_356_ap_start;
wire    grp_AddRoundKey_InversMi_fu_356_ap_done;
wire    grp_AddRoundKey_InversMi_fu_356_ap_idle;
wire    grp_AddRoundKey_InversMi_fu_356_ap_ready;
wire   [4:0] grp_AddRoundKey_InversMi_fu_356_statemt_address0;
wire    grp_AddRoundKey_InversMi_fu_356_statemt_ce0;
wire    grp_AddRoundKey_InversMi_fu_356_statemt_we0;
wire   [31:0] grp_AddRoundKey_InversMi_fu_356_statemt_d0;
wire   [4:0] grp_AddRoundKey_InversMi_fu_356_statemt_address1;
wire    grp_AddRoundKey_InversMi_fu_356_statemt_ce1;
wire    grp_AddRoundKey_InversMi_fu_356_statemt_we1;
wire   [31:0] grp_AddRoundKey_InversMi_fu_356_statemt_d1;
wire   [8:0] grp_AddRoundKey_InversMi_fu_356_word_address0;
wire    grp_AddRoundKey_InversMi_fu_356_word_ce0;
wire   [8:0] grp_AddRoundKey_InversMi_fu_356_word_address1;
wire    grp_AddRoundKey_InversMi_fu_356_word_ce1;
wire    grp_ByteSub_ShiftRow_fu_366_ap_start;
wire    grp_ByteSub_ShiftRow_fu_366_ap_done;
wire    grp_ByteSub_ShiftRow_fu_366_ap_idle;
wire    grp_ByteSub_ShiftRow_fu_366_ap_ready;
wire   [4:0] grp_ByteSub_ShiftRow_fu_366_statemt_address0;
wire    grp_ByteSub_ShiftRow_fu_366_statemt_ce0;
wire    grp_ByteSub_ShiftRow_fu_366_statemt_we0;
wire   [31:0] grp_ByteSub_ShiftRow_fu_366_statemt_d0;
wire   [4:0] grp_ByteSub_ShiftRow_fu_366_statemt_address1;
wire    grp_ByteSub_ShiftRow_fu_366_statemt_ce1;
wire    grp_ByteSub_ShiftRow_fu_366_statemt_we1;
wire   [31:0] grp_ByteSub_ShiftRow_fu_366_statemt_d1;
wire    grp_InversShiftRow_ByteS_fu_375_ap_start;
wire    grp_InversShiftRow_ByteS_fu_375_ap_idle;
wire   [4:0] grp_InversShiftRow_ByteS_fu_375_statemt_address0;
wire    grp_InversShiftRow_ByteS_fu_375_statemt_ce0;
wire    grp_InversShiftRow_ByteS_fu_375_statemt_we0;
wire   [31:0] grp_InversShiftRow_ByteS_fu_375_statemt_d0;
wire   [4:0] grp_InversShiftRow_ByteS_fu_375_statemt_address1;
wire    grp_InversShiftRow_ByteS_fu_375_statemt_ce1;
wire    grp_InversShiftRow_ByteS_fu_375_statemt_we1;
wire   [31:0] grp_InversShiftRow_ByteS_fu_375_statemt_d1;
wire    grp_MixColumn_AddRoundKe_fu_384_ap_start;
wire    grp_MixColumn_AddRoundKe_fu_384_ap_done;
wire    grp_MixColumn_AddRoundKe_fu_384_ap_idle;
wire    grp_MixColumn_AddRoundKe_fu_384_ap_ready;
wire   [4:0] grp_MixColumn_AddRoundKe_fu_384_statemt_address0;
wire    grp_MixColumn_AddRoundKe_fu_384_statemt_ce0;
wire    grp_MixColumn_AddRoundKe_fu_384_statemt_we0;
wire   [31:0] grp_MixColumn_AddRoundKe_fu_384_statemt_d0;
wire   [4:0] grp_MixColumn_AddRoundKe_fu_384_statemt_address1;
wire    grp_MixColumn_AddRoundKe_fu_384_statemt_ce1;
wire    grp_MixColumn_AddRoundKe_fu_384_statemt_we1;
wire   [31:0] grp_MixColumn_AddRoundKe_fu_384_statemt_d1;
wire   [8:0] grp_MixColumn_AddRoundKe_fu_384_word_address0;
wire    grp_MixColumn_AddRoundKe_fu_384_word_ce0;
wire   [8:0] grp_MixColumn_AddRoundKe_fu_384_word_address1;
wire    grp_MixColumn_AddRoundKe_fu_384_word_ce1;
wire    grp_KeySchedule_fu_395_ap_start;
wire    grp_KeySchedule_fu_395_ap_done;
wire    grp_KeySchedule_fu_395_ap_idle;
wire    grp_KeySchedule_fu_395_ap_ready;
wire   [4:0] grp_KeySchedule_fu_395_key_address0;
wire    grp_KeySchedule_fu_395_key_ce0;
wire   [8:0] grp_KeySchedule_fu_395_word_address0;
wire    grp_KeySchedule_fu_395_word_ce0;
wire    grp_KeySchedule_fu_395_word_we0;
wire   [31:0] grp_KeySchedule_fu_395_word_d0;
wire   [8:0] grp_KeySchedule_fu_395_word_address1;
wire    grp_KeySchedule_fu_395_word_ce1;
wire    grp_AddRoundKey_fu_407_ap_start;
wire    grp_AddRoundKey_fu_407_ap_done;
wire    grp_AddRoundKey_fu_407_ap_idle;
wire    grp_AddRoundKey_fu_407_ap_ready;
wire   [4:0] grp_AddRoundKey_fu_407_statemt_address0;
wire    grp_AddRoundKey_fu_407_statemt_ce0;
wire    grp_AddRoundKey_fu_407_statemt_we0;
wire   [31:0] grp_AddRoundKey_fu_407_statemt_d0;
wire   [4:0] grp_AddRoundKey_fu_407_statemt_address1;
wire    grp_AddRoundKey_fu_407_statemt_ce1;
wire    grp_AddRoundKey_fu_407_statemt_we1;
wire   [31:0] grp_AddRoundKey_fu_407_statemt_d1;
reg   [31:0] grp_AddRoundKey_fu_407_n;
wire   [8:0] grp_AddRoundKey_fu_407_word_address0;
wire    grp_AddRoundKey_fu_407_word_ce0;
wire   [8:0] grp_AddRoundKey_fu_407_word_address1;
wire    grp_AddRoundKey_fu_407_word_ce1;
reg   [31:0] i_0_i_reg_313;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state16;
reg   [4:0] i_2_i_reg_325;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state19;
reg   [31:0] i_0_in_i_reg_336;
wire    ap_CS_fsm_state32;
reg   [4:0] i_2_i5_reg_345;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state33;
reg    grp_AddRoundKey_InversMi_fu_356_ap_start_reg;
wire    ap_CS_fsm_state30;
reg    grp_ByteSub_ShiftRow_fu_366_ap_start_reg;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state17;
reg    grp_InversShiftRow_ByteS_fu_375_ap_start_reg;
reg    grp_MixColumn_AddRoundKe_fu_384_ap_start_reg;
reg    grp_KeySchedule_fu_395_ap_start_reg;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state23;
reg    grp_AddRoundKey_fu_407_ap_start_reg;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state24;
wire   [0:0] icmp_ln113_fu_540_p2;
wire    ap_CS_fsm_state25;
wire   [63:0] zext_ln124_fu_493_p1;
wire   [63:0] zext_ln130_fu_558_p1;
wire   [31:0] add_ln124_fu_518_p2;
wire   [31:0] add_ln130_fu_577_p2;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire   [4:0] trunc_ln107_fu_455_p1;
wire   [4:0] add_ln107_fu_459_p2;
wire   [31:0] zext_ln107_fu_465_p1;
wire   [31:0] zext_ln124_1_fu_505_p1;
wire   [31:0] zext_ln124_2_fu_515_p1;
wire   [31:0] zext_ln130_1_fu_564_p1;
wire   [31:0] zext_ln130_2_fu_574_p1;
reg   [35:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 36'd1;
#0 round_val = 6'd0;
#0 nb = 32'd0;
#0 main_result = 32'd0;
#0 grp_AddRoundKey_InversMi_fu_356_ap_start_reg = 1'b0;
#0 grp_ByteSub_ShiftRow_fu_366_ap_start_reg = 1'b0;
#0 grp_InversShiftRow_ByteS_fu_375_ap_start_reg = 1'b0;
#0 grp_MixColumn_AddRoundKe_fu_384_ap_start_reg = 1'b0;
#0 grp_KeySchedule_fu_395_ap_start_reg = 1'b0;
#0 grp_AddRoundKey_fu_407_ap_start_reg = 1'b0;
end

aes_main_word #(
    .DataWidth( 32 ),
    .AddressRange( 480 ),
    .AddressWidth( 9 ))
word_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(word_address0),
    .ce0(word_ce0),
    .we0(word_we0),
    .d0(grp_KeySchedule_fu_395_word_d0),
    .q0(word_q0),
    .address1(word_address1),
    .ce1(word_ce1),
    .q1(word_q1)
);

aes_main_key #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
key_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(key_address0),
    .ce0(key_ce0),
    .we0(key_we0),
    .d0(key_d0),
    .q0(key_q0),
    .address1(key_address1),
    .ce1(key_ce1),
    .we1(key_we1),
    .d1(key_d1)
);

aes_main_statemt #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
statemt_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(statemt_address0),
    .ce0(statemt_ce0),
    .we0(statemt_we0),
    .d0(statemt_d0),
    .q0(statemt_q0),
    .address1(statemt_address1),
    .ce1(statemt_ce1),
    .we1(statemt_we1),
    .d1(statemt_d1),
    .q1(statemt_q1)
);

aes_main_out_enc_g8j #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
out_enc_statemt_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(out_enc_statemt_address0),
    .ce0(out_enc_statemt_ce0),
    .q0(out_enc_statemt_q0)
);

aes_main_out_dec_hbi #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
out_dec_statemt_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(out_dec_statemt_address0),
    .ce0(out_dec_statemt_ce0),
    .q0(out_dec_statemt_q0)
);

AddRoundKey_InversMi grp_AddRoundKey_InversMi_fu_356(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AddRoundKey_InversMi_fu_356_ap_start),
    .ap_done(grp_AddRoundKey_InversMi_fu_356_ap_done),
    .ap_idle(grp_AddRoundKey_InversMi_fu_356_ap_idle),
    .ap_ready(grp_AddRoundKey_InversMi_fu_356_ap_ready),
    .statemt_address0(grp_AddRoundKey_InversMi_fu_356_statemt_address0),
    .statemt_ce0(grp_AddRoundKey_InversMi_fu_356_statemt_ce0),
    .statemt_we0(grp_AddRoundKey_InversMi_fu_356_statemt_we0),
    .statemt_d0(grp_AddRoundKey_InversMi_fu_356_statemt_d0),
    .statemt_q0(statemt_q0),
    .statemt_address1(grp_AddRoundKey_InversMi_fu_356_statemt_address1),
    .statemt_ce1(grp_AddRoundKey_InversMi_fu_356_statemt_ce1),
    .statemt_we1(grp_AddRoundKey_InversMi_fu_356_statemt_we1),
    .statemt_d1(grp_AddRoundKey_InversMi_fu_356_statemt_d1),
    .statemt_q1(statemt_q1),
    .nb(reg_441),
    .n(i_2_reg_625),
    .word_address0(grp_AddRoundKey_InversMi_fu_356_word_address0),
    .word_ce0(grp_AddRoundKey_InversMi_fu_356_word_ce0),
    .word_q0(word_q0),
    .word_address1(grp_AddRoundKey_InversMi_fu_356_word_address1),
    .word_ce1(grp_AddRoundKey_InversMi_fu_356_word_ce1),
    .word_q1(word_q1)
);

ByteSub_ShiftRow grp_ByteSub_ShiftRow_fu_366(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_ByteSub_ShiftRow_fu_366_ap_start),
    .ap_done(grp_ByteSub_ShiftRow_fu_366_ap_done),
    .ap_idle(grp_ByteSub_ShiftRow_fu_366_ap_idle),
    .ap_ready(grp_ByteSub_ShiftRow_fu_366_ap_ready),
    .statemt_address0(grp_ByteSub_ShiftRow_fu_366_statemt_address0),
    .statemt_ce0(grp_ByteSub_ShiftRow_fu_366_statemt_ce0),
    .statemt_we0(grp_ByteSub_ShiftRow_fu_366_statemt_we0),
    .statemt_d0(grp_ByteSub_ShiftRow_fu_366_statemt_d0),
    .statemt_q0(statemt_q0),
    .statemt_address1(grp_ByteSub_ShiftRow_fu_366_statemt_address1),
    .statemt_ce1(grp_ByteSub_ShiftRow_fu_366_statemt_ce1),
    .statemt_we1(grp_ByteSub_ShiftRow_fu_366_statemt_we1),
    .statemt_d1(grp_ByteSub_ShiftRow_fu_366_statemt_d1),
    .statemt_q1(statemt_q1),
    .nb(reg_441)
);

InversShiftRow_ByteS grp_InversShiftRow_ByteS_fu_375(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_InversShiftRow_ByteS_fu_375_ap_start),
    .ap_done(grp_InversShiftRow_ByteS_fu_375_ap_done),
    .ap_idle(grp_InversShiftRow_ByteS_fu_375_ap_idle),
    .ap_ready(grp_InversShiftRow_ByteS_fu_375_ap_ready),
    .statemt_address0(grp_InversShiftRow_ByteS_fu_375_statemt_address0),
    .statemt_ce0(grp_InversShiftRow_ByteS_fu_375_statemt_ce0),
    .statemt_we0(grp_InversShiftRow_ByteS_fu_375_statemt_we0),
    .statemt_d0(grp_InversShiftRow_ByteS_fu_375_statemt_d0),
    .statemt_q0(statemt_q0),
    .statemt_address1(grp_InversShiftRow_ByteS_fu_375_statemt_address1),
    .statemt_ce1(grp_InversShiftRow_ByteS_fu_375_statemt_ce1),
    .statemt_we1(grp_InversShiftRow_ByteS_fu_375_statemt_we1),
    .statemt_d1(grp_InversShiftRow_ByteS_fu_375_statemt_d1),
    .statemt_q1(statemt_q1),
    .nb(reg_441)
);

MixColumn_AddRoundKe grp_MixColumn_AddRoundKe_fu_384(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_MixColumn_AddRoundKe_fu_384_ap_start),
    .ap_done(grp_MixColumn_AddRoundKe_fu_384_ap_done),
    .ap_idle(grp_MixColumn_AddRoundKe_fu_384_ap_idle),
    .ap_ready(grp_MixColumn_AddRoundKe_fu_384_ap_ready),
    .statemt_address0(grp_MixColumn_AddRoundKe_fu_384_statemt_address0),
    .statemt_ce0(grp_MixColumn_AddRoundKe_fu_384_statemt_ce0),
    .statemt_we0(grp_MixColumn_AddRoundKe_fu_384_statemt_we0),
    .statemt_d0(grp_MixColumn_AddRoundKe_fu_384_statemt_d0),
    .statemt_q0(statemt_q0),
    .statemt_address1(grp_MixColumn_AddRoundKe_fu_384_statemt_address1),
    .statemt_ce1(grp_MixColumn_AddRoundKe_fu_384_statemt_ce1),
    .statemt_we1(grp_MixColumn_AddRoundKe_fu_384_statemt_we1),
    .statemt_d1(grp_MixColumn_AddRoundKe_fu_384_statemt_d1),
    .statemt_q1(statemt_q1),
    .nb(reg_441),
    .n(i_0_i_reg_313),
    .word_address0(grp_MixColumn_AddRoundKe_fu_384_word_address0),
    .word_ce0(grp_MixColumn_AddRoundKe_fu_384_word_ce0),
    .word_q0(word_q0),
    .word_address1(grp_MixColumn_AddRoundKe_fu_384_word_address1),
    .word_ce1(grp_MixColumn_AddRoundKe_fu_384_word_ce1),
    .word_q1(word_q1)
);

KeySchedule grp_KeySchedule_fu_395(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_KeySchedule_fu_395_ap_start),
    .ap_done(grp_KeySchedule_fu_395_ap_done),
    .ap_idle(grp_KeySchedule_fu_395_ap_idle),
    .ap_ready(grp_KeySchedule_fu_395_ap_ready),
    .key_address0(grp_KeySchedule_fu_395_key_address0),
    .key_ce0(grp_KeySchedule_fu_395_key_ce0),
    .key_q0(key_q0),
    .word_address0(grp_KeySchedule_fu_395_word_address0),
    .word_ce0(grp_KeySchedule_fu_395_word_ce0),
    .word_we0(grp_KeySchedule_fu_395_word_we0),
    .word_d0(grp_KeySchedule_fu_395_word_d0),
    .word_q0(word_q0),
    .word_address1(grp_KeySchedule_fu_395_word_address1),
    .word_ce1(grp_KeySchedule_fu_395_word_ce1),
    .word_q1(word_q1)
);

AddRoundKey grp_AddRoundKey_fu_407(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AddRoundKey_fu_407_ap_start),
    .ap_done(grp_AddRoundKey_fu_407_ap_done),
    .ap_idle(grp_AddRoundKey_fu_407_ap_idle),
    .ap_ready(grp_AddRoundKey_fu_407_ap_ready),
    .statemt_address0(grp_AddRoundKey_fu_407_statemt_address0),
    .statemt_ce0(grp_AddRoundKey_fu_407_statemt_ce0),
    .statemt_we0(grp_AddRoundKey_fu_407_statemt_we0),
    .statemt_d0(grp_AddRoundKey_fu_407_statemt_d0),
    .statemt_q0(statemt_q0),
    .statemt_address1(grp_AddRoundKey_fu_407_statemt_address1),
    .statemt_ce1(grp_AddRoundKey_fu_407_statemt_ce1),
    .statemt_we1(grp_AddRoundKey_fu_407_statemt_we1),
    .statemt_d1(grp_AddRoundKey_fu_407_statemt_d1),
    .statemt_q1(statemt_q1),
    .n(grp_AddRoundKey_fu_407_n),
    .word_address0(grp_AddRoundKey_fu_407_word_address0),
    .word_ce0(grp_AddRoundKey_fu_407_word_ce0),
    .word_q0(word_q0),
    .word_address1(grp_AddRoundKey_fu_407_word_address1),
    .word_ce1(grp_AddRoundKey_fu_407_word_ce1),
    .word_q1(word_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_AddRoundKey_InversMi_fu_356_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state29)) begin
            grp_AddRoundKey_InversMi_fu_356_ap_start_reg <= 1'b1;
        end else if ((grp_AddRoundKey_InversMi_fu_356_ap_ready == 1'b1)) begin
            grp_AddRoundKey_InversMi_fu_356_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_AddRoundKey_fu_407_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state28) & (icmp_ln113_fu_540_p2 == 1'd0)))) begin
            grp_AddRoundKey_fu_407_ap_start_reg <= 1'b1;
        end else if ((grp_AddRoundKey_fu_407_ap_ready == 1'b1)) begin
            grp_AddRoundKey_fu_407_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_ByteSub_ShiftRow_fu_366_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state13) & (icmp_ln107_fu_469_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln107_fu_469_p2 == 1'd0)))) begin
            grp_ByteSub_ShiftRow_fu_366_ap_start_reg <= 1'b1;
        end else if ((grp_ByteSub_ShiftRow_fu_366_ap_ready == 1'b1)) begin
            grp_ByteSub_ShiftRow_fu_366_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_InversShiftRow_ByteS_fu_375_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state26))) begin
            grp_InversShiftRow_ByteS_fu_375_ap_start_reg <= 1'b1;
        end else if ((grp_InversShiftRow_ByteS_fu_375_ap_ready == 1'b1)) begin
            grp_InversShiftRow_ByteS_fu_375_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_KeySchedule_fu_395_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state20) & (icmp_ln123_fu_481_p2 == 1'd1)))) begin
            grp_KeySchedule_fu_395_ap_start_reg <= 1'b1;
        end else if ((grp_KeySchedule_fu_395_ap_ready == 1'b1)) begin
            grp_KeySchedule_fu_395_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_MixColumn_AddRoundKe_fu_384_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state15)) begin
            grp_MixColumn_AddRoundKe_fu_384_ap_start_reg <= 1'b1;
        end else if ((grp_MixColumn_AddRoundKe_fu_384_ap_ready == 1'b1)) begin
            grp_MixColumn_AddRoundKe_fu_384_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_MixColumn_AddRoundKe_fu_384_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        i_0_i_reg_313 <= i_reg_592;
    end else if (((grp_AddRoundKey_fu_407_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        i_0_i_reg_313 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((grp_InversShiftRow_ByteS_fu_375_ap_done == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state32)) begin
            i_0_in_i_reg_336 <= i_2_reg_625;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            i_0_in_i_reg_336 <= zext_ln113_fu_530_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_AddRoundKey_fu_407_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
        i_2_i5_reg_345 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        i_2_i5_reg_345 <= i_3_reg_637;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_AddRoundKey_fu_407_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
        i_2_i_reg_325 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        i_2_i_reg_325 <= i_1_reg_600;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        main_result <= add_ln130_fu_577_p2;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        main_result <= add_ln124_fu_518_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln123_fu_481_p2 == 1'd1))) begin
                round_val[1] <= 1'b1;
        round_val[3] <= 1'b1;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                round_val[1] <= 1'b0;
        round_val[3] <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        i_1_reg_600 <= i_1_fu_487_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        i_2_reg_625 <= i_2_fu_534_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        i_3_reg_637 <= i_3_fu_552_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i_reg_592 <= i_fu_475_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        icmp_ln124_reg_615 <= icmp_ln124_fu_509_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        icmp_ln130_reg_652 <= icmp_ln130_fu_568_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state20) & (icmp_ln123_fu_481_p2 == 1'd1)))) begin
        nb[2] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state15) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln107_fu_469_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln107_fu_469_p2 == 1'd0)))) begin
        reg_441[2] <= nb[2];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) & (icmp_ln129_fu_546_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) & (icmp_ln129_fu_546_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_AddRoundKey_fu_407_n = 32'd10;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_AddRoundKey_fu_407_n = i_0_i_reg_313;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_AddRoundKey_fu_407_n = 32'd0;
    end else begin
        grp_AddRoundKey_fu_407_n = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        key_address0 = 5'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        key_address0 = 5'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        key_address0 = 5'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        key_address0 = 5'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        key_address0 = 5'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        key_address0 = 5'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        key_address0 = 5'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        key_address0 = 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state10))) begin
        key_address0 = grp_KeySchedule_fu_395_key_address0;
    end else begin
        key_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        key_address1 = 5'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        key_address1 = 5'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        key_address1 = 5'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        key_address1 = 5'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        key_address1 = 5'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        key_address1 = 5'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        key_address1 = 5'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        key_address1 = 5'd1;
    end else begin
        key_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        key_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state10))) begin
        key_ce0 = grp_KeySchedule_fu_395_key_ce0;
    end else begin
        key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        key_ce1 = 1'b1;
    end else begin
        key_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        key_d0 = 32'd79;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        key_d0 = 32'd9;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        key_d0 = 32'd171;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        key_d0 = 32'd210;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        key_d0 = 32'd40;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2))) begin
        key_d0 = 32'd21;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        key_d0 = 32'd43;
    end else begin
        key_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        key_d1 = 32'd60;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        key_d1 = 32'd207;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        key_d1 = 32'd136;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        key_d1 = 32'd247;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        key_d1 = 32'd166;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        key_d1 = 32'd174;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        key_d1 = 32'd22;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        key_d1 = 32'd126;
    end else begin
        key_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        key_we0 = 1'b1;
    end else begin
        key_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        key_we1 = 1'b1;
    end else begin
        key_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        out_dec_statemt_ce0 = 1'b1;
    end else begin
        out_dec_statemt_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        out_enc_statemt_ce0 = 1'b1;
    end else begin
        out_enc_statemt_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        statemt_address0 = zext_ln124_fu_493_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        statemt_address0 = 5'd14;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        statemt_address0 = 5'd12;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        statemt_address0 = 5'd10;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        statemt_address0 = 5'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        statemt_address0 = 5'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        statemt_address0 = 5'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        statemt_address0 = 5'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        statemt_address0 = 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state12))) begin
        statemt_address0 = grp_AddRoundKey_fu_407_statemt_address0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        statemt_address0 = grp_MixColumn_AddRoundKe_fu_384_statemt_address0;
    end else if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state27))) begin
        statemt_address0 = grp_InversShiftRow_ByteS_fu_375_statemt_address0;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state14))) begin
        statemt_address0 = grp_ByteSub_ShiftRow_fu_366_statemt_address0;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        statemt_address0 = grp_AddRoundKey_InversMi_fu_356_statemt_address0;
    end else begin
        statemt_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        statemt_address1 = zext_ln130_fu_558_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        statemt_address1 = 5'd15;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        statemt_address1 = 5'd13;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        statemt_address1 = 5'd11;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        statemt_address1 = 5'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        statemt_address1 = 5'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        statemt_address1 = 5'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        statemt_address1 = 5'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        statemt_address1 = 5'd1;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state12))) begin
        statemt_address1 = grp_AddRoundKey_fu_407_statemt_address1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        statemt_address1 = grp_MixColumn_AddRoundKe_fu_384_statemt_address1;
    end else if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state27))) begin
        statemt_address1 = grp_InversShiftRow_ByteS_fu_375_statemt_address1;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state14))) begin
        statemt_address1 = grp_ByteSub_ShiftRow_fu_366_statemt_address1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        statemt_address1 = grp_AddRoundKey_InversMi_fu_356_statemt_address1;
    end else begin
        statemt_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state20) | ((grp_KeySchedule_fu_395_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
        statemt_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state12))) begin
        statemt_ce0 = grp_AddRoundKey_fu_407_statemt_ce0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        statemt_ce0 = grp_MixColumn_AddRoundKe_fu_384_statemt_ce0;
    end else if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state27))) begin
        statemt_ce0 = grp_InversShiftRow_ByteS_fu_375_statemt_ce0;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state14))) begin
        statemt_ce0 = grp_ByteSub_ShiftRow_fu_366_statemt_ce0;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        statemt_ce0 = grp_AddRoundKey_InversMi_fu_356_statemt_ce0;
    end else begin
        statemt_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state34) | ((grp_KeySchedule_fu_395_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
        statemt_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state12))) begin
        statemt_ce1 = grp_AddRoundKey_fu_407_statemt_ce1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        statemt_ce1 = grp_MixColumn_AddRoundKe_fu_384_statemt_ce1;
    end else if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state27))) begin
        statemt_ce1 = grp_InversShiftRow_ByteS_fu_375_statemt_ce1;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state14))) begin
        statemt_ce1 = grp_ByteSub_ShiftRow_fu_366_statemt_ce1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        statemt_ce1 = grp_AddRoundKey_InversMi_fu_356_statemt_ce1;
    end else begin
        statemt_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        statemt_d0 = 32'd7;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        statemt_d0 = 32'd224;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        statemt_d0 = 32'd152;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        statemt_d0 = 32'd49;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        statemt_d0 = 32'd48;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        statemt_d0 = 32'd136;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        statemt_d0 = 32'd246;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        statemt_d0 = 32'd50;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state12))) begin
        statemt_d0 = grp_AddRoundKey_fu_407_statemt_d0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        statemt_d0 = grp_MixColumn_AddRoundKe_fu_384_statemt_d0;
    end else if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state27))) begin
        statemt_d0 = grp_InversShiftRow_ByteS_fu_375_statemt_d0;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state14))) begin
        statemt_d0 = grp_ByteSub_ShiftRow_fu_366_statemt_d0;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        statemt_d0 = grp_AddRoundKey_InversMi_fu_356_statemt_d0;
    end else begin
        statemt_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        statemt_d1 = 32'd52;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        statemt_d1 = 32'd55;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        statemt_d1 = 32'd162;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        statemt_d1 = 32'd49;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        statemt_d1 = 32'd141;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        statemt_d1 = 32'd90;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        statemt_d1 = 32'd168;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        statemt_d1 = 32'd67;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state12))) begin
        statemt_d1 = grp_AddRoundKey_fu_407_statemt_d1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        statemt_d1 = grp_MixColumn_AddRoundKe_fu_384_statemt_d1;
    end else if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state27))) begin
        statemt_d1 = grp_InversShiftRow_ByteS_fu_375_statemt_d1;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state14))) begin
        statemt_d1 = grp_ByteSub_ShiftRow_fu_366_statemt_d1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        statemt_d1 = grp_AddRoundKey_InversMi_fu_356_statemt_d1;
    end else begin
        statemt_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | ((grp_KeySchedule_fu_395_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
        statemt_we0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state12))) begin
        statemt_we0 = grp_AddRoundKey_fu_407_statemt_we0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        statemt_we0 = grp_MixColumn_AddRoundKe_fu_384_statemt_we0;
    end else if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state27))) begin
        statemt_we0 = grp_InversShiftRow_ByteS_fu_375_statemt_we0;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state14))) begin
        statemt_we0 = grp_ByteSub_ShiftRow_fu_366_statemt_we0;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        statemt_we0 = grp_AddRoundKey_InversMi_fu_356_statemt_we0;
    end else begin
        statemt_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | ((grp_KeySchedule_fu_395_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
        statemt_we1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state12))) begin
        statemt_we1 = grp_AddRoundKey_fu_407_statemt_we1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        statemt_we1 = grp_MixColumn_AddRoundKe_fu_384_statemt_we1;
    end else if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state27))) begin
        statemt_we1 = grp_InversShiftRow_ByteS_fu_375_statemt_we1;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state14))) begin
        statemt_we1 = grp_ByteSub_ShiftRow_fu_366_statemt_we1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        statemt_we1 = grp_AddRoundKey_InversMi_fu_356_statemt_we1;
    end else begin
        statemt_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state12))) begin
        word_address0 = grp_AddRoundKey_fu_407_word_address0;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state10))) begin
        word_address0 = grp_KeySchedule_fu_395_word_address0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        word_address0 = grp_MixColumn_AddRoundKe_fu_384_word_address0;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        word_address0 = grp_AddRoundKey_InversMi_fu_356_word_address0;
    end else begin
        word_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state12))) begin
        word_address1 = grp_AddRoundKey_fu_407_word_address1;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state10))) begin
        word_address1 = grp_KeySchedule_fu_395_word_address1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        word_address1 = grp_MixColumn_AddRoundKe_fu_384_word_address1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        word_address1 = grp_AddRoundKey_InversMi_fu_356_word_address1;
    end else begin
        word_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state12))) begin
        word_ce0 = grp_AddRoundKey_fu_407_word_ce0;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state10))) begin
        word_ce0 = grp_KeySchedule_fu_395_word_ce0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        word_ce0 = grp_MixColumn_AddRoundKe_fu_384_word_ce0;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        word_ce0 = grp_AddRoundKey_InversMi_fu_356_word_ce0;
    end else begin
        word_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state12))) begin
        word_ce1 = grp_AddRoundKey_fu_407_word_ce1;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state10))) begin
        word_ce1 = grp_KeySchedule_fu_395_word_ce1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        word_ce1 = grp_MixColumn_AddRoundKe_fu_384_word_ce1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        word_ce1 = grp_AddRoundKey_InversMi_fu_356_word_ce1;
    end else begin
        word_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state10))) begin
        word_we0 = grp_KeySchedule_fu_395_word_we0;
    end else begin
        word_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((grp_KeySchedule_fu_395_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((grp_AddRoundKey_fu_407_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln107_fu_469_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((grp_ByteSub_ShiftRow_fu_366_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((grp_MixColumn_AddRoundKe_fu_384_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((grp_ByteSub_ShiftRow_fu_366_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((grp_AddRoundKey_fu_407_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln123_fu_481_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state23 : begin
            if (((grp_KeySchedule_fu_395_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((grp_AddRoundKey_fu_407_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == ap_CS_fsm_state27) & (grp_InversShiftRow_ByteS_fu_375_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln113_fu_540_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((grp_AddRoundKey_InversMi_fu_356_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == ap_CS_fsm_state32) & (grp_InversShiftRow_ByteS_fu_375_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((grp_AddRoundKey_fu_407_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == ap_CS_fsm_state34) & (icmp_ln129_fu_546_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln107_fu_459_p2 = (5'd9 + trunc_ln107_fu_455_p1);

assign add_ln124_fu_518_p2 = (main_result + zext_ln124_2_fu_515_p1);

assign add_ln130_fu_577_p2 = (main_result + zext_ln130_2_fu_574_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = 32'd0;

assign grp_AddRoundKey_InversMi_fu_356_ap_start = grp_AddRoundKey_InversMi_fu_356_ap_start_reg;

assign grp_AddRoundKey_fu_407_ap_start = grp_AddRoundKey_fu_407_ap_start_reg;

assign grp_ByteSub_ShiftRow_fu_366_ap_start = grp_ByteSub_ShiftRow_fu_366_ap_start_reg;

assign grp_InversShiftRow_ByteS_fu_375_ap_start = grp_InversShiftRow_ByteS_fu_375_ap_start_reg;

assign grp_KeySchedule_fu_395_ap_start = grp_KeySchedule_fu_395_ap_start_reg;

assign grp_MixColumn_AddRoundKe_fu_384_ap_start = grp_MixColumn_AddRoundKe_fu_384_ap_start_reg;

assign i_1_fu_487_p2 = (i_2_i_reg_325 + 5'd1);

assign i_2_fu_534_p2 = ($signed(i_0_in_i_reg_336) + $signed(32'd4294967295));

assign i_3_fu_552_p2 = (i_2_i5_reg_345 + 5'd1);

assign i_fu_475_p2 = (i_0_i_reg_313 + 32'd1);

assign icmp_ln107_fu_469_p2 = (($signed(i_0_i_reg_313) > $signed(zext_ln107_fu_465_p1)) ? 1'b1 : 1'b0);

assign icmp_ln113_fu_540_p2 = (($signed(i_2_fu_534_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln123_fu_481_p2 = ((i_2_i_reg_325 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln124_fu_509_p2 = ((statemt_q0 != zext_ln124_1_fu_505_p1) ? 1'b1 : 1'b0);

assign icmp_ln129_fu_546_p2 = ((i_2_i5_reg_345 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln130_fu_568_p2 = ((statemt_q1 != zext_ln130_1_fu_564_p1) ? 1'b1 : 1'b0);

assign out_dec_statemt_address0 = zext_ln130_fu_558_p1;

assign out_enc_statemt_address0 = zext_ln124_fu_493_p1;

assign trunc_ln107_fu_455_p1 = round_val[4:0];

assign zext_ln107_fu_465_p1 = add_ln107_fu_459_p2;

assign zext_ln113_fu_530_p1 = round_val;

assign zext_ln124_1_fu_505_p1 = out_enc_statemt_q0;

assign zext_ln124_2_fu_515_p1 = icmp_ln124_reg_615;

assign zext_ln124_fu_493_p1 = i_2_i_reg_325;

assign zext_ln130_1_fu_564_p1 = out_dec_statemt_q0;

assign zext_ln130_2_fu_574_p1 = icmp_ln130_reg_652;

assign zext_ln130_fu_558_p1 = i_2_i5_reg_345;

always @ (posedge ap_clk) begin
    round_val[0] <= 1'b0;
    round_val[2:2] <= 1'b0;
    round_val[5:4] <= 2'b00;
    nb[1:0] <= 2'b00;
    nb[31:3] <= 29'b00000000000000000000000000000;
    reg_441[1:0] <= 2'b00;
    reg_441[31:3] <= 29'b00000000000000000000000000000;
end

endmodule //aes_main
