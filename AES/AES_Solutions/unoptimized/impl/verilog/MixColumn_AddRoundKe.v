// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MixColumn_AddRoundKe (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        statemt_address0,
        statemt_ce0,
        statemt_we0,
        statemt_d0,
        statemt_q0,
        statemt_address1,
        statemt_ce1,
        statemt_we1,
        statemt_d1,
        statemt_q1,
        nb,
        n,
        word_address0,
        word_ce0,
        word_q0,
        word_address1,
        word_ce1,
        word_q1
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] statemt_address0;
output   statemt_ce0;
output   statemt_we0;
output  [31:0] statemt_d0;
input  [31:0] statemt_q0;
output  [4:0] statemt_address1;
output   statemt_ce1;
output   statemt_we1;
output  [31:0] statemt_d1;
input  [31:0] statemt_q1;
input  [31:0] nb;
input  [31:0] n;
output  [8:0] word_address0;
output   word_ce0;
input  [31:0] word_q0;
output  [8:0] word_address1;
output   word_ce1;
input  [31:0] word_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] statemt_address0;
reg statemt_ce0;
reg statemt_we0;
reg[4:0] statemt_address1;
reg statemt_ce1;
reg statemt_we1;
reg[8:0] word_address0;
reg word_ce0;
reg[8:0] word_address1;
reg word_ce1;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] mul_ln383_fu_291_p2;
reg   [31:0] mul_ln383_reg_871;
wire   [30:0] j_2_fu_306_p2;
reg   [30:0] j_2_reg_879;
wire    ap_CS_fsm_state2;
wire  signed [31:0] shl_ln_fu_316_p3;
reg  signed [31:0] shl_ln_reg_884;
wire   [0:0] icmp_ln372_fu_301_p2;
wire  signed [63:0] sext_ln374_fu_324_p1;
reg  signed [63:0] sext_ln374_reg_890;
wire  signed [63:0] sext_ln377_fu_335_p1;
reg  signed [63:0] sext_ln377_reg_900;
wire   [9:0] trunc_ln383_fu_350_p1;
reg   [9:0] trunc_ln383_reg_910;
reg   [31:0] x_6_reg_926;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln375_fu_373_p2;
reg   [0:0] icmp_ln375_reg_934;
reg   [31:0] x_reg_939;
wire  signed [63:0] sext_ln383_fu_384_p1;
reg  signed [63:0] sext_ln383_reg_947;
wire  signed [63:0] sext_ln383_1_fu_394_p1;
reg  signed [63:0] sext_ln383_1_reg_957;
reg   [31:0] word_load_reg_977;
wire   [0:0] icmp_ln387_fu_427_p2;
reg   [0:0] icmp_ln387_reg_982;
reg   [31:0] word_load_1_reg_987;
wire   [31:0] xor_ln395_2_fu_602_p2;
reg   [31:0] xor_ln395_2_reg_992;
wire    ap_CS_fsm_state4;
wire   [31:0] xor_ln407_2_fu_702_p2;
reg   [31:0] xor_ln407_2_reg_997;
wire   [31:0] xor_ln419_2_fu_796_p2;
reg   [31:0] xor_ln419_2_reg_1002;
wire   [30:0] j_fu_811_p2;
reg   [30:0] j_reg_1010;
wire    ap_CS_fsm_state7;
wire  signed [31:0] shl_ln4_fu_821_p3;
reg  signed [31:0] shl_ln4_reg_1015;
wire   [0:0] icmp_ln422_fu_806_p2;
wire  signed [63:0] sext_ln424_fu_829_p1;
reg  signed [63:0] sext_ln424_reg_1021;
wire  signed [63:0] sext_ln425_fu_840_p1;
reg  signed [63:0] sext_ln425_reg_1031;
wire  signed [63:0] sext_ln426_fu_850_p1;
reg  signed [63:0] sext_ln426_reg_1041;
wire    ap_CS_fsm_state8;
wire  signed [63:0] sext_ln427_fu_860_p1;
reg  signed [63:0] sext_ln427_reg_1051;
reg   [4:0] ret_address0;
reg    ret_ce0;
reg    ret_we0;
reg   [31:0] ret_d0;
wire   [31:0] ret_q0;
reg   [4:0] ret_address1;
reg    ret_ce1;
reg    ret_we1;
reg   [31:0] ret_d1;
wire   [31:0] ret_q1;
reg   [30:0] j_0_reg_249;
wire    ap_CS_fsm_state6;
reg   [30:0] j_1_reg_260;
wire    ap_CS_fsm_state9;
wire  signed [63:0] sext_ln383_2_fu_345_p1;
wire  signed [63:0] sext_ln395_fu_360_p1;
wire  signed [63:0] sext_ln407_fu_404_p1;
wire  signed [63:0] sext_ln419_fu_414_p1;
wire    ap_CS_fsm_state5;
wire   [31:0] xor_ln383_2_fu_516_p2;
wire  signed [31:0] mul_ln383_fu_291_p0;
wire  signed [31:0] mul_ln383_fu_291_p1;
wire   [31:0] zext_ln372_fu_297_p1;
wire  signed [31:0] icmp_ln372_fu_301_p1;
wire   [29:0] trunc_ln374_fu_312_p1;
wire   [31:0] or_ln377_fu_329_p2;
wire  signed [31:0] add_ln383_fu_340_p2;
wire   [9:0] add_ln395_fu_354_p2;
wire   [23:0] grp_fu_271_p4;
wire   [31:0] and_ln_fu_365_p3;
wire   [31:0] or_ln383_fu_379_p2;
wire   [31:0] or_ln383_1_fu_389_p2;
wire   [9:0] add_ln407_fu_399_p2;
wire   [9:0] add_ln419_fu_409_p2;
wire   [23:0] grp_fu_281_p4;
wire   [31:0] and_ln2_fu_419_p3;
wire   [31:0] shl_ln374_fu_433_p2;
wire   [31:0] xor_ln376_fu_438_p2;
wire   [31:0] shl_ln378_fu_451_p2;
wire   [31:0] x_1_fu_456_p2;
wire   [23:0] tmp_4_fu_461_p4;
wire   [31:0] and_ln1_fu_471_p3;
wire   [0:0] icmp_ln379_fu_479_p2;
wire   [31:0] xor_ln380_fu_485_p2;
wire   [31:0] select_ln375_fu_444_p3;
wire   [31:0] select_ln379_fu_491_p3;
wire   [31:0] xor_ln383_1_fu_505_p2;
wire   [31:0] xor_ln383_3_fu_511_p2;
wire   [31:0] xor_ln383_fu_499_p2;
wire   [31:0] xor_ln388_fu_523_p2;
wire   [31:0] shl_ln390_fu_536_p2;
wire   [31:0] x_3_fu_542_p2;
wire   [23:0] tmp_7_fu_548_p4;
wire   [31:0] and_ln3_fu_558_p3;
wire   [0:0] icmp_ln391_fu_566_p2;
wire   [31:0] xor_ln392_fu_572_p2;
wire   [31:0] select_ln391_fu_578_p3;
wire   [31:0] select_ln387_fu_529_p3;
wire   [31:0] xor_ln395_1_fu_591_p2;
wire   [31:0] xor_ln395_3_fu_597_p2;
wire   [31:0] xor_ln395_fu_586_p2;
wire   [31:0] and_ln4_fu_608_p3;
wire   [0:0] icmp_ln399_fu_616_p2;
wire   [31:0] xor_ln400_fu_622_p2;
wire   [31:0] shl_ln402_fu_636_p2;
wire   [31:0] x_5_fu_642_p2;
wire   [23:0] tmp_s_fu_648_p4;
wire   [31:0] and_ln5_fu_658_p3;
wire   [0:0] icmp_ln403_fu_666_p2;
wire   [31:0] xor_ln404_fu_672_p2;
wire   [31:0] select_ln403_fu_678_p3;
wire   [31:0] select_ln399_fu_628_p3;
wire   [31:0] xor_ln407_1_fu_690_p2;
wire   [31:0] xor_ln407_3_fu_696_p2;
wire   [31:0] xor_ln407_fu_686_p2;
wire   [31:0] and_ln6_fu_708_p3;
wire   [0:0] icmp_ln411_fu_716_p2;
wire   [31:0] xor_ln412_fu_722_p2;
wire   [31:0] x_7_fu_736_p2;
wire   [23:0] tmp_3_fu_741_p4;
wire   [31:0] and_ln7_fu_751_p3;
wire   [0:0] icmp_ln415_fu_759_p2;
wire   [31:0] xor_ln416_fu_765_p2;
wire   [31:0] select_ln415_fu_771_p3;
wire   [31:0] select_ln411_fu_728_p3;
wire   [31:0] xor_ln419_1_fu_784_p2;
wire   [31:0] xor_ln419_3_fu_790_p2;
wire   [31:0] xor_ln419_fu_779_p2;
wire   [31:0] zext_ln422_fu_802_p1;
wire  signed [31:0] icmp_ln422_fu_806_p1;
wire   [29:0] trunc_ln424_fu_817_p1;
wire   [31:0] or_ln425_fu_834_p2;
wire   [31:0] or_ln426_fu_845_p2;
wire   [31:0] or_ln427_fu_855_p2;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

MixColumn_AddRoundEe #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
ret_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(ret_address0),
    .ce0(ret_ce0),
    .we0(ret_we0),
    .d0(ret_d0),
    .q0(ret_q0),
    .address1(ret_address1),
    .ce1(ret_ce1),
    .we1(ret_we1),
    .d1(ret_d1),
    .q1(ret_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_0_reg_249 <= j_2_reg_879;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_0_reg_249 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln372_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_1_reg_260 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        j_1_reg_260 <= j_reg_1010;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln375_reg_934 <= icmp_ln375_fu_373_p2;
        icmp_ln387_reg_982 <= icmp_ln387_fu_427_p2;
        sext_ln383_1_reg_957[63 : 2] <= sext_ln383_1_fu_394_p1[63 : 2];
        sext_ln383_reg_947[63 : 2] <= sext_ln383_fu_384_p1[63 : 2];
        word_load_1_reg_987 <= word_q1;
        word_load_reg_977 <= word_q0;
        x_6_reg_926 <= statemt_q0;
        x_reg_939 <= statemt_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        j_2_reg_879 <= j_2_fu_306_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_reg_1010 <= j_fu_811_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        mul_ln383_reg_871 <= mul_ln383_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln372_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        sext_ln374_reg_890[63 : 2] <= sext_ln374_fu_324_p1[63 : 2];
        sext_ln377_reg_900[63 : 2] <= sext_ln377_fu_335_p1[63 : 2];
        shl_ln_reg_884[31 : 2] <= shl_ln_fu_316_p3[31 : 2];
        trunc_ln383_reg_910 <= trunc_ln383_fu_350_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln422_fu_806_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        sext_ln424_reg_1021[63 : 2] <= sext_ln424_fu_829_p1[63 : 2];
        sext_ln425_reg_1031[63 : 2] <= sext_ln425_fu_840_p1[63 : 2];
        shl_ln4_reg_1015[31 : 2] <= shl_ln4_fu_821_p3[31 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sext_ln426_reg_1041[63 : 2] <= sext_ln426_fu_850_p1[63 : 2];
        sext_ln427_reg_1051[63 : 2] <= sext_ln427_fu_860_p1[63 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        xor_ln395_2_reg_992 <= xor_ln395_2_fu_602_p2;
        xor_ln407_2_reg_997 <= xor_ln407_2_fu_702_p2;
        xor_ln419_2_reg_1002 <= xor_ln419_2_fu_796_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state7) & (icmp_ln422_fu_806_p2 == 1'd0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln422_fu_806_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ret_address0 = sext_ln426_fu_850_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ret_address0 = sext_ln424_fu_829_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ret_address0 = sext_ln377_reg_900;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ret_address0 = sext_ln374_reg_890;
    end else begin
        ret_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ret_address1 = sext_ln427_fu_860_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ret_address1 = sext_ln425_fu_840_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ret_address1 = sext_ln383_1_reg_957;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ret_address1 = sext_ln383_reg_947;
    end else begin
        ret_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        ret_ce0 = 1'b1;
    end else begin
        ret_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        ret_ce1 = 1'b1;
    end else begin
        ret_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ret_d0 = xor_ln395_2_reg_992;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ret_d0 = xor_ln383_2_fu_516_p2;
    end else begin
        ret_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ret_d1 = xor_ln419_2_reg_1002;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ret_d1 = xor_ln407_2_reg_997;
    end else begin
        ret_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        ret_we0 = 1'b1;
    end else begin
        ret_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        ret_we1 = 1'b1;
    end else begin
        ret_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        statemt_address0 = sext_ln426_reg_1041;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        statemt_address0 = sext_ln424_reg_1021;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        statemt_address0 = sext_ln383_fu_384_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        statemt_address0 = sext_ln374_fu_324_p1;
    end else begin
        statemt_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        statemt_address1 = sext_ln427_reg_1051;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        statemt_address1 = sext_ln425_reg_1031;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        statemt_address1 = sext_ln383_1_fu_394_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        statemt_address1 = sext_ln377_fu_335_p1;
    end else begin
        statemt_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        statemt_ce0 = 1'b1;
    end else begin
        statemt_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        statemt_ce1 = 1'b1;
    end else begin
        statemt_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        statemt_we0 = 1'b1;
    end else begin
        statemt_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        statemt_we1 = 1'b1;
    end else begin
        statemt_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        word_address0 = sext_ln407_fu_404_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        word_address0 = sext_ln383_2_fu_345_p1;
    end else begin
        word_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        word_address1 = sext_ln419_fu_414_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        word_address1 = sext_ln395_fu_360_p1;
    end else begin
        word_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        word_ce0 = 1'b1;
    end else begin
        word_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        word_ce1 = 1'b1;
    end else begin
        word_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln372_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln422_fu_806_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln383_fu_340_p2 = (zext_ln372_fu_297_p1 + mul_ln383_reg_871);

assign add_ln395_fu_354_p2 = (10'd120 + trunc_ln383_fu_350_p1);

assign add_ln407_fu_399_p2 = (10'd240 + trunc_ln383_reg_910);

assign add_ln419_fu_409_p2 = (10'd360 + trunc_ln383_reg_910);

assign and_ln1_fu_471_p3 = {{tmp_4_fu_461_p4}, {8'd0}};

assign and_ln2_fu_419_p3 = {{grp_fu_281_p4}, {8'd0}};

assign and_ln3_fu_558_p3 = {{tmp_7_fu_548_p4}, {8'd0}};

assign and_ln4_fu_608_p3 = {{grp_fu_271_p4}, {8'd0}};

assign and_ln5_fu_658_p3 = {{tmp_s_fu_648_p4}, {8'd0}};

assign and_ln6_fu_708_p3 = {{grp_fu_281_p4}, {8'd0}};

assign and_ln7_fu_751_p3 = {{tmp_3_fu_741_p4}, {8'd0}};

assign and_ln_fu_365_p3 = {{grp_fu_271_p4}, {8'd0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_271_p4 = {{statemt_q0[30:7]}};

assign grp_fu_281_p4 = {{statemt_q1[30:7]}};

assign icmp_ln372_fu_301_p1 = nb;

assign icmp_ln372_fu_301_p2 = (($signed(zext_ln372_fu_297_p1) < $signed(icmp_ln372_fu_301_p1)) ? 1'b1 : 1'b0);

assign icmp_ln375_fu_373_p2 = ((and_ln_fu_365_p3 == 32'd256) ? 1'b1 : 1'b0);

assign icmp_ln379_fu_479_p2 = ((and_ln1_fu_471_p3 == 32'd256) ? 1'b1 : 1'b0);

assign icmp_ln387_fu_427_p2 = ((and_ln2_fu_419_p3 == 32'd256) ? 1'b1 : 1'b0);

assign icmp_ln391_fu_566_p2 = ((and_ln3_fu_558_p3 == 32'd256) ? 1'b1 : 1'b0);

assign icmp_ln399_fu_616_p2 = ((and_ln4_fu_608_p3 == 32'd256) ? 1'b1 : 1'b0);

assign icmp_ln403_fu_666_p2 = ((and_ln5_fu_658_p3 == 32'd256) ? 1'b1 : 1'b0);

assign icmp_ln411_fu_716_p2 = ((and_ln6_fu_708_p3 == 32'd256) ? 1'b1 : 1'b0);

assign icmp_ln415_fu_759_p2 = ((and_ln7_fu_751_p3 == 32'd256) ? 1'b1 : 1'b0);

assign icmp_ln422_fu_806_p1 = nb;

assign icmp_ln422_fu_806_p2 = (($signed(zext_ln422_fu_802_p1) < $signed(icmp_ln422_fu_806_p1)) ? 1'b1 : 1'b0);

assign j_2_fu_306_p2 = (j_0_reg_249 + 31'd1);

assign j_fu_811_p2 = (j_1_reg_260 + 31'd1);

assign mul_ln383_fu_291_p0 = n;

assign mul_ln383_fu_291_p1 = nb;

assign mul_ln383_fu_291_p2 = ($signed(mul_ln383_fu_291_p0) * $signed(mul_ln383_fu_291_p1));

assign or_ln377_fu_329_p2 = (shl_ln_fu_316_p3 | 32'd1);

assign or_ln383_1_fu_389_p2 = (shl_ln_reg_884 | 32'd3);

assign or_ln383_fu_379_p2 = (shl_ln_reg_884 | 32'd2);

assign or_ln425_fu_834_p2 = (shl_ln4_fu_821_p3 | 32'd1);

assign or_ln426_fu_845_p2 = (shl_ln4_reg_1015 | 32'd2);

assign or_ln427_fu_855_p2 = (shl_ln4_reg_1015 | 32'd3);

assign select_ln375_fu_444_p3 = ((icmp_ln375_reg_934[0:0] === 1'b1) ? xor_ln376_fu_438_p2 : shl_ln374_fu_433_p2);

assign select_ln379_fu_491_p3 = ((icmp_ln379_fu_479_p2[0:0] === 1'b1) ? xor_ln380_fu_485_p2 : x_1_fu_456_p2);

assign select_ln387_fu_529_p3 = ((icmp_ln387_reg_982[0:0] === 1'b1) ? xor_ln388_fu_523_p2 : shl_ln378_fu_451_p2);

assign select_ln391_fu_578_p3 = ((icmp_ln391_fu_566_p2[0:0] === 1'b1) ? xor_ln392_fu_572_p2 : x_3_fu_542_p2);

assign select_ln399_fu_628_p3 = ((icmp_ln399_fu_616_p2[0:0] === 1'b1) ? xor_ln400_fu_622_p2 : shl_ln390_fu_536_p2);

assign select_ln403_fu_678_p3 = ((icmp_ln403_fu_666_p2[0:0] === 1'b1) ? xor_ln404_fu_672_p2 : x_5_fu_642_p2);

assign select_ln411_fu_728_p3 = ((icmp_ln411_fu_716_p2[0:0] === 1'b1) ? xor_ln412_fu_722_p2 : shl_ln402_fu_636_p2);

assign select_ln415_fu_771_p3 = ((icmp_ln415_fu_759_p2[0:0] === 1'b1) ? xor_ln416_fu_765_p2 : x_7_fu_736_p2);

assign sext_ln374_fu_324_p1 = shl_ln_fu_316_p3;

assign sext_ln377_fu_335_p1 = $signed(or_ln377_fu_329_p2);

assign sext_ln383_1_fu_394_p1 = $signed(or_ln383_1_fu_389_p2);

assign sext_ln383_2_fu_345_p1 = add_ln383_fu_340_p2;

assign sext_ln383_fu_384_p1 = $signed(or_ln383_fu_379_p2);

assign sext_ln395_fu_360_p1 = $signed(add_ln395_fu_354_p2);

assign sext_ln407_fu_404_p1 = $signed(add_ln407_fu_399_p2);

assign sext_ln419_fu_414_p1 = $signed(add_ln419_fu_409_p2);

assign sext_ln424_fu_829_p1 = shl_ln4_fu_821_p3;

assign sext_ln425_fu_840_p1 = $signed(or_ln425_fu_834_p2);

assign sext_ln426_fu_850_p1 = $signed(or_ln426_fu_845_p2);

assign sext_ln427_fu_860_p1 = $signed(or_ln427_fu_855_p2);

assign shl_ln374_fu_433_p2 = x_6_reg_926 << 32'd1;

assign shl_ln378_fu_451_p2 = x_reg_939 << 32'd1;

assign shl_ln390_fu_536_p2 = statemt_q0 << 32'd1;

assign shl_ln402_fu_636_p2 = statemt_q1 << 32'd1;

assign shl_ln4_fu_821_p3 = {{trunc_ln424_fu_817_p1}, {2'd0}};

assign shl_ln_fu_316_p3 = {{trunc_ln374_fu_312_p1}, {2'd0}};

assign statemt_d0 = ret_q0;

assign statemt_d1 = ret_q1;

assign tmp_3_fu_741_p4 = {{x_7_fu_736_p2[31:8]}};

assign tmp_4_fu_461_p4 = {{x_1_fu_456_p2[31:8]}};

assign tmp_7_fu_548_p4 = {{x_3_fu_542_p2[31:8]}};

assign tmp_s_fu_648_p4 = {{x_5_fu_642_p2[31:8]}};

assign trunc_ln374_fu_312_p1 = j_0_reg_249[29:0];

assign trunc_ln383_fu_350_p1 = add_ln383_fu_340_p2[9:0];

assign trunc_ln424_fu_817_p1 = j_1_reg_260[29:0];

assign x_1_fu_456_p2 = (x_reg_939 ^ shl_ln378_fu_451_p2);

assign x_3_fu_542_p2 = (statemt_q0 ^ shl_ln390_fu_536_p2);

assign x_5_fu_642_p2 = (statemt_q1 ^ shl_ln402_fu_636_p2);

assign x_7_fu_736_p2 = (x_6_reg_926 ^ shl_ln374_fu_433_p2);

assign xor_ln376_fu_438_p2 = (shl_ln374_fu_433_p2 ^ 32'd283);

assign xor_ln380_fu_485_p2 = (x_1_fu_456_p2 ^ 32'd283);

assign xor_ln383_1_fu_505_p2 = (select_ln379_fu_491_p3 ^ select_ln375_fu_444_p3);

assign xor_ln383_2_fu_516_p2 = (xor_ln383_fu_499_p2 ^ xor_ln383_3_fu_511_p2);

assign xor_ln383_3_fu_511_p2 = (xor_ln383_1_fu_505_p2 ^ word_load_reg_977);

assign xor_ln383_fu_499_p2 = (statemt_q1 ^ statemt_q0);

assign xor_ln388_fu_523_p2 = (shl_ln378_fu_451_p2 ^ 32'd283);

assign xor_ln392_fu_572_p2 = (x_3_fu_542_p2 ^ 32'd283);

assign xor_ln395_1_fu_591_p2 = (select_ln391_fu_578_p3 ^ select_ln387_fu_529_p3);

assign xor_ln395_2_fu_602_p2 = (xor_ln395_fu_586_p2 ^ xor_ln395_3_fu_597_p2);

assign xor_ln395_3_fu_597_p2 = (xor_ln395_1_fu_591_p2 ^ word_load_1_reg_987);

assign xor_ln395_fu_586_p2 = (x_6_reg_926 ^ statemt_q1);

assign xor_ln400_fu_622_p2 = (shl_ln390_fu_536_p2 ^ 32'd283);

assign xor_ln404_fu_672_p2 = (x_5_fu_642_p2 ^ 32'd283);

assign xor_ln407_1_fu_690_p2 = (select_ln403_fu_678_p3 ^ select_ln399_fu_628_p3);

assign xor_ln407_2_fu_702_p2 = (xor_ln407_fu_686_p2 ^ xor_ln407_3_fu_696_p2);

assign xor_ln407_3_fu_696_p2 = (xor_ln407_1_fu_690_p2 ^ word_q0);

assign xor_ln407_fu_686_p2 = (x_reg_939 ^ x_6_reg_926);

assign xor_ln412_fu_722_p2 = (shl_ln402_fu_636_p2 ^ 32'd283);

assign xor_ln416_fu_765_p2 = (x_7_fu_736_p2 ^ 32'd283);

assign xor_ln419_1_fu_784_p2 = (select_ln415_fu_771_p3 ^ select_ln411_fu_728_p3);

assign xor_ln419_2_fu_796_p2 = (xor_ln419_fu_779_p2 ^ xor_ln419_3_fu_790_p2);

assign xor_ln419_3_fu_790_p2 = (xor_ln419_1_fu_784_p2 ^ word_q1);

assign xor_ln419_fu_779_p2 = (x_reg_939 ^ statemt_q0);

assign zext_ln372_fu_297_p1 = j_0_reg_249;

assign zext_ln422_fu_802_p1 = j_1_reg_260;

always @ (posedge ap_clk) begin
    shl_ln_reg_884[1:0] <= 2'b00;
    sext_ln374_reg_890[1:0] <= 2'b00;
    sext_ln377_reg_900[1:0] <= 2'b01;
    sext_ln383_reg_947[1:0] <= 2'b10;
    sext_ln383_1_reg_957[1:0] <= 2'b11;
    shl_ln4_reg_1015[1:0] <= 2'b00;
    sext_ln424_reg_1021[1:0] <= 2'b00;
    sext_ln425_reg_1031[1:0] <= 2'b01;
    sext_ln426_reg_1041[1:0] <= 2'b10;
    sext_ln427_reg_1051[1:0] <= 2'b11;
end

endmodule //MixColumn_AddRoundKe
