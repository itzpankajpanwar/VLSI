-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MixColumn_AddRoundKe is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    statemt_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    statemt_ce0 : OUT STD_LOGIC;
    statemt_we0 : OUT STD_LOGIC;
    statemt_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    statemt_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    statemt_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    statemt_ce1 : OUT STD_LOGIC;
    statemt_we1 : OUT STD_LOGIC;
    statemt_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    statemt_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    nb : IN STD_LOGIC_VECTOR (31 downto 0);
    n : IN STD_LOGIC_VECTOR (31 downto 0);
    word_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    word_ce0 : OUT STD_LOGIC;
    word_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    word_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    word_ce1 : OUT STD_LOGIC;
    word_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MixColumn_AddRoundKe is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_78 : STD_LOGIC_VECTOR (9 downto 0) := "0001111000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv10_F0 : STD_LOGIC_VECTOR (9 downto 0) := "0011110000";
    constant ap_const_lv10_168 : STD_LOGIC_VECTOR (9 downto 0) := "0101101000";
    constant ap_const_lv32_11B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mul_ln383_fu_291_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln383_reg_871 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_fu_306_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_2_reg_879 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal shl_ln_fu_316_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_reg_884 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln372_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln374_fu_324_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln374_reg_890 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln377_fu_335_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln377_reg_900 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln383_fu_350_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln383_reg_910 : STD_LOGIC_VECTOR (9 downto 0);
    signal x_6_reg_926 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln375_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln375_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_reg_939 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln383_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln383_reg_947 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln383_1_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln383_1_reg_957 : STD_LOGIC_VECTOR (63 downto 0);
    signal word_load_reg_977 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln387_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln387_reg_982 : STD_LOGIC_VECTOR (0 downto 0);
    signal word_load_1_reg_987 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln395_2_fu_602_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln395_2_reg_992 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal xor_ln407_2_fu_702_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln407_2_reg_997 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln419_2_fu_796_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln419_2_reg_1002 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_811_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_reg_1010 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal shl_ln4_fu_821_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln4_reg_1015 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln422_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln424_fu_829_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln424_reg_1021 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln425_fu_840_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln425_reg_1031 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln426_fu_850_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln426_reg_1041 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sext_ln427_fu_860_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln427_reg_1051 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_ce0 : STD_LOGIC;
    signal ret_we0 : STD_LOGIC;
    signal ret_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_ce1 : STD_LOGIC;
    signal ret_we1 : STD_LOGIC;
    signal ret_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_reg_249 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal j_1_reg_260 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal sext_ln383_2_fu_345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln395_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln407_fu_404_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln419_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal xor_ln383_2_fu_516_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln383_fu_291_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln383_fu_291_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln372_fu_297_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln372_fu_301_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln374_fu_312_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal or_ln377_fu_329_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln383_fu_340_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln395_fu_354_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_271_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln_fu_365_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln383_fu_379_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln383_1_fu_389_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln407_fu_399_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln419_fu_409_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_281_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln2_fu_419_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln374_fu_433_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln376_fu_438_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln378_fu_451_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_1_fu_456_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_461_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln1_fu_471_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln379_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln380_fu_485_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln375_fu_444_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln379_fu_491_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln383_1_fu_505_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln383_3_fu_511_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln383_fu_499_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln388_fu_523_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln390_fu_536_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_3_fu_542_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_548_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln3_fu_558_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln391_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln392_fu_572_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln391_fu_578_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln387_fu_529_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln395_1_fu_591_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln395_3_fu_597_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln395_fu_586_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln4_fu_608_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln399_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln400_fu_622_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln402_fu_636_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_5_fu_642_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_648_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln5_fu_658_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln403_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln404_fu_672_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln403_fu_678_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln399_fu_628_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln407_1_fu_690_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln407_3_fu_696_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln407_fu_686_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln6_fu_708_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln411_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln412_fu_722_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_7_fu_736_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_741_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln7_fu_751_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln415_fu_759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_fu_765_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln415_fu_771_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln411_fu_728_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln419_1_fu_784_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln419_3_fu_790_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln419_fu_779_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln422_fu_802_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln422_fu_806_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln424_fu_817_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal or_ln425_fu_834_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln426_fu_845_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln427_fu_855_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component MixColumn_AddRoundEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    ret_U : component MixColumn_AddRoundEe
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ret_address0,
        ce0 => ret_ce0,
        we0 => ret_we0,
        d0 => ret_d0,
        q0 => ret_q0,
        address1 => ret_address1,
        ce1 => ret_ce1,
        we1 => ret_we1,
        d1 => ret_d1,
        q1 => ret_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    j_0_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_0_reg_249 <= j_2_reg_879;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_0_reg_249 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    j_1_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln372_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_1_reg_260 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j_1_reg_260 <= j_reg_1010;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln375_reg_934 <= icmp_ln375_fu_373_p2;
                icmp_ln387_reg_982 <= icmp_ln387_fu_427_p2;
                    sext_ln383_1_reg_957(63 downto 2) <= sext_ln383_1_fu_394_p1(63 downto 2);
                    sext_ln383_reg_947(63 downto 2) <= sext_ln383_fu_384_p1(63 downto 2);
                word_load_1_reg_987 <= word_q1;
                word_load_reg_977 <= word_q0;
                x_6_reg_926 <= statemt_q0;
                x_reg_939 <= statemt_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                j_2_reg_879 <= j_2_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                j_reg_1010 <= j_fu_811_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                mul_ln383_reg_871 <= mul_ln383_fu_291_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln372_fu_301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    sext_ln374_reg_890(63 downto 2) <= sext_ln374_fu_324_p1(63 downto 2);
                    sext_ln377_reg_900(63 downto 2) <= sext_ln377_fu_335_p1(63 downto 2);
                    shl_ln_reg_884(31 downto 2) <= shl_ln_fu_316_p3(31 downto 2);
                trunc_ln383_reg_910 <= trunc_ln383_fu_350_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln422_fu_806_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    sext_ln424_reg_1021(63 downto 2) <= sext_ln424_fu_829_p1(63 downto 2);
                    sext_ln425_reg_1031(63 downto 2) <= sext_ln425_fu_840_p1(63 downto 2);
                    shl_ln4_reg_1015(31 downto 2) <= shl_ln4_fu_821_p3(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    sext_ln426_reg_1041(63 downto 2) <= sext_ln426_fu_850_p1(63 downto 2);
                    sext_ln427_reg_1051(63 downto 2) <= sext_ln427_fu_860_p1(63 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                xor_ln395_2_reg_992 <= xor_ln395_2_fu_602_p2;
                xor_ln407_2_reg_997 <= xor_ln407_2_fu_702_p2;
                xor_ln419_2_reg_1002 <= xor_ln419_2_fu_796_p2;
            end if;
        end if;
    end process;
    shl_ln_reg_884(1 downto 0) <= "00";
    sext_ln374_reg_890(1 downto 0) <= "00";
    sext_ln377_reg_900(1 downto 0) <= "01";
    sext_ln383_reg_947(1 downto 0) <= "10";
    sext_ln383_1_reg_957(1 downto 0) <= "11";
    shl_ln4_reg_1015(1 downto 0) <= "00";
    sext_ln424_reg_1021(1 downto 0) <= "00";
    sext_ln425_reg_1031(1 downto 0) <= "01";
    sext_ln426_reg_1041(1 downto 0) <= "10";
    sext_ln427_reg_1051(1 downto 0) <= "11";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln372_fu_301_p2, ap_CS_fsm_state7, icmp_ln422_fu_806_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln372_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln422_fu_806_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln383_fu_340_p2 <= std_logic_vector(unsigned(zext_ln372_fu_297_p1) + unsigned(mul_ln383_reg_871));
    add_ln395_fu_354_p2 <= std_logic_vector(unsigned(ap_const_lv10_78) + unsigned(trunc_ln383_fu_350_p1));
    add_ln407_fu_399_p2 <= std_logic_vector(unsigned(ap_const_lv10_F0) + unsigned(trunc_ln383_reg_910));
    add_ln419_fu_409_p2 <= std_logic_vector(unsigned(ap_const_lv10_168) + unsigned(trunc_ln383_reg_910));
    and_ln1_fu_471_p3 <= (tmp_4_fu_461_p4 & ap_const_lv8_0);
    and_ln2_fu_419_p3 <= (grp_fu_281_p4 & ap_const_lv8_0);
    and_ln3_fu_558_p3 <= (tmp_7_fu_548_p4 & ap_const_lv8_0);
    and_ln4_fu_608_p3 <= (grp_fu_271_p4 & ap_const_lv8_0);
    and_ln5_fu_658_p3 <= (tmp_s_fu_648_p4 & ap_const_lv8_0);
    and_ln6_fu_708_p3 <= (grp_fu_281_p4 & ap_const_lv8_0);
    and_ln7_fu_751_p3 <= (tmp_3_fu_741_p4 & ap_const_lv8_0);
    and_ln_fu_365_p3 <= (grp_fu_271_p4 & ap_const_lv8_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7, icmp_ln422_fu_806_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln422_fu_806_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, icmp_ln422_fu_806_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln422_fu_806_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_271_p4 <= statemt_q0(30 downto 7);
    grp_fu_281_p4 <= statemt_q1(30 downto 7);
    icmp_ln372_fu_301_p1 <= nb;
    icmp_ln372_fu_301_p2 <= "1" when (signed(zext_ln372_fu_297_p1) < signed(icmp_ln372_fu_301_p1)) else "0";
    icmp_ln375_fu_373_p2 <= "1" when (and_ln_fu_365_p3 = ap_const_lv32_100) else "0";
    icmp_ln379_fu_479_p2 <= "1" when (and_ln1_fu_471_p3 = ap_const_lv32_100) else "0";
    icmp_ln387_fu_427_p2 <= "1" when (and_ln2_fu_419_p3 = ap_const_lv32_100) else "0";
    icmp_ln391_fu_566_p2 <= "1" when (and_ln3_fu_558_p3 = ap_const_lv32_100) else "0";
    icmp_ln399_fu_616_p2 <= "1" when (and_ln4_fu_608_p3 = ap_const_lv32_100) else "0";
    icmp_ln403_fu_666_p2 <= "1" when (and_ln5_fu_658_p3 = ap_const_lv32_100) else "0";
    icmp_ln411_fu_716_p2 <= "1" when (and_ln6_fu_708_p3 = ap_const_lv32_100) else "0";
    icmp_ln415_fu_759_p2 <= "1" when (and_ln7_fu_751_p3 = ap_const_lv32_100) else "0";
    icmp_ln422_fu_806_p1 <= nb;
    icmp_ln422_fu_806_p2 <= "1" when (signed(zext_ln422_fu_802_p1) < signed(icmp_ln422_fu_806_p1)) else "0";
    j_2_fu_306_p2 <= std_logic_vector(unsigned(j_0_reg_249) + unsigned(ap_const_lv31_1));
    j_fu_811_p2 <= std_logic_vector(unsigned(j_1_reg_260) + unsigned(ap_const_lv31_1));
    mul_ln383_fu_291_p0 <= n;
    mul_ln383_fu_291_p1 <= nb;
    mul_ln383_fu_291_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln383_fu_291_p0) * signed(mul_ln383_fu_291_p1))), 32));
    or_ln377_fu_329_p2 <= (shl_ln_fu_316_p3 or ap_const_lv32_1);
    or_ln383_1_fu_389_p2 <= (shl_ln_reg_884 or ap_const_lv32_3);
    or_ln383_fu_379_p2 <= (shl_ln_reg_884 or ap_const_lv32_2);
    or_ln425_fu_834_p2 <= (shl_ln4_fu_821_p3 or ap_const_lv32_1);
    or_ln426_fu_845_p2 <= (shl_ln4_reg_1015 or ap_const_lv32_2);
    or_ln427_fu_855_p2 <= (shl_ln4_reg_1015 or ap_const_lv32_3);

    ret_address0_assign_proc : process(sext_ln374_reg_890, sext_ln377_reg_900, ap_CS_fsm_state4, ap_CS_fsm_state7, sext_ln424_fu_829_p1, sext_ln426_fu_850_p1, ap_CS_fsm_state8, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ret_address0 <= sext_ln426_fu_850_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ret_address0 <= sext_ln424_fu_829_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ret_address0 <= sext_ln377_reg_900(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ret_address0 <= sext_ln374_reg_890(5 - 1 downto 0);
        else 
            ret_address0 <= "XXXXX";
        end if; 
    end process;


    ret_address1_assign_proc : process(sext_ln383_reg_947, sext_ln383_1_reg_957, ap_CS_fsm_state7, sext_ln425_fu_840_p1, ap_CS_fsm_state8, sext_ln427_fu_860_p1, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ret_address1 <= sext_ln427_fu_860_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ret_address1 <= sext_ln425_fu_840_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ret_address1 <= sext_ln383_1_reg_957(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ret_address1 <= sext_ln383_reg_947(5 - 1 downto 0);
        else 
            ret_address1 <= "XXXXX";
        end if; 
    end process;


    ret_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ret_ce0 <= ap_const_logic_1;
        else 
            ret_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ret_ce1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ret_ce1 <= ap_const_logic_1;
        else 
            ret_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ret_d0_assign_proc : process(xor_ln395_2_reg_992, ap_CS_fsm_state4, ap_CS_fsm_state5, xor_ln383_2_fu_516_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ret_d0 <= xor_ln395_2_reg_992;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ret_d0 <= xor_ln383_2_fu_516_p2;
        else 
            ret_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ret_d1_assign_proc : process(xor_ln407_2_reg_997, xor_ln419_2_reg_1002, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ret_d1 <= xor_ln419_2_reg_1002;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ret_d1 <= xor_ln407_2_reg_997;
        else 
            ret_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ret_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ret_we0 <= ap_const_logic_1;
        else 
            ret_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ret_we1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ret_we1 <= ap_const_logic_1;
        else 
            ret_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln375_fu_444_p3 <= 
        xor_ln376_fu_438_p2 when (icmp_ln375_reg_934(0) = '1') else 
        shl_ln374_fu_433_p2;
    select_ln379_fu_491_p3 <= 
        xor_ln380_fu_485_p2 when (icmp_ln379_fu_479_p2(0) = '1') else 
        x_1_fu_456_p2;
    select_ln387_fu_529_p3 <= 
        xor_ln388_fu_523_p2 when (icmp_ln387_reg_982(0) = '1') else 
        shl_ln378_fu_451_p2;
    select_ln391_fu_578_p3 <= 
        xor_ln392_fu_572_p2 when (icmp_ln391_fu_566_p2(0) = '1') else 
        x_3_fu_542_p2;
    select_ln399_fu_628_p3 <= 
        xor_ln400_fu_622_p2 when (icmp_ln399_fu_616_p2(0) = '1') else 
        shl_ln390_fu_536_p2;
    select_ln403_fu_678_p3 <= 
        xor_ln404_fu_672_p2 when (icmp_ln403_fu_666_p2(0) = '1') else 
        x_5_fu_642_p2;
    select_ln411_fu_728_p3 <= 
        xor_ln412_fu_722_p2 when (icmp_ln411_fu_716_p2(0) = '1') else 
        shl_ln402_fu_636_p2;
    select_ln415_fu_771_p3 <= 
        xor_ln416_fu_765_p2 when (icmp_ln415_fu_759_p2(0) = '1') else 
        x_7_fu_736_p2;
        sext_ln374_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_316_p3),64));

        sext_ln377_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln377_fu_329_p2),64));

        sext_ln383_1_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln383_1_fu_389_p2),64));

        sext_ln383_2_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln383_fu_340_p2),64));

        sext_ln383_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln383_fu_379_p2),64));

        sext_ln395_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln395_fu_354_p2),64));

        sext_ln407_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln407_fu_399_p2),64));

        sext_ln419_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln419_fu_409_p2),64));

        sext_ln424_fu_829_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln4_fu_821_p3),64));

        sext_ln425_fu_840_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln425_fu_834_p2),64));

        sext_ln426_fu_850_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln426_fu_845_p2),64));

        sext_ln427_fu_860_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln427_fu_855_p2),64));

    shl_ln374_fu_433_p2 <= std_logic_vector(shift_left(unsigned(x_6_reg_926),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln378_fu_451_p2 <= std_logic_vector(shift_left(unsigned(x_reg_939),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln390_fu_536_p2 <= std_logic_vector(shift_left(unsigned(statemt_q0),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln402_fu_636_p2 <= std_logic_vector(shift_left(unsigned(statemt_q1),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln4_fu_821_p3 <= (trunc_ln424_fu_817_p1 & ap_const_lv2_0);
    shl_ln_fu_316_p3 <= (trunc_ln374_fu_312_p1 & ap_const_lv2_0);

    statemt_address0_assign_proc : process(ap_CS_fsm_state2, sext_ln374_fu_324_p1, ap_CS_fsm_state3, sext_ln383_fu_384_p1, sext_ln424_reg_1021, sext_ln426_reg_1041, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            statemt_address0 <= sext_ln426_reg_1041(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            statemt_address0 <= sext_ln424_reg_1021(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            statemt_address0 <= sext_ln383_fu_384_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            statemt_address0 <= sext_ln374_fu_324_p1(5 - 1 downto 0);
        else 
            statemt_address0 <= "XXXXX";
        end if; 
    end process;


    statemt_address1_assign_proc : process(ap_CS_fsm_state2, sext_ln377_fu_335_p1, ap_CS_fsm_state3, sext_ln383_1_fu_394_p1, sext_ln425_reg_1031, ap_CS_fsm_state8, sext_ln427_reg_1051, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            statemt_address1 <= sext_ln427_reg_1051(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            statemt_address1 <= sext_ln425_reg_1031(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            statemt_address1 <= sext_ln383_1_fu_394_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            statemt_address1 <= sext_ln377_fu_335_p1(5 - 1 downto 0);
        else 
            statemt_address1 <= "XXXXX";
        end if; 
    end process;


    statemt_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            statemt_ce0 <= ap_const_logic_1;
        else 
            statemt_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    statemt_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            statemt_ce1 <= ap_const_logic_1;
        else 
            statemt_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    statemt_d0 <= ret_q0;
    statemt_d1 <= ret_q1;

    statemt_we0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            statemt_we0 <= ap_const_logic_1;
        else 
            statemt_we0 <= ap_const_logic_0;
        end if; 
    end process;


    statemt_we1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            statemt_we1 <= ap_const_logic_1;
        else 
            statemt_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_3_fu_741_p4 <= x_7_fu_736_p2(31 downto 8);
    tmp_4_fu_461_p4 <= x_1_fu_456_p2(31 downto 8);
    tmp_7_fu_548_p4 <= x_3_fu_542_p2(31 downto 8);
    tmp_s_fu_648_p4 <= x_5_fu_642_p2(31 downto 8);
    trunc_ln374_fu_312_p1 <= j_0_reg_249(30 - 1 downto 0);
    trunc_ln383_fu_350_p1 <= add_ln383_fu_340_p2(10 - 1 downto 0);
    trunc_ln424_fu_817_p1 <= j_1_reg_260(30 - 1 downto 0);

    word_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, sext_ln383_2_fu_345_p1, sext_ln407_fu_404_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            word_address0 <= sext_ln407_fu_404_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            word_address0 <= sext_ln383_2_fu_345_p1(9 - 1 downto 0);
        else 
            word_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    word_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, sext_ln395_fu_360_p1, sext_ln419_fu_414_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            word_address1 <= sext_ln419_fu_414_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            word_address1 <= sext_ln395_fu_360_p1(9 - 1 downto 0);
        else 
            word_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    word_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            word_ce0 <= ap_const_logic_1;
        else 
            word_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    word_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            word_ce1 <= ap_const_logic_1;
        else 
            word_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    x_1_fu_456_p2 <= (x_reg_939 xor shl_ln378_fu_451_p2);
    x_3_fu_542_p2 <= (statemt_q0 xor shl_ln390_fu_536_p2);
    x_5_fu_642_p2 <= (statemt_q1 xor shl_ln402_fu_636_p2);
    x_7_fu_736_p2 <= (x_6_reg_926 xor shl_ln374_fu_433_p2);
    xor_ln376_fu_438_p2 <= (shl_ln374_fu_433_p2 xor ap_const_lv32_11B);
    xor_ln380_fu_485_p2 <= (x_1_fu_456_p2 xor ap_const_lv32_11B);
    xor_ln383_1_fu_505_p2 <= (select_ln379_fu_491_p3 xor select_ln375_fu_444_p3);
    xor_ln383_2_fu_516_p2 <= (xor_ln383_fu_499_p2 xor xor_ln383_3_fu_511_p2);
    xor_ln383_3_fu_511_p2 <= (xor_ln383_1_fu_505_p2 xor word_load_reg_977);
    xor_ln383_fu_499_p2 <= (statemt_q1 xor statemt_q0);
    xor_ln388_fu_523_p2 <= (shl_ln378_fu_451_p2 xor ap_const_lv32_11B);
    xor_ln392_fu_572_p2 <= (x_3_fu_542_p2 xor ap_const_lv32_11B);
    xor_ln395_1_fu_591_p2 <= (select_ln391_fu_578_p3 xor select_ln387_fu_529_p3);
    xor_ln395_2_fu_602_p2 <= (xor_ln395_fu_586_p2 xor xor_ln395_3_fu_597_p2);
    xor_ln395_3_fu_597_p2 <= (xor_ln395_1_fu_591_p2 xor word_load_1_reg_987);
    xor_ln395_fu_586_p2 <= (x_6_reg_926 xor statemt_q1);
    xor_ln400_fu_622_p2 <= (shl_ln390_fu_536_p2 xor ap_const_lv32_11B);
    xor_ln404_fu_672_p2 <= (x_5_fu_642_p2 xor ap_const_lv32_11B);
    xor_ln407_1_fu_690_p2 <= (select_ln403_fu_678_p3 xor select_ln399_fu_628_p3);
    xor_ln407_2_fu_702_p2 <= (xor_ln407_fu_686_p2 xor xor_ln407_3_fu_696_p2);
    xor_ln407_3_fu_696_p2 <= (xor_ln407_1_fu_690_p2 xor word_q0);
    xor_ln407_fu_686_p2 <= (x_reg_939 xor x_6_reg_926);
    xor_ln412_fu_722_p2 <= (shl_ln402_fu_636_p2 xor ap_const_lv32_11B);
    xor_ln416_fu_765_p2 <= (x_7_fu_736_p2 xor ap_const_lv32_11B);
    xor_ln419_1_fu_784_p2 <= (select_ln415_fu_771_p3 xor select_ln411_fu_728_p3);
    xor_ln419_2_fu_796_p2 <= (xor_ln419_fu_779_p2 xor xor_ln419_3_fu_790_p2);
    xor_ln419_3_fu_790_p2 <= (xor_ln419_1_fu_784_p2 xor word_q1);
    xor_ln419_fu_779_p2 <= (x_reg_939 xor statemt_q0);
    zext_ln372_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_249),32));
    zext_ln422_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_260),32));
end behav;
