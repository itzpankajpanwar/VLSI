-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AddRoundKey is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    statemt_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    statemt_ce0 : OUT STD_LOGIC;
    statemt_we0 : OUT STD_LOGIC;
    statemt_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    statemt_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    statemt_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    statemt_ce1 : OUT STD_LOGIC;
    statemt_we1 : OUT STD_LOGIC;
    statemt_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    statemt_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    n : IN STD_LOGIC_VECTOR (31 downto 0);
    word_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    word_ce0 : OUT STD_LOGIC;
    word_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    word_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    word_ce1 : OUT STD_LOGIC;
    word_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of AddRoundKey is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv10_78 : STD_LOGIC_VECTOR (9 downto 0) := "0001111000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_F0 : STD_LOGIC_VECTOR (9 downto 0) := "0011110000";
    constant ap_const_lv10_168 : STD_LOGIC_VECTOR (9 downto 0) := "0101101000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_137_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_149 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_143_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln536_fu_159_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln536_reg_274 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_175_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_282 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln536_fu_191_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln536_reg_287 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln534_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_210_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_reg_303 : STD_LOGIC_VECTOR (3 downto 0);
    signal statemt_addr_reg_309 : STD_LOGIC_VECTOR (4 downto 0);
    signal statemt_addr_157_reg_314 : STD_LOGIC_VECTOR (4 downto 0);
    signal statemt_addr_158_reg_329 : STD_LOGIC_VECTOR (4 downto 0);
    signal statemt_addr_159_reg_334 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_0_reg_126 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sext_ln536_fu_186_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln537_fu_201_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln536_fu_218_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln537_fu_229_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln538_fu_239_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln539_fu_249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln538_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln539_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln534_fu_165_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln536_fu_181_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln537_fu_195_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln536_1_fu_206_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln537_fu_223_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln538_fu_234_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln539_fu_244_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln538_fu_254_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln539_fu_264_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    j_0_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_0_reg_126 <= j_reg_282;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_0_reg_126 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                j_reg_282 <= j_fu_175_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_149 <= grp_fu_137_p2;
                reg_154 <= grp_fu_143_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    shl_ln536_reg_274(31 downto 2) <= shl_ln536_fu_159_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln534_fu_169_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    shl_ln_reg_303(3 downto 2) <= shl_ln_fu_210_p3(3 downto 2);
                    statemt_addr_157_reg_314(3 downto 2) <= zext_ln537_fu_229_p1(5 - 1 downto 0)(3 downto 2);
                    statemt_addr_reg_309(3 downto 2) <= zext_ln536_fu_218_p1(5 - 1 downto 0)(3 downto 2);
                trunc_ln536_reg_287 <= trunc_ln536_fu_191_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    statemt_addr_158_reg_329(3 downto 2) <= zext_ln538_fu_259_p1(5 - 1 downto 0)(3 downto 2);
                    statemt_addr_159_reg_334(3 downto 2) <= zext_ln539_fu_269_p1(5 - 1 downto 0)(3 downto 2);
            end if;
        end if;
    end process;
    shl_ln536_reg_274(1 downto 0) <= "00";
    shl_ln_reg_303(1 downto 0) <= "00";
    statemt_addr_reg_309(1 downto 0) <= "00";
    statemt_addr_reg_309(4) <= '0';
    statemt_addr_157_reg_314(1 downto 0) <= "01";
    statemt_addr_157_reg_314(4) <= '0';
    statemt_addr_158_reg_329(1 downto 0) <= "10";
    statemt_addr_158_reg_329(4) <= '0';
    statemt_addr_159_reg_334(1 downto 0) <= "11";
    statemt_addr_159_reg_334(4) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln534_fu_169_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln534_fu_169_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln536_fu_181_p2 <= std_logic_vector(unsigned(zext_ln534_fu_165_p1) + unsigned(shl_ln536_reg_274));
    add_ln537_fu_195_p2 <= std_logic_vector(unsigned(ap_const_lv10_78) + unsigned(trunc_ln536_fu_191_p1));
    add_ln538_fu_234_p2 <= std_logic_vector(unsigned(ap_const_lv10_F0) + unsigned(trunc_ln536_reg_287));
    add_ln539_fu_244_p2 <= std_logic_vector(unsigned(ap_const_lv10_168) + unsigned(trunc_ln536_reg_287));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln534_fu_169_p2)
    begin
        if ((((icmp_ln534_fu_169_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln534_fu_169_p2)
    begin
        if (((icmp_ln534_fu_169_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_137_p2 <= (word_q0 xor statemt_q0);
    grp_fu_143_p2 <= (word_q1 xor statemt_q1);
    icmp_ln534_fu_169_p2 <= "1" when (j_0_reg_126 = ap_const_lv3_4) else "0";
    j_fu_175_p2 <= std_logic_vector(unsigned(j_0_reg_126) + unsigned(ap_const_lv3_1));
    or_ln537_fu_223_p2 <= (shl_ln_fu_210_p3 or ap_const_lv4_1);
    or_ln538_fu_254_p2 <= (shl_ln_reg_303 or ap_const_lv4_2);
    or_ln539_fu_264_p2 <= (shl_ln_reg_303 or ap_const_lv4_3);
        sext_ln536_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln536_fu_181_p2),64));

        sext_ln537_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln537_fu_195_p2),64));

        sext_ln538_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln538_fu_234_p2),64));

        sext_ln539_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln539_fu_244_p2),64));

    shl_ln536_fu_159_p2 <= std_logic_vector(shift_left(unsigned(n),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln_fu_210_p3 <= (trunc_ln536_1_fu_206_p1 & ap_const_lv2_0);

    statemt_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2, statemt_addr_reg_309, statemt_addr_158_reg_329, ap_CS_fsm_state5, zext_ln536_fu_218_p1, zext_ln538_fu_259_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            statemt_address0 <= statemt_addr_158_reg_329;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            statemt_address0 <= statemt_addr_reg_309;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            statemt_address0 <= zext_ln538_fu_259_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            statemt_address0 <= zext_ln536_fu_218_p1(5 - 1 downto 0);
        else 
            statemt_address0 <= "XXXXX";
        end if; 
    end process;


    statemt_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2, statemt_addr_157_reg_314, statemt_addr_159_reg_334, ap_CS_fsm_state5, zext_ln537_fu_229_p1, zext_ln539_fu_269_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            statemt_address1 <= statemt_addr_159_reg_334;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            statemt_address1 <= statemt_addr_157_reg_314;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            statemt_address1 <= zext_ln539_fu_269_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            statemt_address1 <= zext_ln537_fu_229_p1(5 - 1 downto 0);
        else 
            statemt_address1 <= "XXXXX";
        end if; 
    end process;


    statemt_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            statemt_ce0 <= ap_const_logic_1;
        else 
            statemt_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    statemt_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            statemt_ce1 <= ap_const_logic_1;
        else 
            statemt_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    statemt_d0 <= reg_149;
    statemt_d1 <= reg_154;

    statemt_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            statemt_we0 <= ap_const_logic_1;
        else 
            statemt_we0 <= ap_const_logic_0;
        end if; 
    end process;


    statemt_we1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            statemt_we1 <= ap_const_logic_1;
        else 
            statemt_we1 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln536_1_fu_206_p1 <= j_0_reg_126(2 - 1 downto 0);
    trunc_ln536_fu_191_p1 <= add_ln536_fu_181_p2(10 - 1 downto 0);

    word_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, sext_ln536_fu_186_p1, sext_ln538_fu_239_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            word_address0 <= sext_ln538_fu_239_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            word_address0 <= sext_ln536_fu_186_p1(9 - 1 downto 0);
        else 
            word_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    word_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, sext_ln537_fu_201_p1, sext_ln539_fu_249_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            word_address1 <= sext_ln539_fu_249_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            word_address1 <= sext_ln537_fu_201_p1(9 - 1 downto 0);
        else 
            word_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    word_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            word_ce0 <= ap_const_logic_1;
        else 
            word_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    word_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            word_ce1 <= ap_const_logic_1;
        else 
            word_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln534_fu_165_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_126),32));
    zext_ln536_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_210_p3),64));
    zext_ln537_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln537_fu_223_p2),64));
    zext_ln538_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln538_fu_254_p2),64));
    zext_ln539_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln539_fu_264_p2),64));
end behav;
