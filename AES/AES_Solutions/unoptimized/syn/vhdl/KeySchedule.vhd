-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity KeySchedule is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    key_ce0 : OUT STD_LOGIC;
    key_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    word_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    word_ce0 : OUT STD_LOGIC;
    word_we0 : OUT STD_LOGIC;
    word_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    word_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    word_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    word_ce1 : OUT STD_LOGIC;
    word_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of KeySchedule is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv6_2C : STD_LOGIC_VECTOR (5 downto 0) := "101100";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv8_78 : STD_LOGIC_VECTOR (7 downto 0) := "01111000";
    constant ap_const_lv9_F0 : STD_LOGIC_VECTOR (8 downto 0) := "011110000";
    constant ap_const_lv9_168 : STD_LOGIC_VECTOR (8 downto 0) := "101101000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv6_3C : STD_LOGIC_VECTOR (5 downto 0) := "111100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal Sbox_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Sbox_ce0 : STD_LOGIC;
    signal Sbox_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Sbox_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Sbox_ce1 : STD_LOGIC;
    signal Sbox_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Sbox_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Sbox_ce2 : STD_LOGIC;
    signal Sbox_q2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Sbox_address3 : STD_LOGIC_VECTOR (7 downto 0);
    signal Sbox_ce3 : STD_LOGIC;
    signal Sbox_q3 : STD_LOGIC_VECTOR (7 downto 0);
    signal Rcon0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal Rcon0_ce0 : STD_LOGIC;
    signal Rcon0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_330 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal reg_335 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_346_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_1046 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal shl_ln_fu_356_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_reg_1051 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln132_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_374_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_1059 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln133_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln142_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln142_reg_1072 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln138_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal word_addr_5_reg_1082 : STD_LOGIC_VECTOR (8 downto 0);
    signal word_addr_6_reg_1087 : STD_LOGIC_VECTOR (8 downto 0);
    signal word_addr_7_reg_1093 : STD_LOGIC_VECTOR (8 downto 0);
    signal temp_0_1_reg_1098 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal temp_1_1_reg_1103 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_3_reg_1118 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_1124 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln248_fu_605_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln248_reg_1130 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln248_1_fu_695_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln248_1_reg_1135 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_reg_1140 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln248_5_fu_707_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln248_5_reg_1146 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln248_4_reg_1151 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_16_reg_1156 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln248_7_fu_727_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln248_7_reg_1162 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln248_6_reg_1167 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln160_fu_948_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln160_reg_1197 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln159_fu_952_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln159_reg_1202 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_4_fu_962_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_4_reg_1210 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln159_fu_956_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln160_2_fu_1004_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln160_2_reg_1220 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_1013_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1225 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_3_fu_1027_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_0_reg_227 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_0_reg_239 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal j_1_reg_251 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln248_1_fu_932_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_2_0_reg_263 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln248_fu_927_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_1_0_reg_273 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln144_2_fu_922_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_0_0_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln248_3_fu_937_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_3_reg_293 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_reg_303 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal zext_ln135_fu_385_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln135_fu_448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln144_5_fu_494_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln145_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln146_fu_516_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln144_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln248_fu_741_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln144_1_fu_761_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln248_1_fu_766_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln248_2_fu_838_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln248_3_fu_911_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln160_fu_999_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln160_1_fu_1033_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln160_fu_1037_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln135_fu_352_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln133_fu_364_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln135_fu_380_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_390_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_402_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln135_1_fu_398_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln135_2_fu_410_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln135_fu_414_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln135_1_fu_420_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_430_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln135_fu_424_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_440_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln138_fu_459_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln144_fu_469_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln144_4_fu_484_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln144_2_fu_488_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln144_3_fu_480_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln145_fu_499_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln146_fu_510_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln248_fu_525_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln248_1_fu_531_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_535_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln248_fu_521_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln248_2_fu_543_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_549_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln_fu_564_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln248_1_fu_574_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_fu_580_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln248_1_fu_590_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln248_1_cast_fu_597_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln248_fu_557_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln248_4_fu_615_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln248_3_fu_621_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_625_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln248_2_fu_611_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln248_6_fu_633_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_639_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln248_2_fu_654_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln248_3_fu_664_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_fu_670_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln248_3_fu_680_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln248_3_cast_fu_687_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln248_2_fu_647_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln248_8_fu_701_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln248_10_fu_721_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln144_1_fu_745_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln144_1_fu_755_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_13_fu_774_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln248_4_fu_770_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln248_9_fu_781_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_14_fu_787_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln248_5_fu_802_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_15_fu_807_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln248_5_fu_817_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln248_5_cast_fu_824_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln248_4_fu_795_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln248_2_fu_832_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_17_fu_847_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln248_6_fu_843_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln248_11_fu_854_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_18_fu_860_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln248_7_fu_875_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_19_fu_880_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln248_7_fu_890_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln248_7_cast_fu_897_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln248_6_fu_868_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln248_3_fu_905_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal temp_0_fu_916_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln160_fu_942_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_21_fu_976_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_20_fu_968_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln160_1_fu_984_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln160_fu_988_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln160_1_fu_994_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_1013_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);

    component aes_main_mux_42_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component KeySchedule_Sbox IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address3 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component KeySchedule_Rcon0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    Sbox_U : component KeySchedule_Sbox
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Sbox_address0,
        ce0 => Sbox_ce0,
        q0 => Sbox_q0,
        address1 => Sbox_address1,
        ce1 => Sbox_ce1,
        q1 => Sbox_q1,
        address2 => Sbox_address2,
        ce2 => Sbox_ce2,
        q2 => Sbox_q2,
        address3 => Sbox_address3,
        ce3 => Sbox_ce3,
        q3 => Sbox_q3);

    Rcon0_U : component KeySchedule_Rcon0
    generic map (
        DataWidth => 8,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Rcon0_address0,
        ce0 => Rcon0_ce0,
        q0 => Rcon0_q0);

    aes_main_mux_42_3bkb_U1 : component aes_main_mux_42_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => temp_0_0_reg_283,
        din1 => temp_1_0_reg_273,
        din2 => temp_2_0_reg_263,
        din3 => temp_3_reg_293,
        din4 => tmp_fu_1013_p5,
        dout => tmp_fu_1013_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln132_fu_340_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_239 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_0_reg_239 <= i_reg_1059;
            end if; 
        end if;
    end process;

    i_2_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_2_reg_303 <= i_4_reg_1210;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_2_reg_303 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln133_fu_368_p2 = ap_const_lv1_1))) then 
                j_0_reg_227 <= j_reg_1046;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_0_reg_227 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_1_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln132_fu_340_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_1_reg_251 <= ap_const_lv6_4;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln159_fu_956_p2 = ap_const_lv1_1))) then 
                j_1_reg_251 <= j_3_fu_1027_p2;
            end if; 
        end if;
    end process;

    reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                reg_330 <= word_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_330 <= word_q0;
            end if; 
        end if;
    end process;

    reg_335_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                reg_335 <= word_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_335 <= word_q1;
            end if; 
        end if;
    end process;

    temp_0_0_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                temp_0_0_reg_283 <= temp_0_1_reg_1098;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln142_reg_1072 = ap_const_lv1_1))) then 
                temp_0_0_reg_283 <= zext_ln144_2_fu_922_p1;
            end if; 
        end if;
    end process;

    temp_1_0_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                temp_1_0_reg_273 <= temp_1_1_reg_1103;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln142_reg_1072 = ap_const_lv1_1))) then 
                temp_1_0_reg_273 <= zext_ln248_fu_927_p1;
            end if; 
        end if;
    end process;

    temp_2_0_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                temp_2_0_reg_263 <= word_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln142_reg_1072 = ap_const_lv1_1))) then 
                temp_2_0_reg_263 <= zext_ln248_1_fu_932_p1;
            end if; 
        end if;
    end process;

    temp_3_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                temp_3_reg_293 <= word_q0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln142_reg_1072 = ap_const_lv1_1))) then 
                temp_3_reg_293 <= zext_ln248_3_fu_937_p1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln159_fu_956_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                add_ln160_2_reg_1220 <= add_ln160_2_fu_1004_p2;
                tmp_reg_1225 <= tmp_fu_1013_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln248_1_reg_1135 <= add_ln248_1_fu_695_p2;
                add_ln248_reg_1130 <= add_ln248_fu_605_p2;
                tmp_12_reg_1140 <= word_q1(31 downto 31);
                tmp_16_reg_1156 <= word_q0(31 downto 31);
                trunc_ln248_5_reg_1146 <= trunc_ln248_5_fu_707_p1;
                trunc_ln248_7_reg_1162 <= trunc_ln248_7_fu_727_p1;
                zext_ln248_4_reg_1151 <= sub_ln248_8_fu_701_p2(9 downto 4);
                zext_ln248_6_reg_1167 <= sub_ln248_10_fu_721_p2(9 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                i_4_reg_1210 <= i_4_fu_962_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_reg_1059 <= i_fu_374_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln138_fu_453_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                icmp_ln142_reg_1072 <= icmp_ln142_fu_463_p2;
                word_addr_5_reg_1082 <= zext_ln145_fu_505_p1(9 - 1 downto 0);
                word_addr_6_reg_1087 <= zext_ln146_fu_516_p1(9 - 1 downto 0);
                    word_addr_7_reg_1093(5 downto 0) <= zext_ln144_fu_475_p1(9 - 1 downto 0)(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                j_reg_1046 <= j_fu_346_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln132_fu_340_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    shl_ln_reg_1051(3 downto 2) <= shl_ln_fu_356_p3(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                temp_0_1_reg_1098 <= word_q0;
                temp_1_1_reg_1103 <= word_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_3_reg_1118 <= word_q0(31 downto 31);
                tmp_8_reg_1124 <= word_q1(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                    zext_ln159_reg_1202(5 downto 0) <= zext_ln159_fu_952_p1(5 downto 0);
                    zext_ln160_reg_1197(5 downto 0) <= zext_ln160_fu_948_p1(5 downto 0);
            end if;
        end if;
    end process;
    shl_ln_reg_1051(1 downto 0) <= "00";
    word_addr_7_reg_1093(8 downto 6) <= "000";
    zext_ln160_reg_1197(9 downto 6) <= "0000";
    zext_ln159_reg_1202(9 downto 6) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln132_fu_340_p2, ap_CS_fsm_state3, icmp_ln133_fu_368_p2, icmp_ln142_fu_463_p2, ap_CS_fsm_state5, icmp_ln138_fu_453_p2, ap_CS_fsm_state12, icmp_ln159_fu_956_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln132_fu_340_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln133_fu_368_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln138_fu_453_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((icmp_ln138_fu_453_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln142_fu_463_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln159_fu_956_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    Rcon0_address0 <= zext_ln144_1_fu_761_p1(5 - 1 downto 0);

    Rcon0_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Rcon0_ce0 <= ap_const_logic_1;
        else 
            Rcon0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Sbox_address0 <= sext_ln248_fu_741_p1(8 - 1 downto 0);
    Sbox_address1 <= sext_ln248_1_fu_766_p1(8 - 1 downto 0);
    Sbox_address2 <= sext_ln248_2_fu_838_p1(8 - 1 downto 0);
    Sbox_address3 <= sext_ln248_3_fu_911_p1(8 - 1 downto 0);

    Sbox_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Sbox_ce0 <= ap_const_logic_1;
        else 
            Sbox_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Sbox_ce1_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Sbox_ce1 <= ap_const_logic_1;
        else 
            Sbox_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Sbox_ce2_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Sbox_ce2 <= ap_const_logic_1;
        else 
            Sbox_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    Sbox_ce3_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Sbox_ce3 <= ap_const_logic_1;
        else 
            Sbox_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln135_fu_380_p2 <= std_logic_vector(unsigned(shl_ln_reg_1051) + unsigned(zext_ln133_fu_364_p1));
    add_ln144_1_fu_755_p2 <= std_logic_vector(signed(ap_const_lv4_F) + signed(trunc_ln144_1_fu_745_p4));
    add_ln144_2_fu_488_p2 <= std_logic_vector(unsigned(ap_const_lv8_78) + unsigned(zext_ln144_4_fu_484_p1));
    add_ln144_fu_469_p2 <= std_logic_vector(signed(ap_const_lv6_3F) + signed(j_1_reg_251));
    add_ln145_fu_499_p2 <= std_logic_vector(unsigned(ap_const_lv9_F0) + unsigned(zext_ln144_3_fu_480_p1));
    add_ln146_fu_510_p2 <= std_logic_vector(signed(ap_const_lv9_168) + signed(zext_ln144_3_fu_480_p1));
    add_ln160_1_fu_994_p2 <= std_logic_vector(unsigned(zext_ln160_reg_1197) + unsigned(sub_ln160_fu_988_p2));
    add_ln160_2_fu_1004_p2 <= std_logic_vector(unsigned(zext_ln159_reg_1202) + unsigned(sub_ln160_fu_988_p2));
    add_ln160_fu_942_p2 <= std_logic_vector(unsigned(j_1_reg_251) + unsigned(ap_const_lv6_3C));
    add_ln248_1_fu_695_p2 <= std_logic_vector(unsigned(sext_ln248_3_cast_fu_687_p3) + unsigned(select_ln248_2_fu_647_p3));
    add_ln248_2_fu_832_p2 <= std_logic_vector(unsigned(sext_ln248_5_cast_fu_824_p3) + unsigned(select_ln248_4_fu_795_p3));
    add_ln248_3_fu_905_p2 <= std_logic_vector(unsigned(sext_ln248_7_cast_fu_897_p3) + unsigned(select_ln248_6_fu_868_p3));
    add_ln248_fu_605_p2 <= std_logic_vector(unsigned(sext_ln248_1_cast_fu_597_p3) + unsigned(select_ln248_fu_557_p3));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, icmp_ln138_fu_453_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln138_fu_453_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, icmp_ln138_fu_453_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln138_fu_453_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_4_fu_962_p2 <= std_logic_vector(unsigned(i_2_reg_303) + unsigned(ap_const_lv3_1));
    i_fu_374_p2 <= std_logic_vector(unsigned(i_0_reg_239) + unsigned(ap_const_lv3_1));
    icmp_ln132_fu_340_p2 <= "1" when (j_0_reg_227 = ap_const_lv3_4) else "0";
    icmp_ln133_fu_368_p2 <= "1" when (i_0_reg_239 = ap_const_lv3_4) else "0";
    icmp_ln138_fu_453_p2 <= "1" when (j_1_reg_251 = ap_const_lv6_2C) else "0";
    icmp_ln142_fu_463_p2 <= "1" when (trunc_ln138_fu_459_p1 = ap_const_lv2_0) else "0";
    icmp_ln159_fu_956_p2 <= "1" when (i_2_reg_303 = ap_const_lv3_4) else "0";
    j_3_fu_1027_p2 <= std_logic_vector(unsigned(j_1_reg_251) + unsigned(ap_const_lv6_1));
    j_fu_346_p2 <= std_logic_vector(unsigned(j_0_reg_227) + unsigned(ap_const_lv3_1));
    key_address0 <= zext_ln135_fu_385_p1(5 - 1 downto 0);

    key_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            key_ce0 <= ap_const_logic_1;
        else 
            key_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln135_fu_424_p2 <= (trunc_ln135_1_fu_420_p1 or j_0_reg_227);
    select_ln248_1_fu_590_p3 <= 
        sub_ln248_1_fu_574_p2 when (tmp_3_reg_1118(0) = '1') else 
        tmp_7_fu_580_p4;
    select_ln248_2_fu_647_p3 <= 
        sub_ln248_6_fu_633_p2 when (tmp_8_reg_1124(0) = '1') else 
        tmp_10_fu_639_p3;
    select_ln248_3_fu_680_p3 <= 
        sub_ln248_3_fu_664_p2 when (tmp_8_reg_1124(0) = '1') else 
        tmp_11_fu_670_p4;
    select_ln248_4_fu_795_p3 <= 
        sub_ln248_9_fu_781_p2 when (tmp_12_reg_1140(0) = '1') else 
        tmp_14_fu_787_p3;
    select_ln248_5_fu_817_p3 <= 
        sub_ln248_5_fu_802_p2 when (tmp_12_reg_1140(0) = '1') else 
        tmp_15_fu_807_p4;
    select_ln248_6_fu_868_p3 <= 
        sub_ln248_11_fu_854_p2 when (tmp_16_reg_1156(0) = '1') else 
        tmp_18_fu_860_p3;
    select_ln248_7_fu_890_p3 <= 
        sub_ln248_7_fu_875_p2 when (tmp_16_reg_1156(0) = '1') else 
        tmp_19_fu_880_p4;
    select_ln248_fu_557_p3 <= 
        sub_ln248_2_fu_543_p2 when (tmp_3_reg_1118(0) = '1') else 
        tmp_6_fu_549_p3;
        sext_ln135_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_440_p3),64));

        sext_ln160_1_fu_1033_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln160_2_reg_1220),64));

        sext_ln160_fu_999_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln160_1_fu_994_p2),64));

    sext_ln248_1_cast_fu_597_p3 <= (select_ln248_1_fu_590_p3 & ap_const_lv4_0);
        sext_ln248_1_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln248_1_reg_1135),64));

        sext_ln248_2_fu_838_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln248_2_fu_832_p2),64));

    sext_ln248_3_cast_fu_687_p3 <= (select_ln248_3_fu_680_p3 & ap_const_lv4_0);
        sext_ln248_3_fu_911_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln248_3_fu_905_p2),64));

    sext_ln248_5_cast_fu_824_p3 <= (select_ln248_5_fu_817_p3 & ap_const_lv4_0);
    sext_ln248_7_cast_fu_897_p3 <= (select_ln248_7_fu_890_p3 & ap_const_lv4_0);
        sext_ln248_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln248_reg_1130),64));

    shl_ln_fu_356_p3 <= (trunc_ln135_fu_352_p1 & ap_const_lv2_0);
    sub_ln135_fu_414_p2 <= std_logic_vector(unsigned(zext_ln135_1_fu_398_p1) - unsigned(zext_ln135_2_fu_410_p1));
    sub_ln160_fu_988_p2 <= std_logic_vector(unsigned(tmp_20_fu_968_p3) - unsigned(zext_ln160_1_fu_984_p1));
    sub_ln248_10_fu_721_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(word_q0));
    sub_ln248_11_fu_854_p2 <= std_logic_vector(unsigned(ap_const_lv10_0) - unsigned(tmp_17_fu_847_p3));
    sub_ln248_1_fu_574_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(zext_ln_fu_564_p4));
    sub_ln248_2_fu_543_p2 <= std_logic_vector(unsigned(ap_const_lv10_0) - unsigned(tmp_5_fu_535_p3));
    sub_ln248_3_fu_664_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(zext_ln248_2_fu_654_p4));
    sub_ln248_4_fu_615_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(reg_335));
    sub_ln248_5_fu_802_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(zext_ln248_4_reg_1151));
    sub_ln248_6_fu_633_p2 <= std_logic_vector(unsigned(ap_const_lv10_0) - unsigned(tmp_9_fu_625_p3));
    sub_ln248_7_fu_875_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(zext_ln248_6_reg_1167));
    sub_ln248_8_fu_701_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(word_q1));
    sub_ln248_9_fu_781_p2 <= std_logic_vector(unsigned(ap_const_lv10_0) - unsigned(tmp_13_fu_774_p3));
    sub_ln248_fu_525_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(reg_330));
    temp_0_fu_916_p2 <= (Sbox_q0 xor Rcon0_q0);
    tmp_10_fu_639_p3 <= (ap_const_lv6_0 & trunc_ln248_2_fu_611_p1);
    tmp_11_fu_670_p4 <= reg_335(9 downto 4);
    tmp_13_fu_774_p3 <= (ap_const_lv6_0 & trunc_ln248_5_reg_1146);
    tmp_14_fu_787_p3 <= (ap_const_lv6_0 & trunc_ln248_4_fu_770_p1);
    tmp_15_fu_807_p4 <= reg_330(9 downto 4);
    tmp_17_fu_847_p3 <= (ap_const_lv6_0 & trunc_ln248_7_reg_1162);
    tmp_18_fu_860_p3 <= (ap_const_lv6_0 & trunc_ln248_6_fu_843_p1);
    tmp_19_fu_880_p4 <= reg_335(9 downto 4);
    tmp_1_fu_430_p4 <= sub_ln135_fu_414_p2(10 downto 3);
    tmp_20_fu_968_p3 <= (i_2_reg_303 & ap_const_lv7_0);
    tmp_21_fu_976_p3 <= (i_2_reg_303 & ap_const_lv3_0);
    tmp_2_fu_440_p3 <= (tmp_1_fu_430_p4 & or_ln135_fu_424_p2);
    tmp_4_fu_402_p3 <= (i_0_reg_239 & ap_const_lv3_0);
    tmp_5_fu_535_p3 <= (ap_const_lv6_0 & trunc_ln248_1_fu_531_p1);
    tmp_6_fu_549_p3 <= (ap_const_lv6_0 & trunc_ln248_fu_521_p1);
    tmp_7_fu_580_p4 <= reg_330(9 downto 4);
    tmp_9_fu_625_p3 <= (ap_const_lv6_0 & trunc_ln248_3_fu_621_p1);
    tmp_fu_1013_p5 <= i_2_reg_303(2 - 1 downto 0);
    tmp_s_fu_390_p3 <= (i_0_reg_239 & ap_const_lv7_0);
    trunc_ln135_1_fu_420_p1 <= sub_ln135_fu_414_p2(3 - 1 downto 0);
    trunc_ln135_fu_352_p1 <= j_0_reg_227(2 - 1 downto 0);
    trunc_ln138_fu_459_p1 <= j_1_reg_251(2 - 1 downto 0);
    trunc_ln144_1_fu_745_p4 <= j_1_reg_251(5 downto 2);
    trunc_ln248_1_fu_531_p1 <= sub_ln248_fu_525_p2(4 - 1 downto 0);
    trunc_ln248_2_fu_611_p1 <= reg_335(4 - 1 downto 0);
    trunc_ln248_3_fu_621_p1 <= sub_ln248_4_fu_615_p2(4 - 1 downto 0);
    trunc_ln248_4_fu_770_p1 <= reg_330(4 - 1 downto 0);
    trunc_ln248_5_fu_707_p1 <= sub_ln248_8_fu_701_p2(4 - 1 downto 0);
    trunc_ln248_6_fu_843_p1 <= reg_335(4 - 1 downto 0);
    trunc_ln248_7_fu_727_p1 <= sub_ln248_10_fu_721_p2(4 - 1 downto 0);
    trunc_ln248_fu_521_p1 <= reg_330(4 - 1 downto 0);

    word_address0_assign_proc : process(ap_CS_fsm_state8, icmp_ln142_fu_463_p2, ap_CS_fsm_state5, icmp_ln138_fu_453_p2, word_addr_6_reg_1087, word_addr_7_reg_1093, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state13, sext_ln135_fu_448_p1, zext_ln144_5_fu_494_p1, zext_ln144_fu_475_p1, sext_ln160_1_fu_1033_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            word_address0 <= sext_ln160_1_fu_1033_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            word_address0 <= word_addr_7_reg_1093;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            word_address0 <= word_addr_6_reg_1087;
        elsif (((icmp_ln138_fu_453_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln142_fu_463_p2 = ap_const_lv1_1))) then 
            word_address0 <= zext_ln144_5_fu_494_p1(9 - 1 downto 0);
        elsif (((icmp_ln138_fu_453_p2 = ap_const_lv1_0) and (icmp_ln142_fu_463_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            word_address0 <= zext_ln144_fu_475_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            word_address0 <= sext_ln135_fu_448_p1(9 - 1 downto 0);
        else 
            word_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    word_address1_assign_proc : process(ap_CS_fsm_state8, icmp_ln142_fu_463_p2, ap_CS_fsm_state5, icmp_ln138_fu_453_p2, word_addr_5_reg_1082, word_addr_6_reg_1087, ap_CS_fsm_state6, ap_CS_fsm_state12, zext_ln144_5_fu_494_p1, zext_ln145_fu_505_p1, sext_ln160_fu_999_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            word_address1 <= sext_ln160_fu_999_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            word_address1 <= word_addr_6_reg_1087;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            word_address1 <= word_addr_5_reg_1082;
        elsif (((icmp_ln138_fu_453_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln142_fu_463_p2 = ap_const_lv1_1))) then 
            word_address1 <= zext_ln145_fu_505_p1(9 - 1 downto 0);
        elsif (((icmp_ln138_fu_453_p2 = ap_const_lv1_0) and (icmp_ln142_fu_463_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            word_address1 <= zext_ln144_5_fu_494_p1(9 - 1 downto 0);
        else 
            word_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    word_ce0_assign_proc : process(ap_CS_fsm_state8, icmp_ln142_fu_463_p2, ap_CS_fsm_state5, icmp_ln138_fu_453_p2, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln138_fu_453_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln142_fu_463_p2 = ap_const_lv1_1)) or ((icmp_ln138_fu_453_p2 = ap_const_lv1_0) and (icmp_ln142_fu_463_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            word_ce0 <= ap_const_logic_1;
        else 
            word_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    word_ce1_assign_proc : process(ap_CS_fsm_state8, icmp_ln142_fu_463_p2, ap_CS_fsm_state5, icmp_ln138_fu_453_p2, ap_CS_fsm_state6, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln138_fu_453_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln142_fu_463_p2 = ap_const_lv1_1)) or ((icmp_ln138_fu_453_p2 = ap_const_lv1_0) and (icmp_ln142_fu_463_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            word_ce1 <= ap_const_logic_1;
        else 
            word_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    word_d0_assign_proc : process(key_q0, ap_CS_fsm_state4, ap_CS_fsm_state13, xor_ln160_fu_1037_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            word_d0 <= xor_ln160_fu_1037_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            word_d0 <= key_q0;
        else 
            word_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    word_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            word_we0 <= ap_const_logic_1;
        else 
            word_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln160_fu_1037_p2 <= (word_q1 xor tmp_reg_1225);
    zext_ln133_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_239),4));
    zext_ln135_1_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_390_p3),11));
    zext_ln135_2_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_402_p3),11));
    zext_ln135_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln135_fu_380_p2),64));
    zext_ln144_1_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln144_1_fu_755_p2),64));
    zext_ln144_2_fu_922_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_0_fu_916_p2),32));
    zext_ln144_3_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln144_fu_469_p2),9));
    zext_ln144_4_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln144_fu_469_p2),8));
    zext_ln144_5_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln144_2_fu_488_p2),64));
    zext_ln144_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln144_fu_469_p2),64));
    zext_ln145_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln145_fu_499_p2),64));
    zext_ln146_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln146_fu_510_p2),64));
    zext_ln159_fu_952_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_251),10));
    zext_ln160_1_fu_984_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_976_p3),10));
    zext_ln160_fu_948_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln160_fu_942_p2),10));
    zext_ln248_1_fu_932_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Sbox_q2),32));
    zext_ln248_2_fu_654_p4 <= sub_ln248_4_fu_615_p2(9 downto 4);
    zext_ln248_3_fu_937_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Sbox_q3),32));
    zext_ln248_fu_927_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Sbox_q1),32));
    zext_ln_fu_564_p4 <= sub_ln248_fu_525_p2(9 downto 4);
end behav;
