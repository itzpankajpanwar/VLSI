// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AddRoundKey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        statemt_address0,
        statemt_ce0,
        statemt_we0,
        statemt_d0,
        statemt_q0,
        statemt_address1,
        statemt_ce1,
        statemt_we1,
        statemt_d1,
        statemt_q1,
        n,
        word_address0,
        word_ce0,
        word_q0,
        word_address1,
        word_ce1,
        word_q1
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] statemt_address0;
output   statemt_ce0;
output   statemt_we0;
output  [31:0] statemt_d0;
input  [31:0] statemt_q0;
output  [4:0] statemt_address1;
output   statemt_ce1;
output   statemt_we1;
output  [31:0] statemt_d1;
input  [31:0] statemt_q1;
input  [31:0] n;
output  [8:0] word_address0;
output   word_ce0;
input  [31:0] word_q0;
output  [8:0] word_address1;
output   word_ce1;
input  [31:0] word_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] statemt_address0;
reg statemt_ce0;
reg statemt_we0;
reg[4:0] statemt_address1;
reg statemt_ce1;
reg statemt_we1;
reg[8:0] word_address0;
reg word_ce0;
reg[8:0] word_address1;
reg word_ce1;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_137_p2;
reg   [31:0] reg_149;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire   [31:0] grp_fu_143_p2;
reg   [31:0] reg_154;
wire   [31:0] shl_ln536_fu_159_p2;
reg   [31:0] shl_ln536_reg_274;
wire   [2:0] j_fu_175_p2;
reg   [2:0] j_reg_282;
wire    ap_CS_fsm_state2;
wire   [9:0] trunc_ln536_fu_191_p1;
reg   [9:0] trunc_ln536_reg_287;
wire   [0:0] icmp_ln534_fu_169_p2;
wire   [3:0] shl_ln_fu_210_p3;
reg   [3:0] shl_ln_reg_303;
reg   [4:0] statemt_addr_reg_309;
reg   [4:0] statemt_addr_157_reg_314;
reg   [4:0] statemt_addr_158_reg_329;
reg   [4:0] statemt_addr_159_reg_334;
reg   [2:0] j_0_reg_126;
wire    ap_CS_fsm_state5;
wire  signed [63:0] sext_ln536_fu_186_p1;
wire  signed [63:0] sext_ln537_fu_201_p1;
wire   [63:0] zext_ln536_fu_218_p1;
wire   [63:0] zext_ln537_fu_229_p1;
wire  signed [63:0] sext_ln538_fu_239_p1;
wire  signed [63:0] sext_ln539_fu_249_p1;
wire   [63:0] zext_ln538_fu_259_p1;
wire   [63:0] zext_ln539_fu_269_p1;
wire   [31:0] zext_ln534_fu_165_p1;
wire  signed [31:0] add_ln536_fu_181_p2;
wire   [9:0] add_ln537_fu_195_p2;
wire   [1:0] trunc_ln536_1_fu_206_p1;
wire   [3:0] or_ln537_fu_223_p2;
wire   [9:0] add_ln538_fu_234_p2;
wire   [9:0] add_ln539_fu_244_p2;
wire   [3:0] or_ln538_fu_254_p2;
wire   [3:0] or_ln539_fu_264_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_0_reg_126 <= j_reg_282;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_0_reg_126 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        j_reg_282 <= j_fu_175_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_149 <= grp_fu_137_p2;
        reg_154 <= grp_fu_143_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        shl_ln536_reg_274[31 : 2] <= shl_ln536_fu_159_p2[31 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln534_fu_169_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shl_ln_reg_303[3 : 2] <= shl_ln_fu_210_p3[3 : 2];
        statemt_addr_157_reg_314[3 : 2] <= zext_ln537_fu_229_p1[3 : 2];
        statemt_addr_reg_309[3 : 2] <= zext_ln536_fu_218_p1[3 : 2];
        trunc_ln536_reg_287 <= trunc_ln536_fu_191_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        statemt_addr_158_reg_329[3 : 2] <= zext_ln538_fu_259_p1[3 : 2];
        statemt_addr_159_reg_334[3 : 2] <= zext_ln539_fu_269_p1[3 : 2];
    end
end

always @ (*) begin
    if ((((icmp_ln534_fu_169_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln534_fu_169_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        statemt_address0 = statemt_addr_158_reg_329;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        statemt_address0 = statemt_addr_reg_309;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        statemt_address0 = zext_ln538_fu_259_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        statemt_address0 = zext_ln536_fu_218_p1;
    end else begin
        statemt_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        statemt_address1 = statemt_addr_159_reg_334;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        statemt_address1 = statemt_addr_157_reg_314;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        statemt_address1 = zext_ln539_fu_269_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        statemt_address1 = zext_ln537_fu_229_p1;
    end else begin
        statemt_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5))) begin
        statemt_ce0 = 1'b1;
    end else begin
        statemt_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5))) begin
        statemt_ce1 = 1'b1;
    end else begin
        statemt_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        statemt_we0 = 1'b1;
    end else begin
        statemt_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        statemt_we1 = 1'b1;
    end else begin
        statemt_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        word_address0 = sext_ln538_fu_239_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        word_address0 = sext_ln536_fu_186_p1;
    end else begin
        word_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        word_address1 = sext_ln539_fu_249_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        word_address1 = sext_ln537_fu_201_p1;
    end else begin
        word_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        word_ce0 = 1'b1;
    end else begin
        word_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        word_ce1 = 1'b1;
    end else begin
        word_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln534_fu_169_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln536_fu_181_p2 = (zext_ln534_fu_165_p1 + shl_ln536_reg_274);

assign add_ln537_fu_195_p2 = (10'd120 + trunc_ln536_fu_191_p1);

assign add_ln538_fu_234_p2 = (10'd240 + trunc_ln536_reg_287);

assign add_ln539_fu_244_p2 = (10'd360 + trunc_ln536_reg_287);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign grp_fu_137_p2 = (word_q0 ^ statemt_q0);

assign grp_fu_143_p2 = (word_q1 ^ statemt_q1);

assign icmp_ln534_fu_169_p2 = ((j_0_reg_126 == 3'd4) ? 1'b1 : 1'b0);

assign j_fu_175_p2 = (j_0_reg_126 + 3'd1);

assign or_ln537_fu_223_p2 = (shl_ln_fu_210_p3 | 4'd1);

assign or_ln538_fu_254_p2 = (shl_ln_reg_303 | 4'd2);

assign or_ln539_fu_264_p2 = (shl_ln_reg_303 | 4'd3);

assign sext_ln536_fu_186_p1 = add_ln536_fu_181_p2;

assign sext_ln537_fu_201_p1 = $signed(add_ln537_fu_195_p2);

assign sext_ln538_fu_239_p1 = $signed(add_ln538_fu_234_p2);

assign sext_ln539_fu_249_p1 = $signed(add_ln539_fu_244_p2);

assign shl_ln536_fu_159_p2 = n << 32'd2;

assign shl_ln_fu_210_p3 = {{trunc_ln536_1_fu_206_p1}, {2'd0}};

assign statemt_d0 = reg_149;

assign statemt_d1 = reg_154;

assign trunc_ln536_1_fu_206_p1 = j_0_reg_126[1:0];

assign trunc_ln536_fu_191_p1 = add_ln536_fu_181_p2[9:0];

assign zext_ln534_fu_165_p1 = j_0_reg_126;

assign zext_ln536_fu_218_p1 = shl_ln_fu_210_p3;

assign zext_ln537_fu_229_p1 = or_ln537_fu_223_p2;

assign zext_ln538_fu_259_p1 = or_ln538_fu_254_p2;

assign zext_ln539_fu_269_p1 = or_ln539_fu_264_p2;

always @ (posedge ap_clk) begin
    shl_ln536_reg_274[1:0] <= 2'b00;
    shl_ln_reg_303[1:0] <= 2'b00;
    statemt_addr_reg_309[1:0] <= 2'b00;
    statemt_addr_reg_309[4] <= 1'b0;
    statemt_addr_157_reg_314[1:0] <= 2'b01;
    statemt_addr_157_reg_314[4] <= 1'b0;
    statemt_addr_158_reg_329[1:0] <= 2'b10;
    statemt_addr_158_reg_329[4] <= 1'b0;
    statemt_addr_159_reg_334[1:0] <= 2'b11;
    statemt_addr_159_reg_334[4] <= 1'b0;
end

endmodule //AddRoundKey
