// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "aes_main.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic aes_main::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic aes_main::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<36> aes_main::ap_ST_fsm_state1 = "1";
const sc_lv<36> aes_main::ap_ST_fsm_state2 = "10";
const sc_lv<36> aes_main::ap_ST_fsm_state3 = "100";
const sc_lv<36> aes_main::ap_ST_fsm_state4 = "1000";
const sc_lv<36> aes_main::ap_ST_fsm_state5 = "10000";
const sc_lv<36> aes_main::ap_ST_fsm_state6 = "100000";
const sc_lv<36> aes_main::ap_ST_fsm_state7 = "1000000";
const sc_lv<36> aes_main::ap_ST_fsm_state8 = "10000000";
const sc_lv<36> aes_main::ap_ST_fsm_state9 = "100000000";
const sc_lv<36> aes_main::ap_ST_fsm_state10 = "1000000000";
const sc_lv<36> aes_main::ap_ST_fsm_state11 = "10000000000";
const sc_lv<36> aes_main::ap_ST_fsm_state12 = "100000000000";
const sc_lv<36> aes_main::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<36> aes_main::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<36> aes_main::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<36> aes_main::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<36> aes_main::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<36> aes_main::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<36> aes_main::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<36> aes_main::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<36> aes_main::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<36> aes_main::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<36> aes_main::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<36> aes_main::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<36> aes_main::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<36> aes_main::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<36> aes_main::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<36> aes_main::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<36> aes_main::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<36> aes_main::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<36> aes_main::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<36> aes_main::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<36> aes_main::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<36> aes_main::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<36> aes_main::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<36> aes_main::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<32> aes_main::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<6> aes_main::ap_const_lv6_0 = "000000";
const sc_lv<32> aes_main::ap_const_lv32_C = "1100";
const sc_lv<1> aes_main::ap_const_lv1_0 = "0";
const sc_lv<1> aes_main::ap_const_lv1_1 = "1";
const sc_lv<32> aes_main::ap_const_lv32_E = "1110";
const sc_lv<32> aes_main::ap_const_lv32_19 = "11001";
const sc_lv<32> aes_main::ap_const_lv32_1C = "11100";
const sc_lv<32> aes_main::ap_const_lv32_1E = "11110";
const sc_lv<32> aes_main::ap_const_lv32_13 = "10011";
const sc_lv<32> aes_main::ap_const_lv32_14 = "10100";
const sc_lv<32> aes_main::ap_const_lv32_1A = "11010";
const sc_lv<32> aes_main::ap_const_lv32_1B = "11011";
const sc_lv<32> aes_main::ap_const_lv32_21 = "100001";
const sc_lv<32> aes_main::ap_const_lv32_22 = "100010";
const sc_lv<32> aes_main::ap_const_lv32_1 = "1";
const sc_lv<32> aes_main::ap_const_lv32_B = "1011";
const sc_lv<32> aes_main::ap_const_lv32_F = "1111";
const sc_lv<32> aes_main::ap_const_lv32_15 = "10101";
const sc_lv<5> aes_main::ap_const_lv5_0 = "00000";
const sc_lv<32> aes_main::ap_const_lv32_12 = "10010";
const sc_lv<32> aes_main::ap_const_lv32_1F = "11111";
const sc_lv<32> aes_main::ap_const_lv32_23 = "100011";
const sc_lv<32> aes_main::ap_const_lv32_20 = "100000";
const sc_lv<32> aes_main::ap_const_lv32_1D = "11101";
const sc_lv<32> aes_main::ap_const_lv32_D = "1101";
const sc_lv<32> aes_main::ap_const_lv32_10 = "10000";
const sc_lv<32> aes_main::ap_const_lv32_8 = "1000";
const sc_lv<32> aes_main::ap_const_lv32_9 = "1001";
const sc_lv<32> aes_main::ap_const_lv32_16 = "10110";
const sc_lv<32> aes_main::ap_const_lv32_A = "1010";
const sc_lv<32> aes_main::ap_const_lv32_11 = "10001";
const sc_lv<32> aes_main::ap_const_lv32_17 = "10111";
const sc_lv<32> aes_main::ap_const_lv32_18 = "11000";
const sc_lv<6> aes_main::ap_const_lv6_A = "1010";
const sc_lv<32> aes_main::ap_const_lv32_4 = "100";
const sc_lv<32> aes_main::ap_const_lv32_2B = "101011";
const sc_lv<32> aes_main::ap_const_lv32_7E = "1111110";
const sc_lv<5> aes_main::ap_const_lv5_1 = "1";
const sc_lv<5> aes_main::ap_const_lv5_2 = "10";
const sc_lv<5> aes_main::ap_const_lv5_3 = "11";
const sc_lv<32> aes_main::ap_const_lv32_2 = "10";
const sc_lv<32> aes_main::ap_const_lv32_28 = "101000";
const sc_lv<5> aes_main::ap_const_lv5_4 = "100";
const sc_lv<32> aes_main::ap_const_lv32_AE = "10101110";
const sc_lv<5> aes_main::ap_const_lv5_5 = "101";
const sc_lv<32> aes_main::ap_const_lv32_3 = "11";
const sc_lv<32> aes_main::ap_const_lv32_D2 = "11010010";
const sc_lv<5> aes_main::ap_const_lv5_6 = "110";
const sc_lv<32> aes_main::ap_const_lv32_A6 = "10100110";
const sc_lv<5> aes_main::ap_const_lv5_7 = "111";
const sc_lv<32> aes_main::ap_const_lv32_AB = "10101011";
const sc_lv<5> aes_main::ap_const_lv5_8 = "1000";
const sc_lv<32> aes_main::ap_const_lv32_F7 = "11110111";
const sc_lv<5> aes_main::ap_const_lv5_9 = "1001";
const sc_lv<32> aes_main::ap_const_lv32_5 = "101";
const sc_lv<5> aes_main::ap_const_lv5_A = "1010";
const sc_lv<32> aes_main::ap_const_lv32_88 = "10001000";
const sc_lv<5> aes_main::ap_const_lv5_B = "1011";
const sc_lv<32> aes_main::ap_const_lv32_6 = "110";
const sc_lv<5> aes_main::ap_const_lv5_C = "1100";
const sc_lv<32> aes_main::ap_const_lv32_CF = "11001111";
const sc_lv<5> aes_main::ap_const_lv5_D = "1101";
const sc_lv<32> aes_main::ap_const_lv32_7 = "111";
const sc_lv<32> aes_main::ap_const_lv32_4F = "1001111";
const sc_lv<5> aes_main::ap_const_lv5_E = "1110";
const sc_lv<32> aes_main::ap_const_lv32_3C = "111100";
const sc_lv<5> aes_main::ap_const_lv5_F = "1111";
const sc_lv<32> aes_main::ap_const_lv32_32 = "110010";
const sc_lv<32> aes_main::ap_const_lv32_43 = "1000011";
const sc_lv<32> aes_main::ap_const_lv32_F6 = "11110110";
const sc_lv<32> aes_main::ap_const_lv32_A8 = "10101000";
const sc_lv<32> aes_main::ap_const_lv32_5A = "1011010";
const sc_lv<32> aes_main::ap_const_lv32_30 = "110000";
const sc_lv<32> aes_main::ap_const_lv32_8D = "10001101";
const sc_lv<32> aes_main::ap_const_lv32_31 = "110001";
const sc_lv<32> aes_main::ap_const_lv32_98 = "10011000";
const sc_lv<32> aes_main::ap_const_lv32_A2 = "10100010";
const sc_lv<32> aes_main::ap_const_lv32_E0 = "11100000";
const sc_lv<32> aes_main::ap_const_lv32_37 = "110111";
const sc_lv<32> aes_main::ap_const_lv32_34 = "110100";
const sc_lv<5> aes_main::ap_const_lv5_10 = "10000";
const sc_lv<32> aes_main::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const bool aes_main::ap_const_boolean_1 = true;

aes_main::aes_main(sc_module_name name) : sc_module(name), mVcdFile(0) {
    word_U = new aes_main_word("word_U");
    word_U->clk(ap_clk);
    word_U->reset(ap_rst);
    word_U->address0(word_address0);
    word_U->ce0(word_ce0);
    word_U->we0(word_we0);
    word_U->d0(grp_KeySchedule_fu_395_word_d0);
    word_U->q0(word_q0);
    word_U->address1(word_address1);
    word_U->ce1(word_ce1);
    word_U->q1(word_q1);
    key_U = new aes_main_key("key_U");
    key_U->clk(ap_clk);
    key_U->reset(ap_rst);
    key_U->address0(key_address0);
    key_U->ce0(key_ce0);
    key_U->we0(key_we0);
    key_U->d0(key_d0);
    key_U->q0(key_q0);
    key_U->address1(key_address1);
    key_U->ce1(key_ce1);
    key_U->we1(key_we1);
    key_U->d1(key_d1);
    statemt_U = new aes_main_statemt("statemt_U");
    statemt_U->clk(ap_clk);
    statemt_U->reset(ap_rst);
    statemt_U->address0(statemt_address0);
    statemt_U->ce0(statemt_ce0);
    statemt_U->we0(statemt_we0);
    statemt_U->d0(statemt_d0);
    statemt_U->q0(statemt_q0);
    statemt_U->address1(statemt_address1);
    statemt_U->ce1(statemt_ce1);
    statemt_U->we1(statemt_we1);
    statemt_U->d1(statemt_d1);
    statemt_U->q1(statemt_q1);
    out_enc_statemt_U = new aes_main_out_enc_g8j("out_enc_statemt_U");
    out_enc_statemt_U->clk(ap_clk);
    out_enc_statemt_U->reset(ap_rst);
    out_enc_statemt_U->address0(out_enc_statemt_address0);
    out_enc_statemt_U->ce0(out_enc_statemt_ce0);
    out_enc_statemt_U->q0(out_enc_statemt_q0);
    out_dec_statemt_U = new aes_main_out_dec_hbi("out_dec_statemt_U");
    out_dec_statemt_U->clk(ap_clk);
    out_dec_statemt_U->reset(ap_rst);
    out_dec_statemt_U->address0(out_dec_statemt_address0);
    out_dec_statemt_U->ce0(out_dec_statemt_ce0);
    out_dec_statemt_U->q0(out_dec_statemt_q0);
    grp_AddRoundKey_InversMi_fu_356 = new AddRoundKey_InversMi("grp_AddRoundKey_InversMi_fu_356");
    grp_AddRoundKey_InversMi_fu_356->ap_clk(ap_clk);
    grp_AddRoundKey_InversMi_fu_356->ap_rst(ap_rst);
    grp_AddRoundKey_InversMi_fu_356->ap_start(grp_AddRoundKey_InversMi_fu_356_ap_start);
    grp_AddRoundKey_InversMi_fu_356->ap_done(grp_AddRoundKey_InversMi_fu_356_ap_done);
    grp_AddRoundKey_InversMi_fu_356->ap_idle(grp_AddRoundKey_InversMi_fu_356_ap_idle);
    grp_AddRoundKey_InversMi_fu_356->ap_ready(grp_AddRoundKey_InversMi_fu_356_ap_ready);
    grp_AddRoundKey_InversMi_fu_356->statemt_address0(grp_AddRoundKey_InversMi_fu_356_statemt_address0);
    grp_AddRoundKey_InversMi_fu_356->statemt_ce0(grp_AddRoundKey_InversMi_fu_356_statemt_ce0);
    grp_AddRoundKey_InversMi_fu_356->statemt_we0(grp_AddRoundKey_InversMi_fu_356_statemt_we0);
    grp_AddRoundKey_InversMi_fu_356->statemt_d0(grp_AddRoundKey_InversMi_fu_356_statemt_d0);
    grp_AddRoundKey_InversMi_fu_356->statemt_q0(statemt_q0);
    grp_AddRoundKey_InversMi_fu_356->statemt_address1(grp_AddRoundKey_InversMi_fu_356_statemt_address1);
    grp_AddRoundKey_InversMi_fu_356->statemt_ce1(grp_AddRoundKey_InversMi_fu_356_statemt_ce1);
    grp_AddRoundKey_InversMi_fu_356->statemt_we1(grp_AddRoundKey_InversMi_fu_356_statemt_we1);
    grp_AddRoundKey_InversMi_fu_356->statemt_d1(grp_AddRoundKey_InversMi_fu_356_statemt_d1);
    grp_AddRoundKey_InversMi_fu_356->statemt_q1(statemt_q1);
    grp_AddRoundKey_InversMi_fu_356->nb(reg_441);
    grp_AddRoundKey_InversMi_fu_356->n(i_2_reg_625);
    grp_AddRoundKey_InversMi_fu_356->word_address0(grp_AddRoundKey_InversMi_fu_356_word_address0);
    grp_AddRoundKey_InversMi_fu_356->word_ce0(grp_AddRoundKey_InversMi_fu_356_word_ce0);
    grp_AddRoundKey_InversMi_fu_356->word_q0(word_q0);
    grp_AddRoundKey_InversMi_fu_356->word_address1(grp_AddRoundKey_InversMi_fu_356_word_address1);
    grp_AddRoundKey_InversMi_fu_356->word_ce1(grp_AddRoundKey_InversMi_fu_356_word_ce1);
    grp_AddRoundKey_InversMi_fu_356->word_q1(word_q1);
    grp_ByteSub_ShiftRow_fu_366 = new ByteSub_ShiftRow("grp_ByteSub_ShiftRow_fu_366");
    grp_ByteSub_ShiftRow_fu_366->ap_clk(ap_clk);
    grp_ByteSub_ShiftRow_fu_366->ap_rst(ap_rst);
    grp_ByteSub_ShiftRow_fu_366->ap_start(grp_ByteSub_ShiftRow_fu_366_ap_start);
    grp_ByteSub_ShiftRow_fu_366->ap_done(grp_ByteSub_ShiftRow_fu_366_ap_done);
    grp_ByteSub_ShiftRow_fu_366->ap_idle(grp_ByteSub_ShiftRow_fu_366_ap_idle);
    grp_ByteSub_ShiftRow_fu_366->ap_ready(grp_ByteSub_ShiftRow_fu_366_ap_ready);
    grp_ByteSub_ShiftRow_fu_366->statemt_address0(grp_ByteSub_ShiftRow_fu_366_statemt_address0);
    grp_ByteSub_ShiftRow_fu_366->statemt_ce0(grp_ByteSub_ShiftRow_fu_366_statemt_ce0);
    grp_ByteSub_ShiftRow_fu_366->statemt_we0(grp_ByteSub_ShiftRow_fu_366_statemt_we0);
    grp_ByteSub_ShiftRow_fu_366->statemt_d0(grp_ByteSub_ShiftRow_fu_366_statemt_d0);
    grp_ByteSub_ShiftRow_fu_366->statemt_q0(statemt_q0);
    grp_ByteSub_ShiftRow_fu_366->statemt_address1(grp_ByteSub_ShiftRow_fu_366_statemt_address1);
    grp_ByteSub_ShiftRow_fu_366->statemt_ce1(grp_ByteSub_ShiftRow_fu_366_statemt_ce1);
    grp_ByteSub_ShiftRow_fu_366->statemt_we1(grp_ByteSub_ShiftRow_fu_366_statemt_we1);
    grp_ByteSub_ShiftRow_fu_366->statemt_d1(grp_ByteSub_ShiftRow_fu_366_statemt_d1);
    grp_ByteSub_ShiftRow_fu_366->statemt_q1(statemt_q1);
    grp_ByteSub_ShiftRow_fu_366->nb(reg_441);
    grp_InversShiftRow_ByteS_fu_375 = new InversShiftRow_ByteS("grp_InversShiftRow_ByteS_fu_375");
    grp_InversShiftRow_ByteS_fu_375->ap_clk(ap_clk);
    grp_InversShiftRow_ByteS_fu_375->ap_rst(ap_rst);
    grp_InversShiftRow_ByteS_fu_375->ap_start(grp_InversShiftRow_ByteS_fu_375_ap_start);
    grp_InversShiftRow_ByteS_fu_375->ap_done(grp_InversShiftRow_ByteS_fu_375_ap_done);
    grp_InversShiftRow_ByteS_fu_375->ap_idle(grp_InversShiftRow_ByteS_fu_375_ap_idle);
    grp_InversShiftRow_ByteS_fu_375->ap_ready(grp_InversShiftRow_ByteS_fu_375_ap_ready);
    grp_InversShiftRow_ByteS_fu_375->statemt_address0(grp_InversShiftRow_ByteS_fu_375_statemt_address0);
    grp_InversShiftRow_ByteS_fu_375->statemt_ce0(grp_InversShiftRow_ByteS_fu_375_statemt_ce0);
    grp_InversShiftRow_ByteS_fu_375->statemt_we0(grp_InversShiftRow_ByteS_fu_375_statemt_we0);
    grp_InversShiftRow_ByteS_fu_375->statemt_d0(grp_InversShiftRow_ByteS_fu_375_statemt_d0);
    grp_InversShiftRow_ByteS_fu_375->statemt_q0(statemt_q0);
    grp_InversShiftRow_ByteS_fu_375->statemt_address1(grp_InversShiftRow_ByteS_fu_375_statemt_address1);
    grp_InversShiftRow_ByteS_fu_375->statemt_ce1(grp_InversShiftRow_ByteS_fu_375_statemt_ce1);
    grp_InversShiftRow_ByteS_fu_375->statemt_we1(grp_InversShiftRow_ByteS_fu_375_statemt_we1);
    grp_InversShiftRow_ByteS_fu_375->statemt_d1(grp_InversShiftRow_ByteS_fu_375_statemt_d1);
    grp_InversShiftRow_ByteS_fu_375->statemt_q1(statemt_q1);
    grp_InversShiftRow_ByteS_fu_375->nb(reg_441);
    grp_MixColumn_AddRoundKe_fu_384 = new MixColumn_AddRoundKe("grp_MixColumn_AddRoundKe_fu_384");
    grp_MixColumn_AddRoundKe_fu_384->ap_clk(ap_clk);
    grp_MixColumn_AddRoundKe_fu_384->ap_rst(ap_rst);
    grp_MixColumn_AddRoundKe_fu_384->ap_start(grp_MixColumn_AddRoundKe_fu_384_ap_start);
    grp_MixColumn_AddRoundKe_fu_384->ap_done(grp_MixColumn_AddRoundKe_fu_384_ap_done);
    grp_MixColumn_AddRoundKe_fu_384->ap_idle(grp_MixColumn_AddRoundKe_fu_384_ap_idle);
    grp_MixColumn_AddRoundKe_fu_384->ap_ready(grp_MixColumn_AddRoundKe_fu_384_ap_ready);
    grp_MixColumn_AddRoundKe_fu_384->statemt_address0(grp_MixColumn_AddRoundKe_fu_384_statemt_address0);
    grp_MixColumn_AddRoundKe_fu_384->statemt_ce0(grp_MixColumn_AddRoundKe_fu_384_statemt_ce0);
    grp_MixColumn_AddRoundKe_fu_384->statemt_we0(grp_MixColumn_AddRoundKe_fu_384_statemt_we0);
    grp_MixColumn_AddRoundKe_fu_384->statemt_d0(grp_MixColumn_AddRoundKe_fu_384_statemt_d0);
    grp_MixColumn_AddRoundKe_fu_384->statemt_q0(statemt_q0);
    grp_MixColumn_AddRoundKe_fu_384->statemt_address1(grp_MixColumn_AddRoundKe_fu_384_statemt_address1);
    grp_MixColumn_AddRoundKe_fu_384->statemt_ce1(grp_MixColumn_AddRoundKe_fu_384_statemt_ce1);
    grp_MixColumn_AddRoundKe_fu_384->statemt_we1(grp_MixColumn_AddRoundKe_fu_384_statemt_we1);
    grp_MixColumn_AddRoundKe_fu_384->statemt_d1(grp_MixColumn_AddRoundKe_fu_384_statemt_d1);
    grp_MixColumn_AddRoundKe_fu_384->statemt_q1(statemt_q1);
    grp_MixColumn_AddRoundKe_fu_384->nb(reg_441);
    grp_MixColumn_AddRoundKe_fu_384->n(i_0_i_reg_313);
    grp_MixColumn_AddRoundKe_fu_384->word_address0(grp_MixColumn_AddRoundKe_fu_384_word_address0);
    grp_MixColumn_AddRoundKe_fu_384->word_ce0(grp_MixColumn_AddRoundKe_fu_384_word_ce0);
    grp_MixColumn_AddRoundKe_fu_384->word_q0(word_q0);
    grp_MixColumn_AddRoundKe_fu_384->word_address1(grp_MixColumn_AddRoundKe_fu_384_word_address1);
    grp_MixColumn_AddRoundKe_fu_384->word_ce1(grp_MixColumn_AddRoundKe_fu_384_word_ce1);
    grp_MixColumn_AddRoundKe_fu_384->word_q1(word_q1);
    grp_KeySchedule_fu_395 = new KeySchedule("grp_KeySchedule_fu_395");
    grp_KeySchedule_fu_395->ap_clk(ap_clk);
    grp_KeySchedule_fu_395->ap_rst(ap_rst);
    grp_KeySchedule_fu_395->ap_start(grp_KeySchedule_fu_395_ap_start);
    grp_KeySchedule_fu_395->ap_done(grp_KeySchedule_fu_395_ap_done);
    grp_KeySchedule_fu_395->ap_idle(grp_KeySchedule_fu_395_ap_idle);
    grp_KeySchedule_fu_395->ap_ready(grp_KeySchedule_fu_395_ap_ready);
    grp_KeySchedule_fu_395->key_address0(grp_KeySchedule_fu_395_key_address0);
    grp_KeySchedule_fu_395->key_ce0(grp_KeySchedule_fu_395_key_ce0);
    grp_KeySchedule_fu_395->key_q0(key_q0);
    grp_KeySchedule_fu_395->word_address0(grp_KeySchedule_fu_395_word_address0);
    grp_KeySchedule_fu_395->word_ce0(grp_KeySchedule_fu_395_word_ce0);
    grp_KeySchedule_fu_395->word_we0(grp_KeySchedule_fu_395_word_we0);
    grp_KeySchedule_fu_395->word_d0(grp_KeySchedule_fu_395_word_d0);
    grp_KeySchedule_fu_395->word_q0(word_q0);
    grp_KeySchedule_fu_395->word_address1(grp_KeySchedule_fu_395_word_address1);
    grp_KeySchedule_fu_395->word_ce1(grp_KeySchedule_fu_395_word_ce1);
    grp_KeySchedule_fu_395->word_q1(word_q1);
    grp_AddRoundKey_fu_407 = new AddRoundKey("grp_AddRoundKey_fu_407");
    grp_AddRoundKey_fu_407->ap_clk(ap_clk);
    grp_AddRoundKey_fu_407->ap_rst(ap_rst);
    grp_AddRoundKey_fu_407->ap_start(grp_AddRoundKey_fu_407_ap_start);
    grp_AddRoundKey_fu_407->ap_done(grp_AddRoundKey_fu_407_ap_done);
    grp_AddRoundKey_fu_407->ap_idle(grp_AddRoundKey_fu_407_ap_idle);
    grp_AddRoundKey_fu_407->ap_ready(grp_AddRoundKey_fu_407_ap_ready);
    grp_AddRoundKey_fu_407->statemt_address0(grp_AddRoundKey_fu_407_statemt_address0);
    grp_AddRoundKey_fu_407->statemt_ce0(grp_AddRoundKey_fu_407_statemt_ce0);
    grp_AddRoundKey_fu_407->statemt_we0(grp_AddRoundKey_fu_407_statemt_we0);
    grp_AddRoundKey_fu_407->statemt_d0(grp_AddRoundKey_fu_407_statemt_d0);
    grp_AddRoundKey_fu_407->statemt_q0(statemt_q0);
    grp_AddRoundKey_fu_407->statemt_address1(grp_AddRoundKey_fu_407_statemt_address1);
    grp_AddRoundKey_fu_407->statemt_ce1(grp_AddRoundKey_fu_407_statemt_ce1);
    grp_AddRoundKey_fu_407->statemt_we1(grp_AddRoundKey_fu_407_statemt_we1);
    grp_AddRoundKey_fu_407->statemt_d1(grp_AddRoundKey_fu_407_statemt_d1);
    grp_AddRoundKey_fu_407->statemt_q1(statemt_q1);
    grp_AddRoundKey_fu_407->n(grp_AddRoundKey_fu_407_n);
    grp_AddRoundKey_fu_407->word_address0(grp_AddRoundKey_fu_407_word_address0);
    grp_AddRoundKey_fu_407->word_ce0(grp_AddRoundKey_fu_407_word_ce0);
    grp_AddRoundKey_fu_407->word_q0(word_q0);
    grp_AddRoundKey_fu_407->word_address1(grp_AddRoundKey_fu_407_word_address1);
    grp_AddRoundKey_fu_407->word_ce1(grp_AddRoundKey_fu_407_word_ce1);
    grp_AddRoundKey_fu_407->word_q1(word_q1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln107_fu_459_p2);
    sensitive << ( trunc_ln107_fu_455_p1 );

    SC_METHOD(thread_add_ln124_fu_518_p2);
    sensitive << ( main_result );
    sensitive << ( zext_ln124_2_fu_515_p1 );

    SC_METHOD(thread_add_ln130_fu_577_p2);
    sensitive << ( main_result );
    sensitive << ( zext_ln130_2_fu_574_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state33);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state34);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state35);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state36);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( icmp_ln129_fu_546_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( icmp_ln129_fu_546_p2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( icmp_ln129_fu_546_p2 );

    SC_METHOD(thread_grp_AddRoundKey_InversMi_fu_356_ap_start);
    sensitive << ( grp_AddRoundKey_InversMi_fu_356_ap_start_reg );

    SC_METHOD(thread_grp_AddRoundKey_fu_407_ap_start);
    sensitive << ( grp_AddRoundKey_fu_407_ap_start_reg );

    SC_METHOD(thread_grp_AddRoundKey_fu_407_n);
    sensitive << ( i_0_i_reg_313 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_grp_ByteSub_ShiftRow_fu_366_ap_start);
    sensitive << ( grp_ByteSub_ShiftRow_fu_366_ap_start_reg );

    SC_METHOD(thread_grp_InversShiftRow_ByteS_fu_375_ap_start);
    sensitive << ( grp_InversShiftRow_ByteS_fu_375_ap_start_reg );

    SC_METHOD(thread_grp_KeySchedule_fu_395_ap_start);
    sensitive << ( grp_KeySchedule_fu_395_ap_start_reg );

    SC_METHOD(thread_grp_MixColumn_AddRoundKe_fu_384_ap_start);
    sensitive << ( grp_MixColumn_AddRoundKe_fu_384_ap_start_reg );

    SC_METHOD(thread_i_1_fu_487_p2);
    sensitive << ( i_2_i_reg_325 );

    SC_METHOD(thread_i_2_fu_534_p2);
    sensitive << ( i_0_in_i_reg_336 );

    SC_METHOD(thread_i_3_fu_552_p2);
    sensitive << ( i_2_i5_reg_345 );

    SC_METHOD(thread_i_fu_475_p2);
    sensitive << ( i_0_i_reg_313 );

    SC_METHOD(thread_icmp_ln107_fu_469_p2);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( i_0_i_reg_313 );
    sensitive << ( zext_ln107_fu_465_p1 );

    SC_METHOD(thread_icmp_ln113_fu_540_p2);
    sensitive << ( i_2_fu_534_p2 );
    sensitive << ( ap_CS_fsm_state28 );

    SC_METHOD(thread_icmp_ln123_fu_481_p2);
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( i_2_i_reg_325 );

    SC_METHOD(thread_icmp_ln124_fu_509_p2);
    sensitive << ( statemt_q0 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( zext_ln124_1_fu_505_p1 );

    SC_METHOD(thread_icmp_ln129_fu_546_p2);
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( i_2_i5_reg_345 );

    SC_METHOD(thread_icmp_ln130_fu_568_p2);
    sensitive << ( statemt_q1 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( zext_ln130_1_fu_564_p1 );

    SC_METHOD(thread_key_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_KeySchedule_fu_395_key_address0 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_key_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_key_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_KeySchedule_fu_395_key_ce0 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_key_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_key_d0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_key_d1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_key_we0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_key_we1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_out_dec_statemt_address0);
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( zext_ln130_fu_558_p1 );

    SC_METHOD(thread_out_dec_statemt_ce0);
    sensitive << ( ap_CS_fsm_state34 );

    SC_METHOD(thread_out_enc_statemt_address0);
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( zext_ln124_fu_493_p1 );

    SC_METHOD(thread_out_enc_statemt_ce0);
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_statemt_address0);
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( grp_AddRoundKey_InversMi_fu_356_statemt_address0 );
    sensitive << ( grp_ByteSub_ShiftRow_fu_366_statemt_address0 );
    sensitive << ( grp_InversShiftRow_ByteS_fu_375_statemt_address0 );
    sensitive << ( grp_MixColumn_AddRoundKe_fu_384_statemt_address0 );
    sensitive << ( grp_AddRoundKey_fu_407_statemt_address0 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( zext_ln124_fu_493_p1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_statemt_address1);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( grp_AddRoundKey_InversMi_fu_356_statemt_address1 );
    sensitive << ( grp_ByteSub_ShiftRow_fu_366_statemt_address1 );
    sensitive << ( grp_InversShiftRow_ByteS_fu_375_statemt_address1 );
    sensitive << ( grp_MixColumn_AddRoundKe_fu_384_statemt_address1 );
    sensitive << ( grp_AddRoundKey_fu_407_statemt_address1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( zext_ln130_fu_558_p1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_statemt_ce0);
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( grp_AddRoundKey_InversMi_fu_356_statemt_ce0 );
    sensitive << ( grp_ByteSub_ShiftRow_fu_366_statemt_ce0 );
    sensitive << ( grp_InversShiftRow_ByteS_fu_375_statemt_ce0 );
    sensitive << ( grp_MixColumn_AddRoundKe_fu_384_statemt_ce0 );
    sensitive << ( grp_KeySchedule_fu_395_ap_done );
    sensitive << ( grp_AddRoundKey_fu_407_statemt_ce0 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_statemt_ce1);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( grp_AddRoundKey_InversMi_fu_356_statemt_ce1 );
    sensitive << ( grp_ByteSub_ShiftRow_fu_366_statemt_ce1 );
    sensitive << ( grp_InversShiftRow_ByteS_fu_375_statemt_ce1 );
    sensitive << ( grp_MixColumn_AddRoundKe_fu_384_statemt_ce1 );
    sensitive << ( grp_KeySchedule_fu_395_ap_done );
    sensitive << ( grp_AddRoundKey_fu_407_statemt_ce1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_statemt_d0);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( grp_AddRoundKey_InversMi_fu_356_statemt_d0 );
    sensitive << ( grp_ByteSub_ShiftRow_fu_366_statemt_d0 );
    sensitive << ( grp_InversShiftRow_ByteS_fu_375_statemt_d0 );
    sensitive << ( grp_MixColumn_AddRoundKe_fu_384_statemt_d0 );
    sensitive << ( grp_AddRoundKey_fu_407_statemt_d0 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_statemt_d1);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( grp_AddRoundKey_InversMi_fu_356_statemt_d1 );
    sensitive << ( grp_ByteSub_ShiftRow_fu_366_statemt_d1 );
    sensitive << ( grp_InversShiftRow_ByteS_fu_375_statemt_d1 );
    sensitive << ( grp_MixColumn_AddRoundKe_fu_384_statemt_d1 );
    sensitive << ( grp_AddRoundKey_fu_407_statemt_d1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_statemt_we0);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( grp_AddRoundKey_InversMi_fu_356_statemt_we0 );
    sensitive << ( grp_ByteSub_ShiftRow_fu_366_statemt_we0 );
    sensitive << ( grp_InversShiftRow_ByteS_fu_375_statemt_we0 );
    sensitive << ( grp_MixColumn_AddRoundKe_fu_384_statemt_we0 );
    sensitive << ( grp_KeySchedule_fu_395_ap_done );
    sensitive << ( grp_AddRoundKey_fu_407_statemt_we0 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_statemt_we1);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( grp_AddRoundKey_InversMi_fu_356_statemt_we1 );
    sensitive << ( grp_ByteSub_ShiftRow_fu_366_statemt_we1 );
    sensitive << ( grp_InversShiftRow_ByteS_fu_375_statemt_we1 );
    sensitive << ( grp_MixColumn_AddRoundKe_fu_384_statemt_we1 );
    sensitive << ( grp_KeySchedule_fu_395_ap_done );
    sensitive << ( grp_AddRoundKey_fu_407_statemt_we1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_trunc_ln107_fu_455_p1);
    sensitive << ( round_val );

    SC_METHOD(thread_word_address0);
    sensitive << ( grp_AddRoundKey_InversMi_fu_356_word_address0 );
    sensitive << ( grp_MixColumn_AddRoundKe_fu_384_word_address0 );
    sensitive << ( grp_KeySchedule_fu_395_word_address0 );
    sensitive << ( grp_AddRoundKey_fu_407_word_address0 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_word_address1);
    sensitive << ( grp_AddRoundKey_InversMi_fu_356_word_address1 );
    sensitive << ( grp_MixColumn_AddRoundKe_fu_384_word_address1 );
    sensitive << ( grp_KeySchedule_fu_395_word_address1 );
    sensitive << ( grp_AddRoundKey_fu_407_word_address1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_word_ce0);
    sensitive << ( grp_AddRoundKey_InversMi_fu_356_word_ce0 );
    sensitive << ( grp_MixColumn_AddRoundKe_fu_384_word_ce0 );
    sensitive << ( grp_KeySchedule_fu_395_word_ce0 );
    sensitive << ( grp_AddRoundKey_fu_407_word_ce0 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_word_ce1);
    sensitive << ( grp_AddRoundKey_InversMi_fu_356_word_ce1 );
    sensitive << ( grp_MixColumn_AddRoundKe_fu_384_word_ce1 );
    sensitive << ( grp_KeySchedule_fu_395_word_ce1 );
    sensitive << ( grp_AddRoundKey_fu_407_word_ce1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_word_we0);
    sensitive << ( grp_KeySchedule_fu_395_word_we0 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_zext_ln107_fu_465_p1);
    sensitive << ( add_ln107_fu_459_p2 );

    SC_METHOD(thread_zext_ln113_fu_530_p1);
    sensitive << ( round_val );

    SC_METHOD(thread_zext_ln124_1_fu_505_p1);
    sensitive << ( out_enc_statemt_q0 );

    SC_METHOD(thread_zext_ln124_2_fu_515_p1);
    sensitive << ( icmp_ln124_reg_615 );

    SC_METHOD(thread_zext_ln124_fu_493_p1);
    sensitive << ( i_2_i_reg_325 );

    SC_METHOD(thread_zext_ln130_1_fu_564_p1);
    sensitive << ( out_dec_statemt_q0 );

    SC_METHOD(thread_zext_ln130_2_fu_574_p1);
    sensitive << ( icmp_ln130_reg_652 );

    SC_METHOD(thread_zext_ln130_fu_558_p1);
    sensitive << ( i_2_i5_reg_345 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( icmp_ln107_fu_469_p2 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( icmp_ln123_fu_481_p2 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( grp_InversShiftRow_ByteS_fu_375_ap_done );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( icmp_ln129_fu_546_p2 );
    sensitive << ( grp_AddRoundKey_InversMi_fu_356_ap_done );
    sensitive << ( grp_ByteSub_ShiftRow_fu_366_ap_done );
    sensitive << ( grp_MixColumn_AddRoundKe_fu_384_ap_done );
    sensitive << ( grp_KeySchedule_fu_395_ap_done );
    sensitive << ( grp_AddRoundKey_fu_407_ap_done );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( icmp_ln113_fu_540_p2 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000000000000000000000000000000000001";
    round_val = "000000";
    nb = "00000000000000000000000000000000";
    main_result = "00000000000000000000000000000000";
    grp_AddRoundKey_InversMi_fu_356_ap_start_reg = SC_LOGIC_0;
    grp_ByteSub_ShiftRow_fu_366_ap_start_reg = SC_LOGIC_0;
    grp_InversShiftRow_ByteS_fu_375_ap_start_reg = SC_LOGIC_0;
    grp_MixColumn_AddRoundKe_fu_384_ap_start_reg = SC_LOGIC_0;
    grp_KeySchedule_fu_395_ap_start_reg = SC_LOGIC_0;
    grp_AddRoundKey_fu_407_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "aes_main_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, word_address0, "word_address0");
    sc_trace(mVcdFile, word_ce0, "word_ce0");
    sc_trace(mVcdFile, word_we0, "word_we0");
    sc_trace(mVcdFile, word_q0, "word_q0");
    sc_trace(mVcdFile, word_address1, "word_address1");
    sc_trace(mVcdFile, word_ce1, "word_ce1");
    sc_trace(mVcdFile, word_q1, "word_q1");
    sc_trace(mVcdFile, key_address0, "key_address0");
    sc_trace(mVcdFile, key_ce0, "key_ce0");
    sc_trace(mVcdFile, key_we0, "key_we0");
    sc_trace(mVcdFile, key_d0, "key_d0");
    sc_trace(mVcdFile, key_q0, "key_q0");
    sc_trace(mVcdFile, key_address1, "key_address1");
    sc_trace(mVcdFile, key_ce1, "key_ce1");
    sc_trace(mVcdFile, key_we1, "key_we1");
    sc_trace(mVcdFile, key_d1, "key_d1");
    sc_trace(mVcdFile, round_val, "round_val");
    sc_trace(mVcdFile, nb, "nb");
    sc_trace(mVcdFile, statemt_address0, "statemt_address0");
    sc_trace(mVcdFile, statemt_ce0, "statemt_ce0");
    sc_trace(mVcdFile, statemt_we0, "statemt_we0");
    sc_trace(mVcdFile, statemt_d0, "statemt_d0");
    sc_trace(mVcdFile, statemt_q0, "statemt_q0");
    sc_trace(mVcdFile, statemt_address1, "statemt_address1");
    sc_trace(mVcdFile, statemt_ce1, "statemt_ce1");
    sc_trace(mVcdFile, statemt_we1, "statemt_we1");
    sc_trace(mVcdFile, statemt_d1, "statemt_d1");
    sc_trace(mVcdFile, statemt_q1, "statemt_q1");
    sc_trace(mVcdFile, out_enc_statemt_address0, "out_enc_statemt_address0");
    sc_trace(mVcdFile, out_enc_statemt_ce0, "out_enc_statemt_ce0");
    sc_trace(mVcdFile, out_enc_statemt_q0, "out_enc_statemt_q0");
    sc_trace(mVcdFile, main_result, "main_result");
    sc_trace(mVcdFile, out_dec_statemt_address0, "out_dec_statemt_address0");
    sc_trace(mVcdFile, out_dec_statemt_ce0, "out_dec_statemt_ce0");
    sc_trace(mVcdFile, out_dec_statemt_q0, "out_dec_statemt_q0");
    sc_trace(mVcdFile, reg_441, "reg_441");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, icmp_ln107_fu_469_p2, "icmp_ln107_fu_469_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, i_fu_475_p2, "i_fu_475_p2");
    sc_trace(mVcdFile, i_reg_592, "i_reg_592");
    sc_trace(mVcdFile, i_1_fu_487_p2, "i_1_fu_487_p2");
    sc_trace(mVcdFile, i_1_reg_600, "i_1_reg_600");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, icmp_ln123_fu_481_p2, "icmp_ln123_fu_481_p2");
    sc_trace(mVcdFile, icmp_ln124_fu_509_p2, "icmp_ln124_fu_509_p2");
    sc_trace(mVcdFile, icmp_ln124_reg_615, "icmp_ln124_reg_615");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, zext_ln113_fu_530_p1, "zext_ln113_fu_530_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, grp_InversShiftRow_ByteS_fu_375_ap_ready, "grp_InversShiftRow_ByteS_fu_375_ap_ready");
    sc_trace(mVcdFile, grp_InversShiftRow_ByteS_fu_375_ap_done, "grp_InversShiftRow_ByteS_fu_375_ap_done");
    sc_trace(mVcdFile, i_2_fu_534_p2, "i_2_fu_534_p2");
    sc_trace(mVcdFile, i_2_reg_625, "i_2_reg_625");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, i_3_fu_552_p2, "i_3_fu_552_p2");
    sc_trace(mVcdFile, i_3_reg_637, "i_3_reg_637");
    sc_trace(mVcdFile, ap_CS_fsm_state34, "ap_CS_fsm_state34");
    sc_trace(mVcdFile, icmp_ln129_fu_546_p2, "icmp_ln129_fu_546_p2");
    sc_trace(mVcdFile, icmp_ln130_fu_568_p2, "icmp_ln130_fu_568_p2");
    sc_trace(mVcdFile, icmp_ln130_reg_652, "icmp_ln130_reg_652");
    sc_trace(mVcdFile, ap_CS_fsm_state35, "ap_CS_fsm_state35");
    sc_trace(mVcdFile, grp_AddRoundKey_InversMi_fu_356_ap_start, "grp_AddRoundKey_InversMi_fu_356_ap_start");
    sc_trace(mVcdFile, grp_AddRoundKey_InversMi_fu_356_ap_done, "grp_AddRoundKey_InversMi_fu_356_ap_done");
    sc_trace(mVcdFile, grp_AddRoundKey_InversMi_fu_356_ap_idle, "grp_AddRoundKey_InversMi_fu_356_ap_idle");
    sc_trace(mVcdFile, grp_AddRoundKey_InversMi_fu_356_ap_ready, "grp_AddRoundKey_InversMi_fu_356_ap_ready");
    sc_trace(mVcdFile, grp_AddRoundKey_InversMi_fu_356_statemt_address0, "grp_AddRoundKey_InversMi_fu_356_statemt_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_InversMi_fu_356_statemt_ce0, "grp_AddRoundKey_InversMi_fu_356_statemt_ce0");
    sc_trace(mVcdFile, grp_AddRoundKey_InversMi_fu_356_statemt_we0, "grp_AddRoundKey_InversMi_fu_356_statemt_we0");
    sc_trace(mVcdFile, grp_AddRoundKey_InversMi_fu_356_statemt_d0, "grp_AddRoundKey_InversMi_fu_356_statemt_d0");
    sc_trace(mVcdFile, grp_AddRoundKey_InversMi_fu_356_statemt_address1, "grp_AddRoundKey_InversMi_fu_356_statemt_address1");
    sc_trace(mVcdFile, grp_AddRoundKey_InversMi_fu_356_statemt_ce1, "grp_AddRoundKey_InversMi_fu_356_statemt_ce1");
    sc_trace(mVcdFile, grp_AddRoundKey_InversMi_fu_356_statemt_we1, "grp_AddRoundKey_InversMi_fu_356_statemt_we1");
    sc_trace(mVcdFile, grp_AddRoundKey_InversMi_fu_356_statemt_d1, "grp_AddRoundKey_InversMi_fu_356_statemt_d1");
    sc_trace(mVcdFile, grp_AddRoundKey_InversMi_fu_356_word_address0, "grp_AddRoundKey_InversMi_fu_356_word_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_InversMi_fu_356_word_ce0, "grp_AddRoundKey_InversMi_fu_356_word_ce0");
    sc_trace(mVcdFile, grp_AddRoundKey_InversMi_fu_356_word_address1, "grp_AddRoundKey_InversMi_fu_356_word_address1");
    sc_trace(mVcdFile, grp_AddRoundKey_InversMi_fu_356_word_ce1, "grp_AddRoundKey_InversMi_fu_356_word_ce1");
    sc_trace(mVcdFile, grp_ByteSub_ShiftRow_fu_366_ap_start, "grp_ByteSub_ShiftRow_fu_366_ap_start");
    sc_trace(mVcdFile, grp_ByteSub_ShiftRow_fu_366_ap_done, "grp_ByteSub_ShiftRow_fu_366_ap_done");
    sc_trace(mVcdFile, grp_ByteSub_ShiftRow_fu_366_ap_idle, "grp_ByteSub_ShiftRow_fu_366_ap_idle");
    sc_trace(mVcdFile, grp_ByteSub_ShiftRow_fu_366_ap_ready, "grp_ByteSub_ShiftRow_fu_366_ap_ready");
    sc_trace(mVcdFile, grp_ByteSub_ShiftRow_fu_366_statemt_address0, "grp_ByteSub_ShiftRow_fu_366_statemt_address0");
    sc_trace(mVcdFile, grp_ByteSub_ShiftRow_fu_366_statemt_ce0, "grp_ByteSub_ShiftRow_fu_366_statemt_ce0");
    sc_trace(mVcdFile, grp_ByteSub_ShiftRow_fu_366_statemt_we0, "grp_ByteSub_ShiftRow_fu_366_statemt_we0");
    sc_trace(mVcdFile, grp_ByteSub_ShiftRow_fu_366_statemt_d0, "grp_ByteSub_ShiftRow_fu_366_statemt_d0");
    sc_trace(mVcdFile, grp_ByteSub_ShiftRow_fu_366_statemt_address1, "grp_ByteSub_ShiftRow_fu_366_statemt_address1");
    sc_trace(mVcdFile, grp_ByteSub_ShiftRow_fu_366_statemt_ce1, "grp_ByteSub_ShiftRow_fu_366_statemt_ce1");
    sc_trace(mVcdFile, grp_ByteSub_ShiftRow_fu_366_statemt_we1, "grp_ByteSub_ShiftRow_fu_366_statemt_we1");
    sc_trace(mVcdFile, grp_ByteSub_ShiftRow_fu_366_statemt_d1, "grp_ByteSub_ShiftRow_fu_366_statemt_d1");
    sc_trace(mVcdFile, grp_InversShiftRow_ByteS_fu_375_ap_start, "grp_InversShiftRow_ByteS_fu_375_ap_start");
    sc_trace(mVcdFile, grp_InversShiftRow_ByteS_fu_375_ap_idle, "grp_InversShiftRow_ByteS_fu_375_ap_idle");
    sc_trace(mVcdFile, grp_InversShiftRow_ByteS_fu_375_statemt_address0, "grp_InversShiftRow_ByteS_fu_375_statemt_address0");
    sc_trace(mVcdFile, grp_InversShiftRow_ByteS_fu_375_statemt_ce0, "grp_InversShiftRow_ByteS_fu_375_statemt_ce0");
    sc_trace(mVcdFile, grp_InversShiftRow_ByteS_fu_375_statemt_we0, "grp_InversShiftRow_ByteS_fu_375_statemt_we0");
    sc_trace(mVcdFile, grp_InversShiftRow_ByteS_fu_375_statemt_d0, "grp_InversShiftRow_ByteS_fu_375_statemt_d0");
    sc_trace(mVcdFile, grp_InversShiftRow_ByteS_fu_375_statemt_address1, "grp_InversShiftRow_ByteS_fu_375_statemt_address1");
    sc_trace(mVcdFile, grp_InversShiftRow_ByteS_fu_375_statemt_ce1, "grp_InversShiftRow_ByteS_fu_375_statemt_ce1");
    sc_trace(mVcdFile, grp_InversShiftRow_ByteS_fu_375_statemt_we1, "grp_InversShiftRow_ByteS_fu_375_statemt_we1");
    sc_trace(mVcdFile, grp_InversShiftRow_ByteS_fu_375_statemt_d1, "grp_InversShiftRow_ByteS_fu_375_statemt_d1");
    sc_trace(mVcdFile, grp_MixColumn_AddRoundKe_fu_384_ap_start, "grp_MixColumn_AddRoundKe_fu_384_ap_start");
    sc_trace(mVcdFile, grp_MixColumn_AddRoundKe_fu_384_ap_done, "grp_MixColumn_AddRoundKe_fu_384_ap_done");
    sc_trace(mVcdFile, grp_MixColumn_AddRoundKe_fu_384_ap_idle, "grp_MixColumn_AddRoundKe_fu_384_ap_idle");
    sc_trace(mVcdFile, grp_MixColumn_AddRoundKe_fu_384_ap_ready, "grp_MixColumn_AddRoundKe_fu_384_ap_ready");
    sc_trace(mVcdFile, grp_MixColumn_AddRoundKe_fu_384_statemt_address0, "grp_MixColumn_AddRoundKe_fu_384_statemt_address0");
    sc_trace(mVcdFile, grp_MixColumn_AddRoundKe_fu_384_statemt_ce0, "grp_MixColumn_AddRoundKe_fu_384_statemt_ce0");
    sc_trace(mVcdFile, grp_MixColumn_AddRoundKe_fu_384_statemt_we0, "grp_MixColumn_AddRoundKe_fu_384_statemt_we0");
    sc_trace(mVcdFile, grp_MixColumn_AddRoundKe_fu_384_statemt_d0, "grp_MixColumn_AddRoundKe_fu_384_statemt_d0");
    sc_trace(mVcdFile, grp_MixColumn_AddRoundKe_fu_384_statemt_address1, "grp_MixColumn_AddRoundKe_fu_384_statemt_address1");
    sc_trace(mVcdFile, grp_MixColumn_AddRoundKe_fu_384_statemt_ce1, "grp_MixColumn_AddRoundKe_fu_384_statemt_ce1");
    sc_trace(mVcdFile, grp_MixColumn_AddRoundKe_fu_384_statemt_we1, "grp_MixColumn_AddRoundKe_fu_384_statemt_we1");
    sc_trace(mVcdFile, grp_MixColumn_AddRoundKe_fu_384_statemt_d1, "grp_MixColumn_AddRoundKe_fu_384_statemt_d1");
    sc_trace(mVcdFile, grp_MixColumn_AddRoundKe_fu_384_word_address0, "grp_MixColumn_AddRoundKe_fu_384_word_address0");
    sc_trace(mVcdFile, grp_MixColumn_AddRoundKe_fu_384_word_ce0, "grp_MixColumn_AddRoundKe_fu_384_word_ce0");
    sc_trace(mVcdFile, grp_MixColumn_AddRoundKe_fu_384_word_address1, "grp_MixColumn_AddRoundKe_fu_384_word_address1");
    sc_trace(mVcdFile, grp_MixColumn_AddRoundKe_fu_384_word_ce1, "grp_MixColumn_AddRoundKe_fu_384_word_ce1");
    sc_trace(mVcdFile, grp_KeySchedule_fu_395_ap_start, "grp_KeySchedule_fu_395_ap_start");
    sc_trace(mVcdFile, grp_KeySchedule_fu_395_ap_done, "grp_KeySchedule_fu_395_ap_done");
    sc_trace(mVcdFile, grp_KeySchedule_fu_395_ap_idle, "grp_KeySchedule_fu_395_ap_idle");
    sc_trace(mVcdFile, grp_KeySchedule_fu_395_ap_ready, "grp_KeySchedule_fu_395_ap_ready");
    sc_trace(mVcdFile, grp_KeySchedule_fu_395_key_address0, "grp_KeySchedule_fu_395_key_address0");
    sc_trace(mVcdFile, grp_KeySchedule_fu_395_key_ce0, "grp_KeySchedule_fu_395_key_ce0");
    sc_trace(mVcdFile, grp_KeySchedule_fu_395_word_address0, "grp_KeySchedule_fu_395_word_address0");
    sc_trace(mVcdFile, grp_KeySchedule_fu_395_word_ce0, "grp_KeySchedule_fu_395_word_ce0");
    sc_trace(mVcdFile, grp_KeySchedule_fu_395_word_we0, "grp_KeySchedule_fu_395_word_we0");
    sc_trace(mVcdFile, grp_KeySchedule_fu_395_word_d0, "grp_KeySchedule_fu_395_word_d0");
    sc_trace(mVcdFile, grp_KeySchedule_fu_395_word_address1, "grp_KeySchedule_fu_395_word_address1");
    sc_trace(mVcdFile, grp_KeySchedule_fu_395_word_ce1, "grp_KeySchedule_fu_395_word_ce1");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_407_ap_start, "grp_AddRoundKey_fu_407_ap_start");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_407_ap_done, "grp_AddRoundKey_fu_407_ap_done");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_407_ap_idle, "grp_AddRoundKey_fu_407_ap_idle");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_407_ap_ready, "grp_AddRoundKey_fu_407_ap_ready");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_407_statemt_address0, "grp_AddRoundKey_fu_407_statemt_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_407_statemt_ce0, "grp_AddRoundKey_fu_407_statemt_ce0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_407_statemt_we0, "grp_AddRoundKey_fu_407_statemt_we0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_407_statemt_d0, "grp_AddRoundKey_fu_407_statemt_d0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_407_statemt_address1, "grp_AddRoundKey_fu_407_statemt_address1");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_407_statemt_ce1, "grp_AddRoundKey_fu_407_statemt_ce1");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_407_statemt_we1, "grp_AddRoundKey_fu_407_statemt_we1");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_407_statemt_d1, "grp_AddRoundKey_fu_407_statemt_d1");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_407_n, "grp_AddRoundKey_fu_407_n");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_407_word_address0, "grp_AddRoundKey_fu_407_word_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_407_word_ce0, "grp_AddRoundKey_fu_407_word_ce0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_407_word_address1, "grp_AddRoundKey_fu_407_word_address1");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_407_word_ce1, "grp_AddRoundKey_fu_407_word_ce1");
    sc_trace(mVcdFile, i_0_i_reg_313, "i_0_i_reg_313");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, i_2_i_reg_325, "i_2_i_reg_325");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, i_0_in_i_reg_336, "i_0_in_i_reg_336");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, i_2_i5_reg_345, "i_2_i5_reg_345");
    sc_trace(mVcdFile, ap_CS_fsm_state36, "ap_CS_fsm_state36");
    sc_trace(mVcdFile, ap_CS_fsm_state33, "ap_CS_fsm_state33");
    sc_trace(mVcdFile, grp_AddRoundKey_InversMi_fu_356_ap_start_reg, "grp_AddRoundKey_InversMi_fu_356_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, grp_ByteSub_ShiftRow_fu_366_ap_start_reg, "grp_ByteSub_ShiftRow_fu_366_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, grp_InversShiftRow_ByteS_fu_375_ap_start_reg, "grp_InversShiftRow_ByteS_fu_375_ap_start_reg");
    sc_trace(mVcdFile, grp_MixColumn_AddRoundKe_fu_384_ap_start_reg, "grp_MixColumn_AddRoundKe_fu_384_ap_start_reg");
    sc_trace(mVcdFile, grp_KeySchedule_fu_395_ap_start_reg, "grp_KeySchedule_fu_395_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_407_ap_start_reg, "grp_AddRoundKey_fu_407_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, icmp_ln113_fu_540_p2, "icmp_ln113_fu_540_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, zext_ln124_fu_493_p1, "zext_ln124_fu_493_p1");
    sc_trace(mVcdFile, zext_ln130_fu_558_p1, "zext_ln130_fu_558_p1");
    sc_trace(mVcdFile, add_ln124_fu_518_p2, "add_ln124_fu_518_p2");
    sc_trace(mVcdFile, add_ln130_fu_577_p2, "add_ln130_fu_577_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, trunc_ln107_fu_455_p1, "trunc_ln107_fu_455_p1");
    sc_trace(mVcdFile, add_ln107_fu_459_p2, "add_ln107_fu_459_p2");
    sc_trace(mVcdFile, zext_ln107_fu_465_p1, "zext_ln107_fu_465_p1");
    sc_trace(mVcdFile, zext_ln124_1_fu_505_p1, "zext_ln124_1_fu_505_p1");
    sc_trace(mVcdFile, zext_ln124_2_fu_515_p1, "zext_ln124_2_fu_515_p1");
    sc_trace(mVcdFile, zext_ln130_1_fu_564_p1, "zext_ln130_1_fu_564_p1");
    sc_trace(mVcdFile, zext_ln130_2_fu_574_p1, "zext_ln130_2_fu_574_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("aes_main.hdltvin.dat");
    mHdltvoutHandle.open("aes_main.hdltvout.dat");
}

aes_main::~aes_main() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete word_U;
    delete key_U;
    delete statemt_U;
    delete out_enc_statemt_U;
    delete out_dec_statemt_U;
    delete grp_AddRoundKey_InversMi_fu_356;
    delete grp_ByteSub_ShiftRow_fu_366;
    delete grp_InversShiftRow_ByteS_fu_375;
    delete grp_MixColumn_AddRoundKe_fu_384;
    delete grp_KeySchedule_fu_395;
    delete grp_AddRoundKey_fu_407;
}

void aes_main::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_AddRoundKey_InversMi_fu_356_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
            grp_AddRoundKey_InversMi_fu_356_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_AddRoundKey_InversMi_fu_356_ap_ready.read())) {
            grp_AddRoundKey_InversMi_fu_356_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_AddRoundKey_fu_407_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln113_fu_540_p2.read())))) {
            grp_AddRoundKey_fu_407_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_AddRoundKey_fu_407_ap_ready.read())) {
            grp_AddRoundKey_fu_407_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_ByteSub_ShiftRow_fu_366_ap_start_reg = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
              esl_seteq<1,1,1>(icmp_ln107_fu_469_p2.read(), ap_const_lv1_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
              esl_seteq<1,1,1>(icmp_ln107_fu_469_p2.read(), ap_const_lv1_1)))) {
            grp_ByteSub_ShiftRow_fu_366_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_ByteSub_ShiftRow_fu_366_ap_ready.read())) {
            grp_ByteSub_ShiftRow_fu_366_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_InversShiftRow_ByteS_fu_375_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()))) {
            grp_InversShiftRow_ByteS_fu_375_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_InversShiftRow_ByteS_fu_375_ap_ready.read())) {
            grp_InversShiftRow_ByteS_fu_375_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_KeySchedule_fu_395_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln123_fu_481_p2.read())))) {
            grp_KeySchedule_fu_395_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_KeySchedule_fu_395_ap_ready.read())) {
            grp_KeySchedule_fu_395_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_MixColumn_AddRoundKe_fu_384_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
            grp_MixColumn_AddRoundKe_fu_384_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_MixColumn_AddRoundKe_fu_384_ap_ready.read())) {
            grp_MixColumn_AddRoundKe_fu_384_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(grp_MixColumn_AddRoundKe_fu_384_ap_done.read(), ap_const_logic_1))) {
        i_0_i_reg_313 = i_reg_592.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
                esl_seteq<1,1,1>(grp_AddRoundKey_fu_407_ap_done.read(), ap_const_logic_1))) {
        i_0_i_reg_313 = ap_const_lv32_1;
    }
    if (esl_seteq<1,1,1>(grp_InversShiftRow_ByteS_fu_375_ap_done.read(), ap_const_logic_1)) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
            i_0_in_i_reg_336 = i_2_reg_625.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
            i_0_in_i_reg_336 = zext_ln113_fu_530_p1.read();
        }
    }
    if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_407_ap_done.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
        i_2_i5_reg_345 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        i_2_i5_reg_345 = i_3_reg_637.read();
    }
    if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_407_ap_done.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()))) {
        i_2_i_reg_325 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        i_2_i_reg_325 = i_1_reg_600.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        main_result = add_ln130_fu_577_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        main_result = add_ln124_fu_518_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln123_fu_481_p2.read()))) {
        round_val = ap_const_lv6_A;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        round_val = ap_const_lv6_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        i_1_reg_600 = i_1_fu_487_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        i_2_reg_625 = i_2_fu_534_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        i_3_reg_637 = i_3_fu_552_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        i_reg_592 = i_fu_475_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        icmp_ln124_reg_615 = icmp_ln124_fu_509_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        icmp_ln130_reg_652 = icmp_ln130_fu_568_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln123_fu_481_p2.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        nb = ap_const_lv32_4;
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
  esl_seteq<1,1,1>(icmp_ln107_fu_469_p2.read(), ap_const_lv1_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
  esl_seteq<1,1,1>(icmp_ln107_fu_469_p2.read(), ap_const_lv1_1)) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()))) {
        reg_441 = nb.read();
    }
}

void aes_main::thread_add_ln107_fu_459_p2() {
    add_ln107_fu_459_p2 = (!ap_const_lv5_9.is_01() || !trunc_ln107_fu_455_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(ap_const_lv5_9) + sc_biguint<5>(trunc_ln107_fu_455_p1.read()));
}

void aes_main::thread_add_ln124_fu_518_p2() {
    add_ln124_fu_518_p2 = (!main_result.read().is_01() || !zext_ln124_2_fu_515_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(main_result.read()) + sc_biguint<32>(zext_ln124_2_fu_515_p1.read()));
}

void aes_main::thread_add_ln130_fu_577_p2() {
    add_ln130_fu_577_p2 = (!main_result.read().is_01() || !zext_ln130_2_fu_574_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(main_result.read()) + sc_biguint<32>(zext_ln130_2_fu_574_p1.read()));
}

void aes_main::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void aes_main::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void aes_main::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void aes_main::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void aes_main::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void aes_main::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void aes_main::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void aes_main::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void aes_main::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void aes_main::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void aes_main::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void aes_main::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void aes_main::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void aes_main::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void aes_main::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void aes_main::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void aes_main::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void aes_main::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void aes_main::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void aes_main::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void aes_main::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void aes_main::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[28];
}

void aes_main::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void aes_main::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void aes_main::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void aes_main::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read()[31];
}

void aes_main::thread_ap_CS_fsm_state33() {
    ap_CS_fsm_state33 = ap_CS_fsm.read()[32];
}

void aes_main::thread_ap_CS_fsm_state34() {
    ap_CS_fsm_state34 = ap_CS_fsm.read()[33];
}

void aes_main::thread_ap_CS_fsm_state35() {
    ap_CS_fsm_state35 = ap_CS_fsm.read()[34];
}

void aes_main::thread_ap_CS_fsm_state36() {
    ap_CS_fsm_state36 = ap_CS_fsm.read()[35];
}

void aes_main::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void aes_main::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void aes_main::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void aes_main::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void aes_main::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void aes_main::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void aes_main::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln129_fu_546_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void aes_main::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void aes_main::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln129_fu_546_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void aes_main::thread_ap_return() {
    ap_return = ap_const_lv32_0;
}

void aes_main::thread_grp_AddRoundKey_InversMi_fu_356_ap_start() {
    grp_AddRoundKey_InversMi_fu_356_ap_start = grp_AddRoundKey_InversMi_fu_356_ap_start_reg.read();
}

void aes_main::thread_grp_AddRoundKey_fu_407_ap_start() {
    grp_AddRoundKey_fu_407_ap_start = grp_AddRoundKey_fu_407_ap_start_reg.read();
}

void aes_main::thread_grp_AddRoundKey_fu_407_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        grp_AddRoundKey_fu_407_n = ap_const_lv32_A;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        grp_AddRoundKey_fu_407_n = i_0_i_reg_313.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
        grp_AddRoundKey_fu_407_n = ap_const_lv32_0;
    } else {
        grp_AddRoundKey_fu_407_n =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void aes_main::thread_grp_ByteSub_ShiftRow_fu_366_ap_start() {
    grp_ByteSub_ShiftRow_fu_366_ap_start = grp_ByteSub_ShiftRow_fu_366_ap_start_reg.read();
}

void aes_main::thread_grp_InversShiftRow_ByteS_fu_375_ap_start() {
    grp_InversShiftRow_ByteS_fu_375_ap_start = grp_InversShiftRow_ByteS_fu_375_ap_start_reg.read();
}

void aes_main::thread_grp_KeySchedule_fu_395_ap_start() {
    grp_KeySchedule_fu_395_ap_start = grp_KeySchedule_fu_395_ap_start_reg.read();
}

void aes_main::thread_grp_MixColumn_AddRoundKe_fu_384_ap_start() {
    grp_MixColumn_AddRoundKe_fu_384_ap_start = grp_MixColumn_AddRoundKe_fu_384_ap_start_reg.read();
}

void aes_main::thread_i_1_fu_487_p2() {
    i_1_fu_487_p2 = (!i_2_i_reg_325.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_2_i_reg_325.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void aes_main::thread_i_2_fu_534_p2() {
    i_2_fu_534_p2 = (!i_0_in_i_reg_336.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<32>(): (sc_biguint<32>(i_0_in_i_reg_336.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFF));
}

void aes_main::thread_i_3_fu_552_p2() {
    i_3_fu_552_p2 = (!i_2_i5_reg_345.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_2_i5_reg_345.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void aes_main::thread_i_fu_475_p2() {
    i_fu_475_p2 = (!i_0_i_reg_313.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(i_0_i_reg_313.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void aes_main::thread_icmp_ln107_fu_469_p2() {
    icmp_ln107_fu_469_p2 = (!i_0_i_reg_313.read().is_01() || !zext_ln107_fu_465_p1.read().is_01())? sc_lv<1>(): (sc_bigint<32>(i_0_i_reg_313.read()) > sc_bigint<32>(zext_ln107_fu_465_p1.read()));
}

void aes_main::thread_icmp_ln113_fu_540_p2() {
    icmp_ln113_fu_540_p2 = (!i_2_fu_534_p2.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): (sc_bigint<32>(i_2_fu_534_p2.read()) > sc_bigint<32>(ap_const_lv32_0));
}

void aes_main::thread_icmp_ln123_fu_481_p2() {
    icmp_ln123_fu_481_p2 = (!i_2_i_reg_325.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_2_i_reg_325.read() == ap_const_lv5_10);
}

void aes_main::thread_icmp_ln124_fu_509_p2() {
    icmp_ln124_fu_509_p2 = (!statemt_q0.read().is_01() || !zext_ln124_1_fu_505_p1.read().is_01())? sc_lv<1>(): sc_lv<1>(statemt_q0.read() != zext_ln124_1_fu_505_p1.read());
}

void aes_main::thread_icmp_ln129_fu_546_p2() {
    icmp_ln129_fu_546_p2 = (!i_2_i5_reg_345.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_2_i5_reg_345.read() == ap_const_lv5_10);
}

void aes_main::thread_icmp_ln130_fu_568_p2() {
    icmp_ln130_fu_568_p2 = (!statemt_q1.read().is_01() || !zext_ln130_1_fu_564_p1.read().is_01())? sc_lv<1>(): sc_lv<1>(statemt_q1.read() != zext_ln130_1_fu_564_p1.read());
}

void aes_main::thread_key_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        key_address0 = ap_const_lv5_E;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        key_address0 = ap_const_lv5_C;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        key_address0 = ap_const_lv5_A;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        key_address0 = ap_const_lv5_8;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        key_address0 = ap_const_lv5_6;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        key_address0 = ap_const_lv5_4;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        key_address0 = ap_const_lv5_2;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        key_address0 = ap_const_lv5_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        key_address0 = grp_KeySchedule_fu_395_key_address0.read();
    } else {
        key_address0 =  (sc_lv<5>) ("XXXXX");
    }
}

void aes_main::thread_key_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        key_address1 = ap_const_lv5_F;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        key_address1 = ap_const_lv5_D;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        key_address1 = ap_const_lv5_B;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        key_address1 = ap_const_lv5_9;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        key_address1 = ap_const_lv5_7;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        key_address1 = ap_const_lv5_5;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        key_address1 = ap_const_lv5_3;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        key_address1 = ap_const_lv5_1;
    } else {
        key_address1 =  (sc_lv<5>) ("XXXXX");
    }
}

void aes_main::thread_key_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        key_ce0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        key_ce0 = grp_KeySchedule_fu_395_key_ce0.read();
    } else {
        key_ce0 = ap_const_logic_0;
    }
}

void aes_main::thread_key_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        key_ce1 = ap_const_logic_1;
    } else {
        key_ce1 = ap_const_logic_0;
    }
}

void aes_main::thread_key_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        key_d0 = ap_const_lv32_4F;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        key_d0 = ap_const_lv32_9;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        key_d0 = ap_const_lv32_AB;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        key_d0 = ap_const_lv32_D2;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        key_d0 = ap_const_lv32_28;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        key_d0 = ap_const_lv32_15;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        key_d0 = ap_const_lv32_2B;
    } else {
        key_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void aes_main::thread_key_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        key_d1 = ap_const_lv32_3C;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        key_d1 = ap_const_lv32_CF;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        key_d1 = ap_const_lv32_88;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        key_d1 = ap_const_lv32_F7;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        key_d1 = ap_const_lv32_A6;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        key_d1 = ap_const_lv32_AE;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        key_d1 = ap_const_lv32_16;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        key_d1 = ap_const_lv32_7E;
    } else {
        key_d1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void aes_main::thread_key_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        key_we0 = ap_const_logic_1;
    } else {
        key_we0 = ap_const_logic_0;
    }
}

void aes_main::thread_key_we1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        key_we1 = ap_const_logic_1;
    } else {
        key_we1 = ap_const_logic_0;
    }
}

void aes_main::thread_out_dec_statemt_address0() {
    out_dec_statemt_address0 =  (sc_lv<4>) (zext_ln130_fu_558_p1.read());
}

void aes_main::thread_out_dec_statemt_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        out_dec_statemt_ce0 = ap_const_logic_1;
    } else {
        out_dec_statemt_ce0 = ap_const_logic_0;
    }
}

void aes_main::thread_out_enc_statemt_address0() {
    out_enc_statemt_address0 =  (sc_lv<4>) (zext_ln124_fu_493_p1.read());
}

void aes_main::thread_out_enc_statemt_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        out_enc_statemt_ce0 = ap_const_logic_1;
    } else {
        out_enc_statemt_ce0 = ap_const_logic_0;
    }
}

void aes_main::thread_statemt_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        statemt_address0 =  (sc_lv<5>) (zext_ln124_fu_493_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        statemt_address0 = ap_const_lv5_E;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        statemt_address0 = ap_const_lv5_C;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        statemt_address0 = ap_const_lv5_A;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        statemt_address0 = ap_const_lv5_8;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        statemt_address0 = ap_const_lv5_6;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        statemt_address0 = ap_const_lv5_4;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        statemt_address0 = ap_const_lv5_2;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        statemt_address0 = ap_const_lv5_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        statemt_address0 = grp_AddRoundKey_fu_407_statemt_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        statemt_address0 = grp_MixColumn_AddRoundKe_fu_384_statemt_address0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()))) {
        statemt_address0 = grp_InversShiftRow_ByteS_fu_375_statemt_address0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        statemt_address0 = grp_ByteSub_ShiftRow_fu_366_statemt_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        statemt_address0 = grp_AddRoundKey_InversMi_fu_356_statemt_address0.read();
    } else {
        statemt_address0 =  (sc_lv<5>) ("XXXXX");
    }
}

void aes_main::thread_statemt_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        statemt_address1 =  (sc_lv<5>) (zext_ln130_fu_558_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        statemt_address1 = ap_const_lv5_F;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        statemt_address1 = ap_const_lv5_D;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        statemt_address1 = ap_const_lv5_B;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        statemt_address1 = ap_const_lv5_9;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        statemt_address1 = ap_const_lv5_7;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        statemt_address1 = ap_const_lv5_5;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        statemt_address1 = ap_const_lv5_3;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        statemt_address1 = ap_const_lv5_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        statemt_address1 = grp_AddRoundKey_fu_407_statemt_address1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        statemt_address1 = grp_MixColumn_AddRoundKe_fu_384_statemt_address1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()))) {
        statemt_address1 = grp_InversShiftRow_ByteS_fu_375_statemt_address1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        statemt_address1 = grp_ByteSub_ShiftRow_fu_366_statemt_address1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        statemt_address1 = grp_AddRoundKey_InversMi_fu_356_statemt_address1.read();
    } else {
        statemt_address1 =  (sc_lv<5>) ("XXXXX");
    }
}

void aes_main::thread_statemt_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(grp_KeySchedule_fu_395_ap_done.read(), ap_const_logic_1)))) {
        statemt_ce0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        statemt_ce0 = grp_AddRoundKey_fu_407_statemt_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        statemt_ce0 = grp_MixColumn_AddRoundKe_fu_384_statemt_ce0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()))) {
        statemt_ce0 = grp_InversShiftRow_ByteS_fu_375_statemt_ce0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        statemt_ce0 = grp_ByteSub_ShiftRow_fu_366_statemt_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        statemt_ce0 = grp_AddRoundKey_InversMi_fu_356_statemt_ce0.read();
    } else {
        statemt_ce0 = ap_const_logic_0;
    }
}

void aes_main::thread_statemt_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(grp_KeySchedule_fu_395_ap_done.read(), ap_const_logic_1)))) {
        statemt_ce1 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        statemt_ce1 = grp_AddRoundKey_fu_407_statemt_ce1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        statemt_ce1 = grp_MixColumn_AddRoundKe_fu_384_statemt_ce1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()))) {
        statemt_ce1 = grp_InversShiftRow_ByteS_fu_375_statemt_ce1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        statemt_ce1 = grp_ByteSub_ShiftRow_fu_366_statemt_ce1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        statemt_ce1 = grp_AddRoundKey_InversMi_fu_356_statemt_ce1.read();
    } else {
        statemt_ce1 = ap_const_logic_0;
    }
}

void aes_main::thread_statemt_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        statemt_d0 = ap_const_lv32_7;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        statemt_d0 = ap_const_lv32_E0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        statemt_d0 = ap_const_lv32_98;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        statemt_d0 = ap_const_lv32_31;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        statemt_d0 = ap_const_lv32_30;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        statemt_d0 = ap_const_lv32_88;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        statemt_d0 = ap_const_lv32_F6;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        statemt_d0 = ap_const_lv32_32;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        statemt_d0 = grp_AddRoundKey_fu_407_statemt_d0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        statemt_d0 = grp_MixColumn_AddRoundKe_fu_384_statemt_d0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()))) {
        statemt_d0 = grp_InversShiftRow_ByteS_fu_375_statemt_d0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        statemt_d0 = grp_ByteSub_ShiftRow_fu_366_statemt_d0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        statemt_d0 = grp_AddRoundKey_InversMi_fu_356_statemt_d0.read();
    } else {
        statemt_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void aes_main::thread_statemt_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        statemt_d1 = ap_const_lv32_34;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        statemt_d1 = ap_const_lv32_37;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        statemt_d1 = ap_const_lv32_A2;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        statemt_d1 = ap_const_lv32_31;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        statemt_d1 = ap_const_lv32_8D;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        statemt_d1 = ap_const_lv32_5A;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        statemt_d1 = ap_const_lv32_A8;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        statemt_d1 = ap_const_lv32_43;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        statemt_d1 = grp_AddRoundKey_fu_407_statemt_d1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        statemt_d1 = grp_MixColumn_AddRoundKe_fu_384_statemt_d1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()))) {
        statemt_d1 = grp_InversShiftRow_ByteS_fu_375_statemt_d1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        statemt_d1 = grp_ByteSub_ShiftRow_fu_366_statemt_d1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        statemt_d1 = grp_AddRoundKey_InversMi_fu_356_statemt_d1.read();
    } else {
        statemt_d1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void aes_main::thread_statemt_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(grp_KeySchedule_fu_395_ap_done.read(), ap_const_logic_1)))) {
        statemt_we0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        statemt_we0 = grp_AddRoundKey_fu_407_statemt_we0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        statemt_we0 = grp_MixColumn_AddRoundKe_fu_384_statemt_we0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()))) {
        statemt_we0 = grp_InversShiftRow_ByteS_fu_375_statemt_we0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        statemt_we0 = grp_ByteSub_ShiftRow_fu_366_statemt_we0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        statemt_we0 = grp_AddRoundKey_InversMi_fu_356_statemt_we0.read();
    } else {
        statemt_we0 = ap_const_logic_0;
    }
}

void aes_main::thread_statemt_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(grp_KeySchedule_fu_395_ap_done.read(), ap_const_logic_1)))) {
        statemt_we1 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        statemt_we1 = grp_AddRoundKey_fu_407_statemt_we1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        statemt_we1 = grp_MixColumn_AddRoundKe_fu_384_statemt_we1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()))) {
        statemt_we1 = grp_InversShiftRow_ByteS_fu_375_statemt_we1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        statemt_we1 = grp_ByteSub_ShiftRow_fu_366_statemt_we1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        statemt_we1 = grp_AddRoundKey_InversMi_fu_356_statemt_we1.read();
    } else {
        statemt_we1 = ap_const_logic_0;
    }
}

void aes_main::thread_trunc_ln107_fu_455_p1() {
    trunc_ln107_fu_455_p1 = round_val.read().range(5-1, 0);
}

void aes_main::thread_word_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        word_address0 = grp_AddRoundKey_fu_407_word_address0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        word_address0 = grp_KeySchedule_fu_395_word_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        word_address0 = grp_MixColumn_AddRoundKe_fu_384_word_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        word_address0 = grp_AddRoundKey_InversMi_fu_356_word_address0.read();
    } else {
        word_address0 =  (sc_lv<9>) ("XXXXXXXXX");
    }
}

void aes_main::thread_word_address1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        word_address1 = grp_AddRoundKey_fu_407_word_address1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        word_address1 = grp_KeySchedule_fu_395_word_address1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        word_address1 = grp_MixColumn_AddRoundKe_fu_384_word_address1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        word_address1 = grp_AddRoundKey_InversMi_fu_356_word_address1.read();
    } else {
        word_address1 =  (sc_lv<9>) ("XXXXXXXXX");
    }
}

void aes_main::thread_word_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        word_ce0 = grp_AddRoundKey_fu_407_word_ce0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        word_ce0 = grp_KeySchedule_fu_395_word_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        word_ce0 = grp_MixColumn_AddRoundKe_fu_384_word_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        word_ce0 = grp_AddRoundKey_InversMi_fu_356_word_ce0.read();
    } else {
        word_ce0 = ap_const_logic_0;
    }
}

void aes_main::thread_word_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        word_ce1 = grp_AddRoundKey_fu_407_word_ce1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        word_ce1 = grp_KeySchedule_fu_395_word_ce1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        word_ce1 = grp_MixColumn_AddRoundKe_fu_384_word_ce1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        word_ce1 = grp_AddRoundKey_InversMi_fu_356_word_ce1.read();
    } else {
        word_ce1 = ap_const_logic_0;
    }
}

void aes_main::thread_word_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        word_we0 = grp_KeySchedule_fu_395_word_we0.read();
    } else {
        word_we0 = ap_const_logic_0;
    }
}

void aes_main::thread_zext_ln107_fu_465_p1() {
    zext_ln107_fu_465_p1 = esl_zext<32,5>(add_ln107_fu_459_p2.read());
}

void aes_main::thread_zext_ln113_fu_530_p1() {
    zext_ln113_fu_530_p1 = esl_zext<32,6>(round_val.read());
}

void aes_main::thread_zext_ln124_1_fu_505_p1() {
    zext_ln124_1_fu_505_p1 = esl_zext<32,8>(out_enc_statemt_q0.read());
}

void aes_main::thread_zext_ln124_2_fu_515_p1() {
    zext_ln124_2_fu_515_p1 = esl_zext<32,1>(icmp_ln124_reg_615.read());
}

void aes_main::thread_zext_ln124_fu_493_p1() {
    zext_ln124_fu_493_p1 = esl_zext<64,5>(i_2_i_reg_325.read());
}

void aes_main::thread_zext_ln130_1_fu_564_p1() {
    zext_ln130_1_fu_564_p1 = esl_zext<32,8>(out_dec_statemt_q0.read());
}

void aes_main::thread_zext_ln130_2_fu_574_p1() {
    zext_ln130_2_fu_574_p1 = esl_zext<32,1>(icmp_ln130_reg_652.read());
}

void aes_main::thread_zext_ln130_fu_558_p1() {
    zext_ln130_fu_558_p1 = esl_zext<64,5>(i_2_i5_reg_345.read());
}

void aes_main::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(grp_KeySchedule_fu_395_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(grp_AddRoundKey_fu_407_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 4096 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(icmp_ln107_fu_469_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state17;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(grp_ByteSub_ShiftRow_fu_366_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(grp_MixColumn_AddRoundKe_fu_384_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        case 65536 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && esl_seteq<1,1,1>(grp_ByteSub_ShiftRow_fu_366_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state18;
            } else {
                ap_NS_fsm = ap_ST_fsm_state17;
            }
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_407_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()))) {
                ap_NS_fsm = ap_ST_fsm_state20;
            } else {
                ap_NS_fsm = ap_ST_fsm_state19;
            }
            break;
        case 524288 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln123_fu_481_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state23;
            } else {
                ap_NS_fsm = ap_ST_fsm_state21;
            }
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 4194304 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && esl_seteq<1,1,1>(grp_KeySchedule_fu_395_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state24;
            } else {
                ap_NS_fsm = ap_ST_fsm_state23;
            }
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_407_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
                ap_NS_fsm = ap_ST_fsm_state26;
            } else {
                ap_NS_fsm = ap_ST_fsm_state25;
            }
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && esl_seteq<1,1,1>(grp_InversShiftRow_ByteS_fu_375_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state28;
            } else {
                ap_NS_fsm = ap_ST_fsm_state27;
            }
            break;
        case 134217728 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln113_fu_540_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state33;
            } else {
                ap_NS_fsm = ap_ST_fsm_state29;
            }
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && esl_seteq<1,1,1>(grp_AddRoundKey_InversMi_fu_356_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state31;
            } else {
                ap_NS_fsm = ap_ST_fsm_state30;
            }
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            if ((esl_seteq<1,1,1>(grp_InversShiftRow_ByteS_fu_375_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()))) {
                ap_NS_fsm = ap_ST_fsm_state28;
            } else {
                ap_NS_fsm = ap_ST_fsm_state32;
            }
            break;
        case 4294967296 : 
            if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_407_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
                ap_NS_fsm = ap_ST_fsm_state34;
            } else {
                ap_NS_fsm = ap_ST_fsm_state33;
            }
            break;
        case 8589934592 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln129_fu_546_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state35;
            }
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<36>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void aes_main::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

