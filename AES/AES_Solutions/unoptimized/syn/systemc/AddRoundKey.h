// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _AddRoundKey_HH_
#define _AddRoundKey_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct AddRoundKey : public sc_module {
    // Port declarations 23
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<5> > statemt_address0;
    sc_out< sc_logic > statemt_ce0;
    sc_out< sc_logic > statemt_we0;
    sc_out< sc_lv<32> > statemt_d0;
    sc_in< sc_lv<32> > statemt_q0;
    sc_out< sc_lv<5> > statemt_address1;
    sc_out< sc_logic > statemt_ce1;
    sc_out< sc_logic > statemt_we1;
    sc_out< sc_lv<32> > statemt_d1;
    sc_in< sc_lv<32> > statemt_q1;
    sc_in< sc_lv<32> > n;
    sc_out< sc_lv<9> > word_address0;
    sc_out< sc_logic > word_ce0;
    sc_in< sc_lv<32> > word_q0;
    sc_out< sc_lv<9> > word_address1;
    sc_out< sc_logic > word_ce1;
    sc_in< sc_lv<32> > word_q1;


    // Module declarations
    AddRoundKey(sc_module_name name);
    SC_HAS_PROCESS(AddRoundKey);

    ~AddRoundKey();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > grp_fu_137_p2;
    sc_signal< sc_lv<32> > reg_149;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > grp_fu_143_p2;
    sc_signal< sc_lv<32> > reg_154;
    sc_signal< sc_lv<32> > shl_ln536_fu_159_p2;
    sc_signal< sc_lv<32> > shl_ln536_reg_274;
    sc_signal< sc_lv<3> > j_fu_175_p2;
    sc_signal< sc_lv<3> > j_reg_282;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<10> > trunc_ln536_fu_191_p1;
    sc_signal< sc_lv<10> > trunc_ln536_reg_287;
    sc_signal< sc_lv<1> > icmp_ln534_fu_169_p2;
    sc_signal< sc_lv<4> > shl_ln_fu_210_p3;
    sc_signal< sc_lv<4> > shl_ln_reg_303;
    sc_signal< sc_lv<5> > statemt_addr_reg_309;
    sc_signal< sc_lv<5> > statemt_addr_157_reg_314;
    sc_signal< sc_lv<5> > statemt_addr_158_reg_329;
    sc_signal< sc_lv<5> > statemt_addr_159_reg_334;
    sc_signal< sc_lv<3> > j_0_reg_126;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<64> > sext_ln536_fu_186_p1;
    sc_signal< sc_lv<64> > sext_ln537_fu_201_p1;
    sc_signal< sc_lv<64> > zext_ln536_fu_218_p1;
    sc_signal< sc_lv<64> > zext_ln537_fu_229_p1;
    sc_signal< sc_lv<64> > sext_ln538_fu_239_p1;
    sc_signal< sc_lv<64> > sext_ln539_fu_249_p1;
    sc_signal< sc_lv<64> > zext_ln538_fu_259_p1;
    sc_signal< sc_lv<64> > zext_ln539_fu_269_p1;
    sc_signal< sc_lv<32> > zext_ln534_fu_165_p1;
    sc_signal< sc_lv<32> > add_ln536_fu_181_p2;
    sc_signal< sc_lv<10> > add_ln537_fu_195_p2;
    sc_signal< sc_lv<2> > trunc_ln536_1_fu_206_p1;
    sc_signal< sc_lv<4> > or_ln537_fu_223_p2;
    sc_signal< sc_lv<10> > add_ln538_fu_234_p2;
    sc_signal< sc_lv<10> > add_ln539_fu_244_p2;
    sc_signal< sc_lv<4> > or_ln538_fu_254_p2;
    sc_signal< sc_lv<4> > or_ln539_fu_264_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<10> ap_const_lv10_78;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<10> ap_const_lv10_F0;
    static const sc_lv<10> ap_const_lv10_168;
    static const sc_lv<4> ap_const_lv4_2;
    static const sc_lv<4> ap_const_lv4_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln536_fu_181_p2();
    void thread_add_ln537_fu_195_p2();
    void thread_add_ln538_fu_234_p2();
    void thread_add_ln539_fu_244_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_grp_fu_137_p2();
    void thread_grp_fu_143_p2();
    void thread_icmp_ln534_fu_169_p2();
    void thread_j_fu_175_p2();
    void thread_or_ln537_fu_223_p2();
    void thread_or_ln538_fu_254_p2();
    void thread_or_ln539_fu_264_p2();
    void thread_sext_ln536_fu_186_p1();
    void thread_sext_ln537_fu_201_p1();
    void thread_sext_ln538_fu_239_p1();
    void thread_sext_ln539_fu_249_p1();
    void thread_shl_ln536_fu_159_p2();
    void thread_shl_ln_fu_210_p3();
    void thread_statemt_address0();
    void thread_statemt_address1();
    void thread_statemt_ce0();
    void thread_statemt_ce1();
    void thread_statemt_d0();
    void thread_statemt_d1();
    void thread_statemt_we0();
    void thread_statemt_we1();
    void thread_trunc_ln536_1_fu_206_p1();
    void thread_trunc_ln536_fu_191_p1();
    void thread_word_address0();
    void thread_word_address1();
    void thread_word_ce0();
    void thread_word_ce1();
    void thread_zext_ln534_fu_165_p1();
    void thread_zext_ln536_fu_218_p1();
    void thread_zext_ln537_fu_229_p1();
    void thread_zext_ln538_fu_259_p1();
    void thread_zext_ln539_fu_269_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
