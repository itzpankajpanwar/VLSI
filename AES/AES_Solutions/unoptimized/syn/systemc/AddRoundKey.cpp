// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "AddRoundKey.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic AddRoundKey::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic AddRoundKey::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> AddRoundKey::ap_ST_fsm_state1 = "1";
const sc_lv<5> AddRoundKey::ap_ST_fsm_state2 = "10";
const sc_lv<5> AddRoundKey::ap_ST_fsm_state3 = "100";
const sc_lv<5> AddRoundKey::ap_ST_fsm_state4 = "1000";
const sc_lv<5> AddRoundKey::ap_ST_fsm_state5 = "10000";
const sc_lv<32> AddRoundKey::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> AddRoundKey::ap_const_lv32_2 = "10";
const sc_lv<32> AddRoundKey::ap_const_lv32_3 = "11";
const sc_lv<32> AddRoundKey::ap_const_lv32_1 = "1";
const sc_lv<1> AddRoundKey::ap_const_lv1_0 = "0";
const sc_lv<3> AddRoundKey::ap_const_lv3_0 = "000";
const sc_lv<32> AddRoundKey::ap_const_lv32_4 = "100";
const sc_lv<3> AddRoundKey::ap_const_lv3_4 = "100";
const sc_lv<3> AddRoundKey::ap_const_lv3_1 = "1";
const sc_lv<10> AddRoundKey::ap_const_lv10_78 = "1111000";
const sc_lv<2> AddRoundKey::ap_const_lv2_0 = "00";
const sc_lv<4> AddRoundKey::ap_const_lv4_1 = "1";
const sc_lv<10> AddRoundKey::ap_const_lv10_F0 = "11110000";
const sc_lv<10> AddRoundKey::ap_const_lv10_168 = "101101000";
const sc_lv<4> AddRoundKey::ap_const_lv4_2 = "10";
const sc_lv<4> AddRoundKey::ap_const_lv4_3 = "11";
const sc_lv<1> AddRoundKey::ap_const_lv1_1 = "1";
const bool AddRoundKey::ap_const_boolean_1 = true;

AddRoundKey::AddRoundKey(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln536_fu_181_p2);
    sensitive << ( shl_ln536_reg_274 );
    sensitive << ( zext_ln534_fu_165_p1 );

    SC_METHOD(thread_add_ln537_fu_195_p2);
    sensitive << ( trunc_ln536_fu_191_p1 );

    SC_METHOD(thread_add_ln538_fu_234_p2);
    sensitive << ( trunc_ln536_reg_287 );

    SC_METHOD(thread_add_ln539_fu_244_p2);
    sensitive << ( trunc_ln536_reg_287 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln534_fu_169_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln534_fu_169_p2 );

    SC_METHOD(thread_grp_fu_137_p2);
    sensitive << ( statemt_q0 );
    sensitive << ( word_q0 );

    SC_METHOD(thread_grp_fu_143_p2);
    sensitive << ( statemt_q1 );
    sensitive << ( word_q1 );

    SC_METHOD(thread_icmp_ln534_fu_169_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( j_0_reg_126 );

    SC_METHOD(thread_j_fu_175_p2);
    sensitive << ( j_0_reg_126 );

    SC_METHOD(thread_or_ln537_fu_223_p2);
    sensitive << ( shl_ln_fu_210_p3 );

    SC_METHOD(thread_or_ln538_fu_254_p2);
    sensitive << ( shl_ln_reg_303 );

    SC_METHOD(thread_or_ln539_fu_264_p2);
    sensitive << ( shl_ln_reg_303 );

    SC_METHOD(thread_sext_ln536_fu_186_p1);
    sensitive << ( add_ln536_fu_181_p2 );

    SC_METHOD(thread_sext_ln537_fu_201_p1);
    sensitive << ( add_ln537_fu_195_p2 );

    SC_METHOD(thread_sext_ln538_fu_239_p1);
    sensitive << ( add_ln538_fu_234_p2 );

    SC_METHOD(thread_sext_ln539_fu_249_p1);
    sensitive << ( add_ln539_fu_244_p2 );

    SC_METHOD(thread_shl_ln536_fu_159_p2);
    sensitive << ( n );

    SC_METHOD(thread_shl_ln_fu_210_p3);
    sensitive << ( trunc_ln536_1_fu_206_p1 );

    SC_METHOD(thread_statemt_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( statemt_addr_reg_309 );
    sensitive << ( statemt_addr_158_reg_329 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( zext_ln536_fu_218_p1 );
    sensitive << ( zext_ln538_fu_259_p1 );

    SC_METHOD(thread_statemt_address1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( statemt_addr_157_reg_314 );
    sensitive << ( statemt_addr_159_reg_334 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( zext_ln537_fu_229_p1 );
    sensitive << ( zext_ln539_fu_269_p1 );

    SC_METHOD(thread_statemt_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_statemt_ce1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_statemt_d0);
    sensitive << ( reg_149 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_statemt_d1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( reg_154 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_statemt_we0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_statemt_we1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_trunc_ln536_1_fu_206_p1);
    sensitive << ( j_0_reg_126 );

    SC_METHOD(thread_trunc_ln536_fu_191_p1);
    sensitive << ( add_ln536_fu_181_p2 );

    SC_METHOD(thread_word_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( sext_ln536_fu_186_p1 );
    sensitive << ( sext_ln538_fu_239_p1 );

    SC_METHOD(thread_word_address1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( sext_ln537_fu_201_p1 );
    sensitive << ( sext_ln539_fu_249_p1 );

    SC_METHOD(thread_word_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_word_ce1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_zext_ln534_fu_165_p1);
    sensitive << ( j_0_reg_126 );

    SC_METHOD(thread_zext_ln536_fu_218_p1);
    sensitive << ( shl_ln_fu_210_p3 );

    SC_METHOD(thread_zext_ln537_fu_229_p1);
    sensitive << ( or_ln537_fu_223_p2 );

    SC_METHOD(thread_zext_ln538_fu_259_p1);
    sensitive << ( or_ln538_fu_254_p2 );

    SC_METHOD(thread_zext_ln539_fu_269_p1);
    sensitive << ( or_ln539_fu_264_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln534_fu_169_p2 );

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "AddRoundKey_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, statemt_address0, "(port)statemt_address0");
    sc_trace(mVcdFile, statemt_ce0, "(port)statemt_ce0");
    sc_trace(mVcdFile, statemt_we0, "(port)statemt_we0");
    sc_trace(mVcdFile, statemt_d0, "(port)statemt_d0");
    sc_trace(mVcdFile, statemt_q0, "(port)statemt_q0");
    sc_trace(mVcdFile, statemt_address1, "(port)statemt_address1");
    sc_trace(mVcdFile, statemt_ce1, "(port)statemt_ce1");
    sc_trace(mVcdFile, statemt_we1, "(port)statemt_we1");
    sc_trace(mVcdFile, statemt_d1, "(port)statemt_d1");
    sc_trace(mVcdFile, statemt_q1, "(port)statemt_q1");
    sc_trace(mVcdFile, n, "(port)n");
    sc_trace(mVcdFile, word_address0, "(port)word_address0");
    sc_trace(mVcdFile, word_ce0, "(port)word_ce0");
    sc_trace(mVcdFile, word_q0, "(port)word_q0");
    sc_trace(mVcdFile, word_address1, "(port)word_address1");
    sc_trace(mVcdFile, word_ce1, "(port)word_ce1");
    sc_trace(mVcdFile, word_q1, "(port)word_q1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_fu_137_p2, "grp_fu_137_p2");
    sc_trace(mVcdFile, reg_149, "reg_149");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_fu_143_p2, "grp_fu_143_p2");
    sc_trace(mVcdFile, reg_154, "reg_154");
    sc_trace(mVcdFile, shl_ln536_fu_159_p2, "shl_ln536_fu_159_p2");
    sc_trace(mVcdFile, shl_ln536_reg_274, "shl_ln536_reg_274");
    sc_trace(mVcdFile, j_fu_175_p2, "j_fu_175_p2");
    sc_trace(mVcdFile, j_reg_282, "j_reg_282");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, trunc_ln536_fu_191_p1, "trunc_ln536_fu_191_p1");
    sc_trace(mVcdFile, trunc_ln536_reg_287, "trunc_ln536_reg_287");
    sc_trace(mVcdFile, icmp_ln534_fu_169_p2, "icmp_ln534_fu_169_p2");
    sc_trace(mVcdFile, shl_ln_fu_210_p3, "shl_ln_fu_210_p3");
    sc_trace(mVcdFile, shl_ln_reg_303, "shl_ln_reg_303");
    sc_trace(mVcdFile, statemt_addr_reg_309, "statemt_addr_reg_309");
    sc_trace(mVcdFile, statemt_addr_157_reg_314, "statemt_addr_157_reg_314");
    sc_trace(mVcdFile, statemt_addr_158_reg_329, "statemt_addr_158_reg_329");
    sc_trace(mVcdFile, statemt_addr_159_reg_334, "statemt_addr_159_reg_334");
    sc_trace(mVcdFile, j_0_reg_126, "j_0_reg_126");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, sext_ln536_fu_186_p1, "sext_ln536_fu_186_p1");
    sc_trace(mVcdFile, sext_ln537_fu_201_p1, "sext_ln537_fu_201_p1");
    sc_trace(mVcdFile, zext_ln536_fu_218_p1, "zext_ln536_fu_218_p1");
    sc_trace(mVcdFile, zext_ln537_fu_229_p1, "zext_ln537_fu_229_p1");
    sc_trace(mVcdFile, sext_ln538_fu_239_p1, "sext_ln538_fu_239_p1");
    sc_trace(mVcdFile, sext_ln539_fu_249_p1, "sext_ln539_fu_249_p1");
    sc_trace(mVcdFile, zext_ln538_fu_259_p1, "zext_ln538_fu_259_p1");
    sc_trace(mVcdFile, zext_ln539_fu_269_p1, "zext_ln539_fu_269_p1");
    sc_trace(mVcdFile, zext_ln534_fu_165_p1, "zext_ln534_fu_165_p1");
    sc_trace(mVcdFile, add_ln536_fu_181_p2, "add_ln536_fu_181_p2");
    sc_trace(mVcdFile, add_ln537_fu_195_p2, "add_ln537_fu_195_p2");
    sc_trace(mVcdFile, trunc_ln536_1_fu_206_p1, "trunc_ln536_1_fu_206_p1");
    sc_trace(mVcdFile, or_ln537_fu_223_p2, "or_ln537_fu_223_p2");
    sc_trace(mVcdFile, add_ln538_fu_234_p2, "add_ln538_fu_234_p2");
    sc_trace(mVcdFile, add_ln539_fu_244_p2, "add_ln539_fu_244_p2");
    sc_trace(mVcdFile, or_ln538_fu_254_p2, "or_ln538_fu_254_p2");
    sc_trace(mVcdFile, or_ln539_fu_264_p2, "or_ln539_fu_264_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

AddRoundKey::~AddRoundKey() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void AddRoundKey::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        j_0_reg_126 = j_reg_282.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        j_0_reg_126 = ap_const_lv3_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        j_reg_282 = j_fu_175_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        reg_149 = grp_fu_137_p2.read();
        reg_154 = grp_fu_143_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        shl_ln536_reg_274 = shl_ln536_fu_159_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln534_fu_169_p2.read(), ap_const_lv1_0))) {
        shl_ln_reg_303 = shl_ln_fu_210_p3.read();
        statemt_addr_157_reg_314 =  (sc_lv<5>) (zext_ln537_fu_229_p1.read());
        statemt_addr_reg_309 =  (sc_lv<5>) (zext_ln536_fu_218_p1.read());
        trunc_ln536_reg_287 = trunc_ln536_fu_191_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        statemt_addr_158_reg_329 =  (sc_lv<5>) (zext_ln538_fu_259_p1.read());
        statemt_addr_159_reg_334 =  (sc_lv<5>) (zext_ln539_fu_269_p1.read());
    }
}

void AddRoundKey::thread_add_ln536_fu_181_p2() {
    add_ln536_fu_181_p2 = (!zext_ln534_fu_165_p1.read().is_01() || !shl_ln536_reg_274.read().is_01())? sc_lv<32>(): (sc_biguint<32>(zext_ln534_fu_165_p1.read()) + sc_biguint<32>(shl_ln536_reg_274.read()));
}

void AddRoundKey::thread_add_ln537_fu_195_p2() {
    add_ln537_fu_195_p2 = (!ap_const_lv10_78.is_01() || !trunc_ln536_fu_191_p1.read().is_01())? sc_lv<10>(): (sc_biguint<10>(ap_const_lv10_78) + sc_biguint<10>(trunc_ln536_fu_191_p1.read()));
}

void AddRoundKey::thread_add_ln538_fu_234_p2() {
    add_ln538_fu_234_p2 = (!ap_const_lv10_F0.is_01() || !trunc_ln536_reg_287.read().is_01())? sc_lv<10>(): (sc_biguint<10>(ap_const_lv10_F0) + sc_biguint<10>(trunc_ln536_reg_287.read()));
}

void AddRoundKey::thread_add_ln539_fu_244_p2() {
    add_ln539_fu_244_p2 = (!ap_const_lv10_168.is_01() || !trunc_ln536_reg_287.read().is_01())? sc_lv<10>(): (sc_biguint<10>(ap_const_lv10_168) + sc_biguint<10>(trunc_ln536_reg_287.read()));
}

void AddRoundKey::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void AddRoundKey::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void AddRoundKey::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void AddRoundKey::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void AddRoundKey::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void AddRoundKey::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln534_fu_169_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void AddRoundKey::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void AddRoundKey::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln534_fu_169_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void AddRoundKey::thread_grp_fu_137_p2() {
    grp_fu_137_p2 = (statemt_q0.read() ^ word_q0.read());
}

void AddRoundKey::thread_grp_fu_143_p2() {
    grp_fu_143_p2 = (statemt_q1.read() ^ word_q1.read());
}

void AddRoundKey::thread_icmp_ln534_fu_169_p2() {
    icmp_ln534_fu_169_p2 = (!j_0_reg_126.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_126.read() == ap_const_lv3_4);
}

void AddRoundKey::thread_j_fu_175_p2() {
    j_fu_175_p2 = (!j_0_reg_126.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(j_0_reg_126.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void AddRoundKey::thread_or_ln537_fu_223_p2() {
    or_ln537_fu_223_p2 = (shl_ln_fu_210_p3.read() | ap_const_lv4_1);
}

void AddRoundKey::thread_or_ln538_fu_254_p2() {
    or_ln538_fu_254_p2 = (shl_ln_reg_303.read() | ap_const_lv4_2);
}

void AddRoundKey::thread_or_ln539_fu_264_p2() {
    or_ln539_fu_264_p2 = (shl_ln_reg_303.read() | ap_const_lv4_3);
}

void AddRoundKey::thread_sext_ln536_fu_186_p1() {
    sext_ln536_fu_186_p1 = esl_sext<64,32>(add_ln536_fu_181_p2.read());
}

void AddRoundKey::thread_sext_ln537_fu_201_p1() {
    sext_ln537_fu_201_p1 = esl_sext<64,10>(add_ln537_fu_195_p2.read());
}

void AddRoundKey::thread_sext_ln538_fu_239_p1() {
    sext_ln538_fu_239_p1 = esl_sext<64,10>(add_ln538_fu_234_p2.read());
}

void AddRoundKey::thread_sext_ln539_fu_249_p1() {
    sext_ln539_fu_249_p1 = esl_sext<64,10>(add_ln539_fu_244_p2.read());
}

void AddRoundKey::thread_shl_ln536_fu_159_p2() {
    shl_ln536_fu_159_p2 = (!ap_const_lv32_2.is_01())? sc_lv<32>(): n.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void AddRoundKey::thread_shl_ln_fu_210_p3() {
    shl_ln_fu_210_p3 = esl_concat<2,2>(trunc_ln536_1_fu_206_p1.read(), ap_const_lv2_0);
}

void AddRoundKey::thread_statemt_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        statemt_address0 = statemt_addr_158_reg_329.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        statemt_address0 = statemt_addr_reg_309.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        statemt_address0 =  (sc_lv<5>) (zext_ln538_fu_259_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        statemt_address0 =  (sc_lv<5>) (zext_ln536_fu_218_p1.read());
    } else {
        statemt_address0 = "XXXXX";
    }
}

void AddRoundKey::thread_statemt_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        statemt_address1 = statemt_addr_159_reg_334.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        statemt_address1 = statemt_addr_157_reg_314.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        statemt_address1 =  (sc_lv<5>) (zext_ln539_fu_269_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        statemt_address1 =  (sc_lv<5>) (zext_ln537_fu_229_p1.read());
    } else {
        statemt_address1 = "XXXXX";
    }
}

void AddRoundKey::thread_statemt_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        statemt_ce0 = ap_const_logic_1;
    } else {
        statemt_ce0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_statemt_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        statemt_ce1 = ap_const_logic_1;
    } else {
        statemt_ce1 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_statemt_d0() {
    statemt_d0 = reg_149.read();
}

void AddRoundKey::thread_statemt_d1() {
    statemt_d1 = reg_154.read();
}

void AddRoundKey::thread_statemt_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        statemt_we0 = ap_const_logic_1;
    } else {
        statemt_we0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_statemt_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        statemt_we1 = ap_const_logic_1;
    } else {
        statemt_we1 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_trunc_ln536_1_fu_206_p1() {
    trunc_ln536_1_fu_206_p1 = j_0_reg_126.read().range(2-1, 0);
}

void AddRoundKey::thread_trunc_ln536_fu_191_p1() {
    trunc_ln536_fu_191_p1 = add_ln536_fu_181_p2.read().range(10-1, 0);
}

void AddRoundKey::thread_word_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        word_address0 =  (sc_lv<9>) (sext_ln538_fu_239_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        word_address0 =  (sc_lv<9>) (sext_ln536_fu_186_p1.read());
    } else {
        word_address0 =  (sc_lv<9>) ("XXXXXXXXX");
    }
}

void AddRoundKey::thread_word_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        word_address1 =  (sc_lv<9>) (sext_ln539_fu_249_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        word_address1 =  (sc_lv<9>) (sext_ln537_fu_201_p1.read());
    } else {
        word_address1 =  (sc_lv<9>) ("XXXXXXXXX");
    }
}

void AddRoundKey::thread_word_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        word_ce0 = ap_const_logic_1;
    } else {
        word_ce0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_word_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        word_ce1 = ap_const_logic_1;
    } else {
        word_ce1 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_zext_ln534_fu_165_p1() {
    zext_ln534_fu_165_p1 = esl_zext<32,3>(j_0_reg_126.read());
}

void AddRoundKey::thread_zext_ln536_fu_218_p1() {
    zext_ln536_fu_218_p1 = esl_zext<64,4>(shl_ln_fu_210_p3.read());
}

void AddRoundKey::thread_zext_ln537_fu_229_p1() {
    zext_ln537_fu_229_p1 = esl_zext<64,4>(or_ln537_fu_223_p2.read());
}

void AddRoundKey::thread_zext_ln538_fu_259_p1() {
    zext_ln538_fu_259_p1 = esl_zext<64,4>(or_ln538_fu_254_p2.read());
}

void AddRoundKey::thread_zext_ln539_fu_269_p1() {
    zext_ln539_fu_269_p1 = esl_zext<64,4>(or_ln539_fu_264_p2.read());
}

void AddRoundKey::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln534_fu_169_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

}

