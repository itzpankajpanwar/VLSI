-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes_main is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of aes_main is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "aes_main,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.523000,HLS_SYN_LAT=721,HLS_SYN_TPT=none,HLS_SYN_MEM=22,HLS_SYN_DSP=0,HLS_SYN_FF=9976,HLS_SYN_LUT=72727,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv32_AE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_D2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010010";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv32_A6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_AB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101011";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_F7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110111";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_F6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011000";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_8D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001101";
    constant ap_const_lv32_A2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100010";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal word_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal word_0_ce0 : STD_LOGIC;
    signal word_0_we0 : STD_LOGIC;
    signal word_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal word_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal word_0_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal word_0_ce1 : STD_LOGIC;
    signal word_0_we1 : STD_LOGIC;
    signal word_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal word_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal word_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal word_1_ce0 : STD_LOGIC;
    signal word_1_we0 : STD_LOGIC;
    signal word_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal word_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal word_1_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal word_1_ce1 : STD_LOGIC;
    signal word_1_we1 : STD_LOGIC;
    signal word_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal word_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal main_result : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal statemt_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal statemt_0_ce0 : STD_LOGIC;
    signal statemt_0_we0 : STD_LOGIC;
    signal statemt_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal statemt_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal statemt_0_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal statemt_0_ce1 : STD_LOGIC;
    signal statemt_0_we1 : STD_LOGIC;
    signal statemt_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal statemt_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal statemt_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal statemt_1_ce0 : STD_LOGIC;
    signal statemt_1_we0 : STD_LOGIC;
    signal statemt_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal statemt_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal statemt_1_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal statemt_1_ce1 : STD_LOGIC;
    signal statemt_1_we1 : STD_LOGIC;
    signal statemt_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal statemt_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal key_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal key_0_ce0 : STD_LOGIC;
    signal key_0_we0 : STD_LOGIC;
    signal key_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal key_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal key_0_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal key_0_ce1 : STD_LOGIC;
    signal key_0_we1 : STD_LOGIC;
    signal key_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal key_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decrypt_fu_242_ap_start : STD_LOGIC;
    signal grp_decrypt_fu_242_ap_done : STD_LOGIC;
    signal grp_decrypt_fu_242_ap_idle : STD_LOGIC;
    signal grp_decrypt_fu_242_ap_ready : STD_LOGIC;
    signal grp_decrypt_fu_242_statemt_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_decrypt_fu_242_statemt_0_ce0 : STD_LOGIC;
    signal grp_decrypt_fu_242_statemt_0_we0 : STD_LOGIC;
    signal grp_decrypt_fu_242_statemt_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decrypt_fu_242_statemt_0_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_decrypt_fu_242_statemt_0_ce1 : STD_LOGIC;
    signal grp_decrypt_fu_242_statemt_0_we1 : STD_LOGIC;
    signal grp_decrypt_fu_242_statemt_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decrypt_fu_242_statemt_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_decrypt_fu_242_statemt_1_ce0 : STD_LOGIC;
    signal grp_decrypt_fu_242_statemt_1_we0 : STD_LOGIC;
    signal grp_decrypt_fu_242_statemt_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decrypt_fu_242_statemt_1_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_decrypt_fu_242_statemt_1_ce1 : STD_LOGIC;
    signal grp_decrypt_fu_242_statemt_1_we1 : STD_LOGIC;
    signal grp_decrypt_fu_242_statemt_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decrypt_fu_242_key_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_decrypt_fu_242_key_0_ce0 : STD_LOGIC;
    signal grp_decrypt_fu_242_key_0_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_decrypt_fu_242_key_0_ce1 : STD_LOGIC;
    signal grp_decrypt_fu_242_round_val : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_decrypt_fu_242_round_val_ap_vld : STD_LOGIC;
    signal grp_decrypt_fu_242_word_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_decrypt_fu_242_word_0_ce0 : STD_LOGIC;
    signal grp_decrypt_fu_242_word_0_we0 : STD_LOGIC;
    signal grp_decrypt_fu_242_word_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decrypt_fu_242_word_0_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_decrypt_fu_242_word_0_ce1 : STD_LOGIC;
    signal grp_decrypt_fu_242_word_0_we1 : STD_LOGIC;
    signal grp_decrypt_fu_242_word_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decrypt_fu_242_word_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_decrypt_fu_242_word_1_ce0 : STD_LOGIC;
    signal grp_decrypt_fu_242_word_1_we0 : STD_LOGIC;
    signal grp_decrypt_fu_242_word_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decrypt_fu_242_word_1_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_decrypt_fu_242_word_1_ce1 : STD_LOGIC;
    signal grp_decrypt_fu_242_word_1_we1 : STD_LOGIC;
    signal grp_decrypt_fu_242_word_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decrypt_fu_242_main_result_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decrypt_fu_242_main_result_o_ap_vld : STD_LOGIC;
    signal grp_encrypt_fu_264_ap_start : STD_LOGIC;
    signal grp_encrypt_fu_264_ap_done : STD_LOGIC;
    signal grp_encrypt_fu_264_ap_idle : STD_LOGIC;
    signal grp_encrypt_fu_264_ap_ready : STD_LOGIC;
    signal grp_encrypt_fu_264_statemt_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_encrypt_fu_264_statemt_0_ce0 : STD_LOGIC;
    signal grp_encrypt_fu_264_statemt_0_we0 : STD_LOGIC;
    signal grp_encrypt_fu_264_statemt_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encrypt_fu_264_statemt_0_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_encrypt_fu_264_statemt_0_ce1 : STD_LOGIC;
    signal grp_encrypt_fu_264_statemt_0_we1 : STD_LOGIC;
    signal grp_encrypt_fu_264_statemt_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encrypt_fu_264_statemt_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_encrypt_fu_264_statemt_1_ce0 : STD_LOGIC;
    signal grp_encrypt_fu_264_statemt_1_we0 : STD_LOGIC;
    signal grp_encrypt_fu_264_statemt_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encrypt_fu_264_statemt_1_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_encrypt_fu_264_statemt_1_ce1 : STD_LOGIC;
    signal grp_encrypt_fu_264_statemt_1_we1 : STD_LOGIC;
    signal grp_encrypt_fu_264_statemt_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encrypt_fu_264_key_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_encrypt_fu_264_key_0_ce0 : STD_LOGIC;
    signal grp_encrypt_fu_264_key_0_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_encrypt_fu_264_key_0_ce1 : STD_LOGIC;
    signal grp_encrypt_fu_264_round_val : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_encrypt_fu_264_round_val_ap_vld : STD_LOGIC;
    signal grp_encrypt_fu_264_word_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_encrypt_fu_264_word_0_ce0 : STD_LOGIC;
    signal grp_encrypt_fu_264_word_0_we0 : STD_LOGIC;
    signal grp_encrypt_fu_264_word_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encrypt_fu_264_word_0_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_encrypt_fu_264_word_0_ce1 : STD_LOGIC;
    signal grp_encrypt_fu_264_word_0_we1 : STD_LOGIC;
    signal grp_encrypt_fu_264_word_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encrypt_fu_264_word_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_encrypt_fu_264_word_1_ce0 : STD_LOGIC;
    signal grp_encrypt_fu_264_word_1_we0 : STD_LOGIC;
    signal grp_encrypt_fu_264_word_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encrypt_fu_264_word_1_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_encrypt_fu_264_word_1_ce1 : STD_LOGIC;
    signal grp_encrypt_fu_264_word_1_we1 : STD_LOGIC;
    signal grp_encrypt_fu_264_word_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encrypt_fu_264_main_result_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encrypt_fu_264_main_result_o_ap_vld : STD_LOGIC;
    signal grp_decrypt_fu_242_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_encrypt_fu_264_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component decrypt IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        statemt_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        statemt_0_ce0 : OUT STD_LOGIC;
        statemt_0_we0 : OUT STD_LOGIC;
        statemt_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        statemt_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        statemt_0_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        statemt_0_ce1 : OUT STD_LOGIC;
        statemt_0_we1 : OUT STD_LOGIC;
        statemt_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        statemt_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        statemt_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        statemt_1_ce0 : OUT STD_LOGIC;
        statemt_1_we0 : OUT STD_LOGIC;
        statemt_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        statemt_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        statemt_1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        statemt_1_ce1 : OUT STD_LOGIC;
        statemt_1_we1 : OUT STD_LOGIC;
        statemt_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        statemt_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        key_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        key_0_ce0 : OUT STD_LOGIC;
        key_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        key_0_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        key_0_ce1 : OUT STD_LOGIC;
        key_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        round_val : OUT STD_LOGIC_VECTOR (4 downto 0);
        round_val_ap_vld : OUT STD_LOGIC;
        word_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        word_0_ce0 : OUT STD_LOGIC;
        word_0_we0 : OUT STD_LOGIC;
        word_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        word_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        word_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        word_0_ce1 : OUT STD_LOGIC;
        word_0_we1 : OUT STD_LOGIC;
        word_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        word_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        word_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        word_1_ce0 : OUT STD_LOGIC;
        word_1_we0 : OUT STD_LOGIC;
        word_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        word_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        word_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        word_1_ce1 : OUT STD_LOGIC;
        word_1_we1 : OUT STD_LOGIC;
        word_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        word_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        main_result_i : IN STD_LOGIC_VECTOR (31 downto 0);
        main_result_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        main_result_o_ap_vld : OUT STD_LOGIC );
    end component;


    component encrypt IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        statemt_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        statemt_0_ce0 : OUT STD_LOGIC;
        statemt_0_we0 : OUT STD_LOGIC;
        statemt_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        statemt_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        statemt_0_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        statemt_0_ce1 : OUT STD_LOGIC;
        statemt_0_we1 : OUT STD_LOGIC;
        statemt_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        statemt_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        statemt_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        statemt_1_ce0 : OUT STD_LOGIC;
        statemt_1_we0 : OUT STD_LOGIC;
        statemt_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        statemt_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        statemt_1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        statemt_1_ce1 : OUT STD_LOGIC;
        statemt_1_we1 : OUT STD_LOGIC;
        statemt_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        statemt_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        key_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        key_0_ce0 : OUT STD_LOGIC;
        key_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        key_0_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        key_0_ce1 : OUT STD_LOGIC;
        key_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        round_val : OUT STD_LOGIC_VECTOR (4 downto 0);
        round_val_ap_vld : OUT STD_LOGIC;
        word_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        word_0_ce0 : OUT STD_LOGIC;
        word_0_we0 : OUT STD_LOGIC;
        word_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        word_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        word_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        word_0_ce1 : OUT STD_LOGIC;
        word_0_we1 : OUT STD_LOGIC;
        word_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        word_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        word_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        word_1_ce0 : OUT STD_LOGIC;
        word_1_we0 : OUT STD_LOGIC;
        word_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        word_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        word_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        word_1_ce1 : OUT STD_LOGIC;
        word_1_we1 : OUT STD_LOGIC;
        word_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        word_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        main_result_i : IN STD_LOGIC_VECTOR (31 downto 0);
        main_result_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        main_result_o_ap_vld : OUT STD_LOGIC );
    end component;


    component aes_main_word_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component aes_main_statemt_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    word_0_U : component aes_main_word_0
    generic map (
        DataWidth => 32,
        AddressRange => 240,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => word_0_address0,
        ce0 => word_0_ce0,
        we0 => word_0_we0,
        d0 => word_0_d0,
        q0 => word_0_q0,
        address1 => word_0_address1,
        ce1 => word_0_ce1,
        we1 => word_0_we1,
        d1 => word_0_d1,
        q1 => word_0_q1);

    word_1_U : component aes_main_word_0
    generic map (
        DataWidth => 32,
        AddressRange => 240,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => word_1_address0,
        ce0 => word_1_ce0,
        we0 => word_1_we0,
        d0 => word_1_d0,
        q0 => word_1_q0,
        address1 => word_1_address1,
        ce1 => word_1_ce1,
        we1 => word_1_we1,
        d1 => word_1_d1,
        q1 => word_1_q1);

    statemt_0_U : component aes_main_statemt_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => statemt_0_address0,
        ce0 => statemt_0_ce0,
        we0 => statemt_0_we0,
        d0 => statemt_0_d0,
        q0 => statemt_0_q0,
        address1 => statemt_0_address1,
        ce1 => statemt_0_ce1,
        we1 => statemt_0_we1,
        d1 => statemt_0_d1,
        q1 => statemt_0_q1);

    statemt_1_U : component aes_main_statemt_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => statemt_1_address0,
        ce0 => statemt_1_ce0,
        we0 => statemt_1_we0,
        d0 => statemt_1_d0,
        q0 => statemt_1_q0,
        address1 => statemt_1_address1,
        ce1 => statemt_1_ce1,
        we1 => statemt_1_we1,
        d1 => statemt_1_d1,
        q1 => statemt_1_q1);

    key_0_U : component aes_main_statemt_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => key_0_address0,
        ce0 => key_0_ce0,
        we0 => key_0_we0,
        d0 => key_0_d0,
        q0 => key_0_q0,
        address1 => key_0_address1,
        ce1 => key_0_ce1,
        we1 => key_0_we1,
        d1 => key_0_d1,
        q1 => key_0_q1);

    grp_decrypt_fu_242 : component decrypt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_decrypt_fu_242_ap_start,
        ap_done => grp_decrypt_fu_242_ap_done,
        ap_idle => grp_decrypt_fu_242_ap_idle,
        ap_ready => grp_decrypt_fu_242_ap_ready,
        statemt_0_address0 => grp_decrypt_fu_242_statemt_0_address0,
        statemt_0_ce0 => grp_decrypt_fu_242_statemt_0_ce0,
        statemt_0_we0 => grp_decrypt_fu_242_statemt_0_we0,
        statemt_0_d0 => grp_decrypt_fu_242_statemt_0_d0,
        statemt_0_q0 => statemt_0_q0,
        statemt_0_address1 => grp_decrypt_fu_242_statemt_0_address1,
        statemt_0_ce1 => grp_decrypt_fu_242_statemt_0_ce1,
        statemt_0_we1 => grp_decrypt_fu_242_statemt_0_we1,
        statemt_0_d1 => grp_decrypt_fu_242_statemt_0_d1,
        statemt_0_q1 => statemt_0_q1,
        statemt_1_address0 => grp_decrypt_fu_242_statemt_1_address0,
        statemt_1_ce0 => grp_decrypt_fu_242_statemt_1_ce0,
        statemt_1_we0 => grp_decrypt_fu_242_statemt_1_we0,
        statemt_1_d0 => grp_decrypt_fu_242_statemt_1_d0,
        statemt_1_q0 => statemt_1_q0,
        statemt_1_address1 => grp_decrypt_fu_242_statemt_1_address1,
        statemt_1_ce1 => grp_decrypt_fu_242_statemt_1_ce1,
        statemt_1_we1 => grp_decrypt_fu_242_statemt_1_we1,
        statemt_1_d1 => grp_decrypt_fu_242_statemt_1_d1,
        statemt_1_q1 => statemt_1_q1,
        key_0_address0 => grp_decrypt_fu_242_key_0_address0,
        key_0_ce0 => grp_decrypt_fu_242_key_0_ce0,
        key_0_q0 => key_0_q0,
        key_0_address1 => grp_decrypt_fu_242_key_0_address1,
        key_0_ce1 => grp_decrypt_fu_242_key_0_ce1,
        key_0_q1 => key_0_q1,
        round_val => grp_decrypt_fu_242_round_val,
        round_val_ap_vld => grp_decrypt_fu_242_round_val_ap_vld,
        word_0_address0 => grp_decrypt_fu_242_word_0_address0,
        word_0_ce0 => grp_decrypt_fu_242_word_0_ce0,
        word_0_we0 => grp_decrypt_fu_242_word_0_we0,
        word_0_d0 => grp_decrypt_fu_242_word_0_d0,
        word_0_q0 => word_0_q0,
        word_0_address1 => grp_decrypt_fu_242_word_0_address1,
        word_0_ce1 => grp_decrypt_fu_242_word_0_ce1,
        word_0_we1 => grp_decrypt_fu_242_word_0_we1,
        word_0_d1 => grp_decrypt_fu_242_word_0_d1,
        word_0_q1 => word_0_q1,
        word_1_address0 => grp_decrypt_fu_242_word_1_address0,
        word_1_ce0 => grp_decrypt_fu_242_word_1_ce0,
        word_1_we0 => grp_decrypt_fu_242_word_1_we0,
        word_1_d0 => grp_decrypt_fu_242_word_1_d0,
        word_1_q0 => word_1_q0,
        word_1_address1 => grp_decrypt_fu_242_word_1_address1,
        word_1_ce1 => grp_decrypt_fu_242_word_1_ce1,
        word_1_we1 => grp_decrypt_fu_242_word_1_we1,
        word_1_d1 => grp_decrypt_fu_242_word_1_d1,
        word_1_q1 => word_1_q1,
        main_result_i => main_result,
        main_result_o => grp_decrypt_fu_242_main_result_o,
        main_result_o_ap_vld => grp_decrypt_fu_242_main_result_o_ap_vld);

    grp_encrypt_fu_264 : component encrypt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_encrypt_fu_264_ap_start,
        ap_done => grp_encrypt_fu_264_ap_done,
        ap_idle => grp_encrypt_fu_264_ap_idle,
        ap_ready => grp_encrypt_fu_264_ap_ready,
        statemt_0_address0 => grp_encrypt_fu_264_statemt_0_address0,
        statemt_0_ce0 => grp_encrypt_fu_264_statemt_0_ce0,
        statemt_0_we0 => grp_encrypt_fu_264_statemt_0_we0,
        statemt_0_d0 => grp_encrypt_fu_264_statemt_0_d0,
        statemt_0_q0 => statemt_0_q0,
        statemt_0_address1 => grp_encrypt_fu_264_statemt_0_address1,
        statemt_0_ce1 => grp_encrypt_fu_264_statemt_0_ce1,
        statemt_0_we1 => grp_encrypt_fu_264_statemt_0_we1,
        statemt_0_d1 => grp_encrypt_fu_264_statemt_0_d1,
        statemt_0_q1 => statemt_0_q1,
        statemt_1_address0 => grp_encrypt_fu_264_statemt_1_address0,
        statemt_1_ce0 => grp_encrypt_fu_264_statemt_1_ce0,
        statemt_1_we0 => grp_encrypt_fu_264_statemt_1_we0,
        statemt_1_d0 => grp_encrypt_fu_264_statemt_1_d0,
        statemt_1_q0 => statemt_1_q0,
        statemt_1_address1 => grp_encrypt_fu_264_statemt_1_address1,
        statemt_1_ce1 => grp_encrypt_fu_264_statemt_1_ce1,
        statemt_1_we1 => grp_encrypt_fu_264_statemt_1_we1,
        statemt_1_d1 => grp_encrypt_fu_264_statemt_1_d1,
        statemt_1_q1 => statemt_1_q1,
        key_0_address0 => grp_encrypt_fu_264_key_0_address0,
        key_0_ce0 => grp_encrypt_fu_264_key_0_ce0,
        key_0_q0 => key_0_q0,
        key_0_address1 => grp_encrypt_fu_264_key_0_address1,
        key_0_ce1 => grp_encrypt_fu_264_key_0_ce1,
        key_0_q1 => key_0_q1,
        round_val => grp_encrypt_fu_264_round_val,
        round_val_ap_vld => grp_encrypt_fu_264_round_val_ap_vld,
        word_0_address0 => grp_encrypt_fu_264_word_0_address0,
        word_0_ce0 => grp_encrypt_fu_264_word_0_ce0,
        word_0_we0 => grp_encrypt_fu_264_word_0_we0,
        word_0_d0 => grp_encrypt_fu_264_word_0_d0,
        word_0_q0 => word_0_q0,
        word_0_address1 => grp_encrypt_fu_264_word_0_address1,
        word_0_ce1 => grp_encrypt_fu_264_word_0_ce1,
        word_0_we1 => grp_encrypt_fu_264_word_0_we1,
        word_0_d1 => grp_encrypt_fu_264_word_0_d1,
        word_0_q1 => word_0_q1,
        word_1_address0 => grp_encrypt_fu_264_word_1_address0,
        word_1_ce0 => grp_encrypt_fu_264_word_1_ce0,
        word_1_we0 => grp_encrypt_fu_264_word_1_we0,
        word_1_d0 => grp_encrypt_fu_264_word_1_d0,
        word_1_q0 => word_1_q0,
        word_1_address1 => grp_encrypt_fu_264_word_1_address1,
        word_1_ce1 => grp_encrypt_fu_264_word_1_ce1,
        word_1_we1 => grp_encrypt_fu_264_word_1_we1,
        word_1_d1 => grp_encrypt_fu_264_word_1_d1,
        word_1_q1 => word_1_q1,
        main_result_i => main_result,
        main_result_o => grp_encrypt_fu_264_main_result_o,
        main_result_o_ap_vld => grp_encrypt_fu_264_main_result_o_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_decrypt_fu_242_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_decrypt_fu_242_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_decrypt_fu_242_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_decrypt_fu_242_ap_ready = ap_const_logic_1)) then 
                    grp_decrypt_fu_242_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_encrypt_fu_264_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_encrypt_fu_264_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_encrypt_fu_264_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_encrypt_fu_264_ap_ready = ap_const_logic_1)) then 
                    grp_encrypt_fu_264_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    main_result_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_encrypt_fu_264_main_result_o_ap_vld = ap_const_logic_1))) then 
                main_result <= grp_encrypt_fu_264_main_result_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_decrypt_fu_242_main_result_o_ap_vld = ap_const_logic_1))) then 
                main_result <= grp_decrypt_fu_242_main_result_o;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_decrypt_fu_242_ap_done, grp_encrypt_fu_264_ap_done, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_encrypt_fu_264_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_decrypt_fu_242_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(grp_decrypt_fu_242_ap_done, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_decrypt_fu_242_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_decrypt_fu_242_ap_done, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_decrypt_fu_242_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;
    grp_decrypt_fu_242_ap_start <= grp_decrypt_fu_242_ap_start_reg;
    grp_encrypt_fu_264_ap_start <= grp_encrypt_fu_264_ap_start_reg;

    key_0_address0_assign_proc : process(ap_CS_fsm_state1, grp_decrypt_fu_242_key_0_address0, grp_encrypt_fu_264_key_0_address0, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            key_0_address0 <= ap_const_lv4_E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            key_0_address0 <= ap_const_lv4_C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            key_0_address0 <= ap_const_lv4_A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            key_0_address0 <= ap_const_lv4_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            key_0_address0 <= ap_const_lv4_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            key_0_address0 <= ap_const_lv4_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            key_0_address0 <= ap_const_lv4_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            key_0_address0 <= ap_const_lv4_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            key_0_address0 <= grp_encrypt_fu_264_key_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            key_0_address0 <= grp_decrypt_fu_242_key_0_address0;
        else 
            key_0_address0 <= "XXXX";
        end if; 
    end process;


    key_0_address1_assign_proc : process(ap_CS_fsm_state1, grp_decrypt_fu_242_key_0_address1, grp_encrypt_fu_264_key_0_address1, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            key_0_address1 <= ap_const_lv4_F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            key_0_address1 <= ap_const_lv4_D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            key_0_address1 <= ap_const_lv4_B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            key_0_address1 <= ap_const_lv4_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            key_0_address1 <= ap_const_lv4_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            key_0_address1 <= ap_const_lv4_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            key_0_address1 <= ap_const_lv4_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            key_0_address1 <= ap_const_lv4_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            key_0_address1 <= grp_encrypt_fu_264_key_0_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            key_0_address1 <= grp_decrypt_fu_242_key_0_address1;
        else 
            key_0_address1 <= "XXXX";
        end if; 
    end process;


    key_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_decrypt_fu_242_key_0_ce0, grp_encrypt_fu_264_key_0_ce0, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            key_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            key_0_ce0 <= grp_encrypt_fu_264_key_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            key_0_ce0 <= grp_decrypt_fu_242_key_0_ce0;
        else 
            key_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    key_0_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_decrypt_fu_242_key_0_ce1, grp_encrypt_fu_264_key_0_ce1, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            key_0_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            key_0_ce1 <= grp_encrypt_fu_264_key_0_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            key_0_ce1 <= grp_decrypt_fu_242_key_0_ce1;
        else 
            key_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    key_0_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            key_0_d0 <= ap_const_lv32_4F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            key_0_d0 <= ap_const_lv32_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            key_0_d0 <= ap_const_lv32_AB;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            key_0_d0 <= ap_const_lv32_D2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            key_0_d0 <= ap_const_lv32_28;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            key_0_d0 <= ap_const_lv32_15;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            key_0_d0 <= ap_const_lv32_2B;
        else 
            key_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    key_0_d1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            key_0_d1 <= ap_const_lv32_3C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            key_0_d1 <= ap_const_lv32_CF;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            key_0_d1 <= ap_const_lv32_88;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            key_0_d1 <= ap_const_lv32_F7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            key_0_d1 <= ap_const_lv32_A6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            key_0_d1 <= ap_const_lv32_AE;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            key_0_d1 <= ap_const_lv32_16;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            key_0_d1 <= ap_const_lv32_7E;
        else 
            key_0_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    key_0_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            key_0_we0 <= ap_const_logic_1;
        else 
            key_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    key_0_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            key_0_we1 <= ap_const_logic_1;
        else 
            key_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    statemt_0_address0_assign_proc : process(grp_decrypt_fu_242_statemt_0_address0, grp_encrypt_fu_264_statemt_0_address0, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            statemt_0_address0 <= ap_const_lv4_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            statemt_0_address0 <= ap_const_lv4_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            statemt_0_address0 <= ap_const_lv4_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            statemt_0_address0 <= ap_const_lv4_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            statemt_0_address0 <= grp_encrypt_fu_264_statemt_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            statemt_0_address0 <= grp_decrypt_fu_242_statemt_0_address0;
        else 
            statemt_0_address0 <= "XXXX";
        end if; 
    end process;


    statemt_0_address1_assign_proc : process(grp_decrypt_fu_242_statemt_0_address1, grp_encrypt_fu_264_statemt_0_address1, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            statemt_0_address1 <= ap_const_lv4_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            statemt_0_address1 <= ap_const_lv4_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            statemt_0_address1 <= ap_const_lv4_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            statemt_0_address1 <= ap_const_lv4_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            statemt_0_address1 <= grp_encrypt_fu_264_statemt_0_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            statemt_0_address1 <= grp_decrypt_fu_242_statemt_0_address1;
        else 
            statemt_0_address1 <= "XXXX";
        end if; 
    end process;


    statemt_0_ce0_assign_proc : process(grp_decrypt_fu_242_statemt_0_ce0, grp_encrypt_fu_264_statemt_0_ce0, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            statemt_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            statemt_0_ce0 <= grp_encrypt_fu_264_statemt_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            statemt_0_ce0 <= grp_decrypt_fu_242_statemt_0_ce0;
        else 
            statemt_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    statemt_0_ce1_assign_proc : process(grp_decrypt_fu_242_statemt_0_ce1, grp_encrypt_fu_264_statemt_0_ce1, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            statemt_0_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            statemt_0_ce1 <= grp_encrypt_fu_264_statemt_0_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            statemt_0_ce1 <= grp_decrypt_fu_242_statemt_0_ce1;
        else 
            statemt_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    statemt_0_d0_assign_proc : process(grp_decrypt_fu_242_statemt_0_d0, grp_encrypt_fu_264_statemt_0_d0, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            statemt_0_d0 <= ap_const_lv32_E0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            statemt_0_d0 <= ap_const_lv32_31;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            statemt_0_d0 <= ap_const_lv32_88;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            statemt_0_d0 <= ap_const_lv32_32;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            statemt_0_d0 <= grp_encrypt_fu_264_statemt_0_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            statemt_0_d0 <= grp_decrypt_fu_242_statemt_0_d0;
        else 
            statemt_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    statemt_0_d1_assign_proc : process(grp_decrypt_fu_242_statemt_0_d1, grp_encrypt_fu_264_statemt_0_d1, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            statemt_0_d1 <= ap_const_lv32_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            statemt_0_d1 <= ap_const_lv32_98;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            statemt_0_d1 <= ap_const_lv32_30;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            statemt_0_d1 <= ap_const_lv32_F6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            statemt_0_d1 <= grp_encrypt_fu_264_statemt_0_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            statemt_0_d1 <= grp_decrypt_fu_242_statemt_0_d1;
        else 
            statemt_0_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    statemt_0_we0_assign_proc : process(grp_decrypt_fu_242_statemt_0_we0, grp_encrypt_fu_264_statemt_0_we0, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            statemt_0_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            statemt_0_we0 <= grp_encrypt_fu_264_statemt_0_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            statemt_0_we0 <= grp_decrypt_fu_242_statemt_0_we0;
        else 
            statemt_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    statemt_0_we1_assign_proc : process(grp_decrypt_fu_242_statemt_0_we1, grp_encrypt_fu_264_statemt_0_we1, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            statemt_0_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            statemt_0_we1 <= grp_encrypt_fu_264_statemt_0_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            statemt_0_we1 <= grp_decrypt_fu_242_statemt_0_we1;
        else 
            statemt_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    statemt_1_address0_assign_proc : process(grp_decrypt_fu_242_statemt_1_address0, grp_encrypt_fu_264_statemt_1_address0, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            statemt_1_address0 <= ap_const_lv4_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            statemt_1_address0 <= ap_const_lv4_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            statemt_1_address0 <= ap_const_lv4_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            statemt_1_address0 <= ap_const_lv4_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            statemt_1_address0 <= grp_encrypt_fu_264_statemt_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            statemt_1_address0 <= grp_decrypt_fu_242_statemt_1_address0;
        else 
            statemt_1_address0 <= "XXXX";
        end if; 
    end process;


    statemt_1_address1_assign_proc : process(grp_decrypt_fu_242_statemt_1_address1, grp_encrypt_fu_264_statemt_1_address1, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            statemt_1_address1 <= ap_const_lv4_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            statemt_1_address1 <= ap_const_lv4_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            statemt_1_address1 <= ap_const_lv4_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            statemt_1_address1 <= ap_const_lv4_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            statemt_1_address1 <= grp_encrypt_fu_264_statemt_1_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            statemt_1_address1 <= grp_decrypt_fu_242_statemt_1_address1;
        else 
            statemt_1_address1 <= "XXXX";
        end if; 
    end process;


    statemt_1_ce0_assign_proc : process(grp_decrypt_fu_242_statemt_1_ce0, grp_encrypt_fu_264_statemt_1_ce0, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            statemt_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            statemt_1_ce0 <= grp_encrypt_fu_264_statemt_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            statemt_1_ce0 <= grp_decrypt_fu_242_statemt_1_ce0;
        else 
            statemt_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    statemt_1_ce1_assign_proc : process(grp_decrypt_fu_242_statemt_1_ce1, grp_encrypt_fu_264_statemt_1_ce1, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            statemt_1_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            statemt_1_ce1 <= grp_encrypt_fu_264_statemt_1_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            statemt_1_ce1 <= grp_decrypt_fu_242_statemt_1_ce1;
        else 
            statemt_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    statemt_1_d0_assign_proc : process(grp_decrypt_fu_242_statemt_1_d0, grp_encrypt_fu_264_statemt_1_d0, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            statemt_1_d0 <= ap_const_lv32_37;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            statemt_1_d0 <= ap_const_lv32_31;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            statemt_1_d0 <= ap_const_lv32_5A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            statemt_1_d0 <= ap_const_lv32_43;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            statemt_1_d0 <= grp_encrypt_fu_264_statemt_1_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            statemt_1_d0 <= grp_decrypt_fu_242_statemt_1_d0;
        else 
            statemt_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    statemt_1_d1_assign_proc : process(grp_decrypt_fu_242_statemt_1_d1, grp_encrypt_fu_264_statemt_1_d1, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            statemt_1_d1 <= ap_const_lv32_34;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            statemt_1_d1 <= ap_const_lv32_A2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            statemt_1_d1 <= ap_const_lv32_8D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            statemt_1_d1 <= ap_const_lv32_A8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            statemt_1_d1 <= grp_encrypt_fu_264_statemt_1_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            statemt_1_d1 <= grp_decrypt_fu_242_statemt_1_d1;
        else 
            statemt_1_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    statemt_1_we0_assign_proc : process(grp_decrypt_fu_242_statemt_1_we0, grp_encrypt_fu_264_statemt_1_we0, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            statemt_1_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            statemt_1_we0 <= grp_encrypt_fu_264_statemt_1_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            statemt_1_we0 <= grp_decrypt_fu_242_statemt_1_we0;
        else 
            statemt_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    statemt_1_we1_assign_proc : process(grp_decrypt_fu_242_statemt_1_we1, grp_encrypt_fu_264_statemt_1_we1, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            statemt_1_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            statemt_1_we1 <= grp_encrypt_fu_264_statemt_1_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            statemt_1_we1 <= grp_decrypt_fu_242_statemt_1_we1;
        else 
            statemt_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    word_0_address0_assign_proc : process(grp_decrypt_fu_242_word_0_address0, grp_encrypt_fu_264_word_0_address0, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            word_0_address0 <= grp_encrypt_fu_264_word_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            word_0_address0 <= grp_decrypt_fu_242_word_0_address0;
        else 
            word_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    word_0_address1_assign_proc : process(grp_decrypt_fu_242_word_0_address1, grp_encrypt_fu_264_word_0_address1, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            word_0_address1 <= grp_encrypt_fu_264_word_0_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            word_0_address1 <= grp_decrypt_fu_242_word_0_address1;
        else 
            word_0_address1 <= "XXXXXXXX";
        end if; 
    end process;


    word_0_ce0_assign_proc : process(grp_decrypt_fu_242_word_0_ce0, grp_encrypt_fu_264_word_0_ce0, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            word_0_ce0 <= grp_encrypt_fu_264_word_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            word_0_ce0 <= grp_decrypt_fu_242_word_0_ce0;
        else 
            word_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    word_0_ce1_assign_proc : process(grp_decrypt_fu_242_word_0_ce1, grp_encrypt_fu_264_word_0_ce1, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            word_0_ce1 <= grp_encrypt_fu_264_word_0_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            word_0_ce1 <= grp_decrypt_fu_242_word_0_ce1;
        else 
            word_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    word_0_d0_assign_proc : process(grp_decrypt_fu_242_word_0_d0, grp_encrypt_fu_264_word_0_d0, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            word_0_d0 <= grp_encrypt_fu_264_word_0_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            word_0_d0 <= grp_decrypt_fu_242_word_0_d0;
        else 
            word_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    word_0_d1_assign_proc : process(grp_decrypt_fu_242_word_0_d1, grp_encrypt_fu_264_word_0_d1, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            word_0_d1 <= grp_encrypt_fu_264_word_0_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            word_0_d1 <= grp_decrypt_fu_242_word_0_d1;
        else 
            word_0_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    word_0_we0_assign_proc : process(grp_decrypt_fu_242_word_0_we0, grp_encrypt_fu_264_word_0_we0, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            word_0_we0 <= grp_encrypt_fu_264_word_0_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            word_0_we0 <= grp_decrypt_fu_242_word_0_we0;
        else 
            word_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    word_0_we1_assign_proc : process(grp_decrypt_fu_242_word_0_we1, grp_encrypt_fu_264_word_0_we1, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            word_0_we1 <= grp_encrypt_fu_264_word_0_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            word_0_we1 <= grp_decrypt_fu_242_word_0_we1;
        else 
            word_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    word_1_address0_assign_proc : process(grp_decrypt_fu_242_word_1_address0, grp_encrypt_fu_264_word_1_address0, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            word_1_address0 <= grp_encrypt_fu_264_word_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            word_1_address0 <= grp_decrypt_fu_242_word_1_address0;
        else 
            word_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    word_1_address1_assign_proc : process(grp_decrypt_fu_242_word_1_address1, grp_encrypt_fu_264_word_1_address1, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            word_1_address1 <= grp_encrypt_fu_264_word_1_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            word_1_address1 <= grp_decrypt_fu_242_word_1_address1;
        else 
            word_1_address1 <= "XXXXXXXX";
        end if; 
    end process;


    word_1_ce0_assign_proc : process(grp_decrypt_fu_242_word_1_ce0, grp_encrypt_fu_264_word_1_ce0, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            word_1_ce0 <= grp_encrypt_fu_264_word_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            word_1_ce0 <= grp_decrypt_fu_242_word_1_ce0;
        else 
            word_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    word_1_ce1_assign_proc : process(grp_decrypt_fu_242_word_1_ce1, grp_encrypt_fu_264_word_1_ce1, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            word_1_ce1 <= grp_encrypt_fu_264_word_1_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            word_1_ce1 <= grp_decrypt_fu_242_word_1_ce1;
        else 
            word_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    word_1_d0_assign_proc : process(grp_decrypt_fu_242_word_1_d0, grp_encrypt_fu_264_word_1_d0, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            word_1_d0 <= grp_encrypt_fu_264_word_1_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            word_1_d0 <= grp_decrypt_fu_242_word_1_d0;
        else 
            word_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    word_1_d1_assign_proc : process(grp_decrypt_fu_242_word_1_d1, grp_encrypt_fu_264_word_1_d1, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            word_1_d1 <= grp_encrypt_fu_264_word_1_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            word_1_d1 <= grp_decrypt_fu_242_word_1_d1;
        else 
            word_1_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    word_1_we0_assign_proc : process(grp_decrypt_fu_242_word_1_we0, grp_encrypt_fu_264_word_1_we0, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            word_1_we0 <= grp_encrypt_fu_264_word_1_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            word_1_we0 <= grp_decrypt_fu_242_word_1_we0;
        else 
            word_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    word_1_we1_assign_proc : process(grp_decrypt_fu_242_word_1_we1, grp_encrypt_fu_264_word_1_we1, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            word_1_we1 <= grp_encrypt_fu_264_word_1_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            word_1_we1 <= grp_decrypt_fu_242_word_1_we1;
        else 
            word_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
