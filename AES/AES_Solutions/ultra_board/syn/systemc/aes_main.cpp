// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "aes_main.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic aes_main::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic aes_main::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<12> aes_main::ap_ST_fsm_state1 = "1";
const sc_lv<12> aes_main::ap_ST_fsm_state2 = "10";
const sc_lv<12> aes_main::ap_ST_fsm_state3 = "100";
const sc_lv<12> aes_main::ap_ST_fsm_state4 = "1000";
const sc_lv<12> aes_main::ap_ST_fsm_state5 = "10000";
const sc_lv<12> aes_main::ap_ST_fsm_state6 = "100000";
const sc_lv<12> aes_main::ap_ST_fsm_state7 = "1000000";
const sc_lv<12> aes_main::ap_ST_fsm_state8 = "10000000";
const sc_lv<12> aes_main::ap_ST_fsm_state9 = "100000000";
const sc_lv<12> aes_main::ap_ST_fsm_state10 = "1000000000";
const sc_lv<12> aes_main::ap_ST_fsm_state11 = "10000000000";
const sc_lv<12> aes_main::ap_ST_fsm_state12 = "100000000000";
const sc_lv<32> aes_main::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> aes_main::ap_const_lv32_A = "1010";
const sc_lv<32> aes_main::ap_const_lv32_B = "1011";
const sc_lv<32> aes_main::ap_const_lv32_8 = "1000";
const sc_lv<32> aes_main::ap_const_lv32_9 = "1001";
const sc_lv<32> aes_main::ap_const_lv32_2B = "101011";
const sc_lv<4> aes_main::ap_const_lv4_0 = "0000";
const sc_lv<32> aes_main::ap_const_lv32_7E = "1111110";
const sc_lv<4> aes_main::ap_const_lv4_1 = "1";
const sc_lv<32> aes_main::ap_const_lv32_1 = "1";
const sc_lv<32> aes_main::ap_const_lv32_15 = "10101";
const sc_lv<4> aes_main::ap_const_lv4_2 = "10";
const sc_lv<32> aes_main::ap_const_lv32_16 = "10110";
const sc_lv<4> aes_main::ap_const_lv4_3 = "11";
const sc_lv<32> aes_main::ap_const_lv32_2 = "10";
const sc_lv<32> aes_main::ap_const_lv32_28 = "101000";
const sc_lv<4> aes_main::ap_const_lv4_4 = "100";
const sc_lv<32> aes_main::ap_const_lv32_AE = "10101110";
const sc_lv<4> aes_main::ap_const_lv4_5 = "101";
const sc_lv<32> aes_main::ap_const_lv32_3 = "11";
const sc_lv<32> aes_main::ap_const_lv32_D2 = "11010010";
const sc_lv<4> aes_main::ap_const_lv4_6 = "110";
const sc_lv<32> aes_main::ap_const_lv32_A6 = "10100110";
const sc_lv<4> aes_main::ap_const_lv4_7 = "111";
const sc_lv<32> aes_main::ap_const_lv32_4 = "100";
const sc_lv<32> aes_main::ap_const_lv32_AB = "10101011";
const sc_lv<4> aes_main::ap_const_lv4_8 = "1000";
const sc_lv<32> aes_main::ap_const_lv32_F7 = "11110111";
const sc_lv<4> aes_main::ap_const_lv4_9 = "1001";
const sc_lv<32> aes_main::ap_const_lv32_5 = "101";
const sc_lv<4> aes_main::ap_const_lv4_A = "1010";
const sc_lv<32> aes_main::ap_const_lv32_88 = "10001000";
const sc_lv<4> aes_main::ap_const_lv4_B = "1011";
const sc_lv<32> aes_main::ap_const_lv32_6 = "110";
const sc_lv<4> aes_main::ap_const_lv4_C = "1100";
const sc_lv<32> aes_main::ap_const_lv32_CF = "11001111";
const sc_lv<4> aes_main::ap_const_lv4_D = "1101";
const sc_lv<32> aes_main::ap_const_lv32_7 = "111";
const sc_lv<32> aes_main::ap_const_lv32_4F = "1001111";
const sc_lv<4> aes_main::ap_const_lv4_E = "1110";
const sc_lv<32> aes_main::ap_const_lv32_3C = "111100";
const sc_lv<4> aes_main::ap_const_lv4_F = "1111";
const sc_lv<32> aes_main::ap_const_lv32_32 = "110010";
const sc_lv<32> aes_main::ap_const_lv32_F6 = "11110110";
const sc_lv<32> aes_main::ap_const_lv32_30 = "110000";
const sc_lv<32> aes_main::ap_const_lv32_31 = "110001";
const sc_lv<32> aes_main::ap_const_lv32_98 = "10011000";
const sc_lv<32> aes_main::ap_const_lv32_E0 = "11100000";
const sc_lv<32> aes_main::ap_const_lv32_43 = "1000011";
const sc_lv<32> aes_main::ap_const_lv32_A8 = "10101000";
const sc_lv<32> aes_main::ap_const_lv32_5A = "1011010";
const sc_lv<32> aes_main::ap_const_lv32_8D = "10001101";
const sc_lv<32> aes_main::ap_const_lv32_A2 = "10100010";
const sc_lv<32> aes_main::ap_const_lv32_37 = "110111";
const sc_lv<32> aes_main::ap_const_lv32_34 = "110100";
const bool aes_main::ap_const_boolean_1 = true;

aes_main::aes_main(sc_module_name name) : sc_module(name), mVcdFile(0) {
    word_0_U = new aes_main_word_0("word_0_U");
    word_0_U->clk(ap_clk);
    word_0_U->reset(ap_rst);
    word_0_U->address0(word_0_address0);
    word_0_U->ce0(word_0_ce0);
    word_0_U->we0(word_0_we0);
    word_0_U->d0(word_0_d0);
    word_0_U->q0(word_0_q0);
    word_0_U->address1(word_0_address1);
    word_0_U->ce1(word_0_ce1);
    word_0_U->we1(word_0_we1);
    word_0_U->d1(word_0_d1);
    word_0_U->q1(word_0_q1);
    word_1_U = new aes_main_word_0("word_1_U");
    word_1_U->clk(ap_clk);
    word_1_U->reset(ap_rst);
    word_1_U->address0(word_1_address0);
    word_1_U->ce0(word_1_ce0);
    word_1_U->we0(word_1_we0);
    word_1_U->d0(word_1_d0);
    word_1_U->q0(word_1_q0);
    word_1_U->address1(word_1_address1);
    word_1_U->ce1(word_1_ce1);
    word_1_U->we1(word_1_we1);
    word_1_U->d1(word_1_d1);
    word_1_U->q1(word_1_q1);
    statemt_0_U = new aes_main_statemt_0("statemt_0_U");
    statemt_0_U->clk(ap_clk);
    statemt_0_U->reset(ap_rst);
    statemt_0_U->address0(statemt_0_address0);
    statemt_0_U->ce0(statemt_0_ce0);
    statemt_0_U->we0(statemt_0_we0);
    statemt_0_U->d0(statemt_0_d0);
    statemt_0_U->q0(statemt_0_q0);
    statemt_0_U->address1(statemt_0_address1);
    statemt_0_U->ce1(statemt_0_ce1);
    statemt_0_U->we1(statemt_0_we1);
    statemt_0_U->d1(statemt_0_d1);
    statemt_0_U->q1(statemt_0_q1);
    statemt_1_U = new aes_main_statemt_0("statemt_1_U");
    statemt_1_U->clk(ap_clk);
    statemt_1_U->reset(ap_rst);
    statemt_1_U->address0(statemt_1_address0);
    statemt_1_U->ce0(statemt_1_ce0);
    statemt_1_U->we0(statemt_1_we0);
    statemt_1_U->d0(statemt_1_d0);
    statemt_1_U->q0(statemt_1_q0);
    statemt_1_U->address1(statemt_1_address1);
    statemt_1_U->ce1(statemt_1_ce1);
    statemt_1_U->we1(statemt_1_we1);
    statemt_1_U->d1(statemt_1_d1);
    statemt_1_U->q1(statemt_1_q1);
    key_0_U = new aes_main_statemt_0("key_0_U");
    key_0_U->clk(ap_clk);
    key_0_U->reset(ap_rst);
    key_0_U->address0(key_0_address0);
    key_0_U->ce0(key_0_ce0);
    key_0_U->we0(key_0_we0);
    key_0_U->d0(key_0_d0);
    key_0_U->q0(key_0_q0);
    key_0_U->address1(key_0_address1);
    key_0_U->ce1(key_0_ce1);
    key_0_U->we1(key_0_we1);
    key_0_U->d1(key_0_d1);
    key_0_U->q1(key_0_q1);
    grp_decrypt_fu_242 = new decrypt("grp_decrypt_fu_242");
    grp_decrypt_fu_242->ap_clk(ap_clk);
    grp_decrypt_fu_242->ap_rst(ap_rst);
    grp_decrypt_fu_242->ap_start(grp_decrypt_fu_242_ap_start);
    grp_decrypt_fu_242->ap_done(grp_decrypt_fu_242_ap_done);
    grp_decrypt_fu_242->ap_idle(grp_decrypt_fu_242_ap_idle);
    grp_decrypt_fu_242->ap_ready(grp_decrypt_fu_242_ap_ready);
    grp_decrypt_fu_242->statemt_0_address0(grp_decrypt_fu_242_statemt_0_address0);
    grp_decrypt_fu_242->statemt_0_ce0(grp_decrypt_fu_242_statemt_0_ce0);
    grp_decrypt_fu_242->statemt_0_we0(grp_decrypt_fu_242_statemt_0_we0);
    grp_decrypt_fu_242->statemt_0_d0(grp_decrypt_fu_242_statemt_0_d0);
    grp_decrypt_fu_242->statemt_0_q0(statemt_0_q0);
    grp_decrypt_fu_242->statemt_0_address1(grp_decrypt_fu_242_statemt_0_address1);
    grp_decrypt_fu_242->statemt_0_ce1(grp_decrypt_fu_242_statemt_0_ce1);
    grp_decrypt_fu_242->statemt_0_we1(grp_decrypt_fu_242_statemt_0_we1);
    grp_decrypt_fu_242->statemt_0_d1(grp_decrypt_fu_242_statemt_0_d1);
    grp_decrypt_fu_242->statemt_0_q1(statemt_0_q1);
    grp_decrypt_fu_242->statemt_1_address0(grp_decrypt_fu_242_statemt_1_address0);
    grp_decrypt_fu_242->statemt_1_ce0(grp_decrypt_fu_242_statemt_1_ce0);
    grp_decrypt_fu_242->statemt_1_we0(grp_decrypt_fu_242_statemt_1_we0);
    grp_decrypt_fu_242->statemt_1_d0(grp_decrypt_fu_242_statemt_1_d0);
    grp_decrypt_fu_242->statemt_1_q0(statemt_1_q0);
    grp_decrypt_fu_242->statemt_1_address1(grp_decrypt_fu_242_statemt_1_address1);
    grp_decrypt_fu_242->statemt_1_ce1(grp_decrypt_fu_242_statemt_1_ce1);
    grp_decrypt_fu_242->statemt_1_we1(grp_decrypt_fu_242_statemt_1_we1);
    grp_decrypt_fu_242->statemt_1_d1(grp_decrypt_fu_242_statemt_1_d1);
    grp_decrypt_fu_242->statemt_1_q1(statemt_1_q1);
    grp_decrypt_fu_242->key_0_address0(grp_decrypt_fu_242_key_0_address0);
    grp_decrypt_fu_242->key_0_ce0(grp_decrypt_fu_242_key_0_ce0);
    grp_decrypt_fu_242->key_0_q0(key_0_q0);
    grp_decrypt_fu_242->key_0_address1(grp_decrypt_fu_242_key_0_address1);
    grp_decrypt_fu_242->key_0_ce1(grp_decrypt_fu_242_key_0_ce1);
    grp_decrypt_fu_242->key_0_q1(key_0_q1);
    grp_decrypt_fu_242->round_val(grp_decrypt_fu_242_round_val);
    grp_decrypt_fu_242->round_val_ap_vld(grp_decrypt_fu_242_round_val_ap_vld);
    grp_decrypt_fu_242->word_0_address0(grp_decrypt_fu_242_word_0_address0);
    grp_decrypt_fu_242->word_0_ce0(grp_decrypt_fu_242_word_0_ce0);
    grp_decrypt_fu_242->word_0_we0(grp_decrypt_fu_242_word_0_we0);
    grp_decrypt_fu_242->word_0_d0(grp_decrypt_fu_242_word_0_d0);
    grp_decrypt_fu_242->word_0_q0(word_0_q0);
    grp_decrypt_fu_242->word_0_address1(grp_decrypt_fu_242_word_0_address1);
    grp_decrypt_fu_242->word_0_ce1(grp_decrypt_fu_242_word_0_ce1);
    grp_decrypt_fu_242->word_0_we1(grp_decrypt_fu_242_word_0_we1);
    grp_decrypt_fu_242->word_0_d1(grp_decrypt_fu_242_word_0_d1);
    grp_decrypt_fu_242->word_0_q1(word_0_q1);
    grp_decrypt_fu_242->word_1_address0(grp_decrypt_fu_242_word_1_address0);
    grp_decrypt_fu_242->word_1_ce0(grp_decrypt_fu_242_word_1_ce0);
    grp_decrypt_fu_242->word_1_we0(grp_decrypt_fu_242_word_1_we0);
    grp_decrypt_fu_242->word_1_d0(grp_decrypt_fu_242_word_1_d0);
    grp_decrypt_fu_242->word_1_q0(word_1_q0);
    grp_decrypt_fu_242->word_1_address1(grp_decrypt_fu_242_word_1_address1);
    grp_decrypt_fu_242->word_1_ce1(grp_decrypt_fu_242_word_1_ce1);
    grp_decrypt_fu_242->word_1_we1(grp_decrypt_fu_242_word_1_we1);
    grp_decrypt_fu_242->word_1_d1(grp_decrypt_fu_242_word_1_d1);
    grp_decrypt_fu_242->word_1_q1(word_1_q1);
    grp_decrypt_fu_242->main_result_i(main_result);
    grp_decrypt_fu_242->main_result_o(grp_decrypt_fu_242_main_result_o);
    grp_decrypt_fu_242->main_result_o_ap_vld(grp_decrypt_fu_242_main_result_o_ap_vld);
    grp_encrypt_fu_264 = new encrypt("grp_encrypt_fu_264");
    grp_encrypt_fu_264->ap_clk(ap_clk);
    grp_encrypt_fu_264->ap_rst(ap_rst);
    grp_encrypt_fu_264->ap_start(grp_encrypt_fu_264_ap_start);
    grp_encrypt_fu_264->ap_done(grp_encrypt_fu_264_ap_done);
    grp_encrypt_fu_264->ap_idle(grp_encrypt_fu_264_ap_idle);
    grp_encrypt_fu_264->ap_ready(grp_encrypt_fu_264_ap_ready);
    grp_encrypt_fu_264->statemt_0_address0(grp_encrypt_fu_264_statemt_0_address0);
    grp_encrypt_fu_264->statemt_0_ce0(grp_encrypt_fu_264_statemt_0_ce0);
    grp_encrypt_fu_264->statemt_0_we0(grp_encrypt_fu_264_statemt_0_we0);
    grp_encrypt_fu_264->statemt_0_d0(grp_encrypt_fu_264_statemt_0_d0);
    grp_encrypt_fu_264->statemt_0_q0(statemt_0_q0);
    grp_encrypt_fu_264->statemt_0_address1(grp_encrypt_fu_264_statemt_0_address1);
    grp_encrypt_fu_264->statemt_0_ce1(grp_encrypt_fu_264_statemt_0_ce1);
    grp_encrypt_fu_264->statemt_0_we1(grp_encrypt_fu_264_statemt_0_we1);
    grp_encrypt_fu_264->statemt_0_d1(grp_encrypt_fu_264_statemt_0_d1);
    grp_encrypt_fu_264->statemt_0_q1(statemt_0_q1);
    grp_encrypt_fu_264->statemt_1_address0(grp_encrypt_fu_264_statemt_1_address0);
    grp_encrypt_fu_264->statemt_1_ce0(grp_encrypt_fu_264_statemt_1_ce0);
    grp_encrypt_fu_264->statemt_1_we0(grp_encrypt_fu_264_statemt_1_we0);
    grp_encrypt_fu_264->statemt_1_d0(grp_encrypt_fu_264_statemt_1_d0);
    grp_encrypt_fu_264->statemt_1_q0(statemt_1_q0);
    grp_encrypt_fu_264->statemt_1_address1(grp_encrypt_fu_264_statemt_1_address1);
    grp_encrypt_fu_264->statemt_1_ce1(grp_encrypt_fu_264_statemt_1_ce1);
    grp_encrypt_fu_264->statemt_1_we1(grp_encrypt_fu_264_statemt_1_we1);
    grp_encrypt_fu_264->statemt_1_d1(grp_encrypt_fu_264_statemt_1_d1);
    grp_encrypt_fu_264->statemt_1_q1(statemt_1_q1);
    grp_encrypt_fu_264->key_0_address0(grp_encrypt_fu_264_key_0_address0);
    grp_encrypt_fu_264->key_0_ce0(grp_encrypt_fu_264_key_0_ce0);
    grp_encrypt_fu_264->key_0_q0(key_0_q0);
    grp_encrypt_fu_264->key_0_address1(grp_encrypt_fu_264_key_0_address1);
    grp_encrypt_fu_264->key_0_ce1(grp_encrypt_fu_264_key_0_ce1);
    grp_encrypt_fu_264->key_0_q1(key_0_q1);
    grp_encrypt_fu_264->round_val(grp_encrypt_fu_264_round_val);
    grp_encrypt_fu_264->round_val_ap_vld(grp_encrypt_fu_264_round_val_ap_vld);
    grp_encrypt_fu_264->word_0_address0(grp_encrypt_fu_264_word_0_address0);
    grp_encrypt_fu_264->word_0_ce0(grp_encrypt_fu_264_word_0_ce0);
    grp_encrypt_fu_264->word_0_we0(grp_encrypt_fu_264_word_0_we0);
    grp_encrypt_fu_264->word_0_d0(grp_encrypt_fu_264_word_0_d0);
    grp_encrypt_fu_264->word_0_q0(word_0_q0);
    grp_encrypt_fu_264->word_0_address1(grp_encrypt_fu_264_word_0_address1);
    grp_encrypt_fu_264->word_0_ce1(grp_encrypt_fu_264_word_0_ce1);
    grp_encrypt_fu_264->word_0_we1(grp_encrypt_fu_264_word_0_we1);
    grp_encrypt_fu_264->word_0_d1(grp_encrypt_fu_264_word_0_d1);
    grp_encrypt_fu_264->word_0_q1(word_0_q1);
    grp_encrypt_fu_264->word_1_address0(grp_encrypt_fu_264_word_1_address0);
    grp_encrypt_fu_264->word_1_ce0(grp_encrypt_fu_264_word_1_ce0);
    grp_encrypt_fu_264->word_1_we0(grp_encrypt_fu_264_word_1_we0);
    grp_encrypt_fu_264->word_1_d0(grp_encrypt_fu_264_word_1_d0);
    grp_encrypt_fu_264->word_1_q0(word_1_q0);
    grp_encrypt_fu_264->word_1_address1(grp_encrypt_fu_264_word_1_address1);
    grp_encrypt_fu_264->word_1_ce1(grp_encrypt_fu_264_word_1_ce1);
    grp_encrypt_fu_264->word_1_we1(grp_encrypt_fu_264_word_1_we1);
    grp_encrypt_fu_264->word_1_d1(grp_encrypt_fu_264_word_1_d1);
    grp_encrypt_fu_264->word_1_q1(word_1_q1);
    grp_encrypt_fu_264->main_result_i(main_result);
    grp_encrypt_fu_264->main_result_o(grp_encrypt_fu_264_main_result_o);
    grp_encrypt_fu_264->main_result_o_ap_vld(grp_encrypt_fu_264_main_result_o_ap_vld);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( grp_decrypt_fu_242_ap_done );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_decrypt_fu_242_ap_done );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_ap_return);
    sensitive << ( grp_decrypt_fu_242_ap_done );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_grp_decrypt_fu_242_ap_start);
    sensitive << ( grp_decrypt_fu_242_ap_start_reg );

    SC_METHOD(thread_grp_encrypt_fu_264_ap_start);
    sensitive << ( grp_encrypt_fu_264_ap_start_reg );

    SC_METHOD(thread_key_0_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_decrypt_fu_242_key_0_address0 );
    sensitive << ( grp_encrypt_fu_264_key_0_address0 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_key_0_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_decrypt_fu_242_key_0_address1 );
    sensitive << ( grp_encrypt_fu_264_key_0_address1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_key_0_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_decrypt_fu_242_key_0_ce0 );
    sensitive << ( grp_encrypt_fu_264_key_0_ce0 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_key_0_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_decrypt_fu_242_key_0_ce1 );
    sensitive << ( grp_encrypt_fu_264_key_0_ce1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_key_0_d0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_key_0_d1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_key_0_we0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_key_0_we1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_statemt_0_address0);
    sensitive << ( grp_decrypt_fu_242_statemt_0_address0 );
    sensitive << ( grp_encrypt_fu_264_statemt_0_address0 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_statemt_0_address1);
    sensitive << ( grp_decrypt_fu_242_statemt_0_address1 );
    sensitive << ( grp_encrypt_fu_264_statemt_0_address1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_statemt_0_ce0);
    sensitive << ( grp_decrypt_fu_242_statemt_0_ce0 );
    sensitive << ( grp_encrypt_fu_264_statemt_0_ce0 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_statemt_0_ce1);
    sensitive << ( grp_decrypt_fu_242_statemt_0_ce1 );
    sensitive << ( grp_encrypt_fu_264_statemt_0_ce1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_statemt_0_d0);
    sensitive << ( grp_decrypt_fu_242_statemt_0_d0 );
    sensitive << ( grp_encrypt_fu_264_statemt_0_d0 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_statemt_0_d1);
    sensitive << ( grp_decrypt_fu_242_statemt_0_d1 );
    sensitive << ( grp_encrypt_fu_264_statemt_0_d1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_statemt_0_we0);
    sensitive << ( grp_decrypt_fu_242_statemt_0_we0 );
    sensitive << ( grp_encrypt_fu_264_statemt_0_we0 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_statemt_0_we1);
    sensitive << ( grp_decrypt_fu_242_statemt_0_we1 );
    sensitive << ( grp_encrypt_fu_264_statemt_0_we1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_statemt_1_address0);
    sensitive << ( grp_decrypt_fu_242_statemt_1_address0 );
    sensitive << ( grp_encrypt_fu_264_statemt_1_address0 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_statemt_1_address1);
    sensitive << ( grp_decrypt_fu_242_statemt_1_address1 );
    sensitive << ( grp_encrypt_fu_264_statemt_1_address1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_statemt_1_ce0);
    sensitive << ( grp_decrypt_fu_242_statemt_1_ce0 );
    sensitive << ( grp_encrypt_fu_264_statemt_1_ce0 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_statemt_1_ce1);
    sensitive << ( grp_decrypt_fu_242_statemt_1_ce1 );
    sensitive << ( grp_encrypt_fu_264_statemt_1_ce1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_statemt_1_d0);
    sensitive << ( grp_decrypt_fu_242_statemt_1_d0 );
    sensitive << ( grp_encrypt_fu_264_statemt_1_d0 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_statemt_1_d1);
    sensitive << ( grp_decrypt_fu_242_statemt_1_d1 );
    sensitive << ( grp_encrypt_fu_264_statemt_1_d1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_statemt_1_we0);
    sensitive << ( grp_decrypt_fu_242_statemt_1_we0 );
    sensitive << ( grp_encrypt_fu_264_statemt_1_we0 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_statemt_1_we1);
    sensitive << ( grp_decrypt_fu_242_statemt_1_we1 );
    sensitive << ( grp_encrypt_fu_264_statemt_1_we1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_word_0_address0);
    sensitive << ( grp_decrypt_fu_242_word_0_address0 );
    sensitive << ( grp_encrypt_fu_264_word_0_address0 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_word_0_address1);
    sensitive << ( grp_decrypt_fu_242_word_0_address1 );
    sensitive << ( grp_encrypt_fu_264_word_0_address1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_word_0_ce0);
    sensitive << ( grp_decrypt_fu_242_word_0_ce0 );
    sensitive << ( grp_encrypt_fu_264_word_0_ce0 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_word_0_ce1);
    sensitive << ( grp_decrypt_fu_242_word_0_ce1 );
    sensitive << ( grp_encrypt_fu_264_word_0_ce1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_word_0_d0);
    sensitive << ( grp_decrypt_fu_242_word_0_d0 );
    sensitive << ( grp_encrypt_fu_264_word_0_d0 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_word_0_d1);
    sensitive << ( grp_decrypt_fu_242_word_0_d1 );
    sensitive << ( grp_encrypt_fu_264_word_0_d1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_word_0_we0);
    sensitive << ( grp_decrypt_fu_242_word_0_we0 );
    sensitive << ( grp_encrypt_fu_264_word_0_we0 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_word_0_we1);
    sensitive << ( grp_decrypt_fu_242_word_0_we1 );
    sensitive << ( grp_encrypt_fu_264_word_0_we1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_word_1_address0);
    sensitive << ( grp_decrypt_fu_242_word_1_address0 );
    sensitive << ( grp_encrypt_fu_264_word_1_address0 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_word_1_address1);
    sensitive << ( grp_decrypt_fu_242_word_1_address1 );
    sensitive << ( grp_encrypt_fu_264_word_1_address1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_word_1_ce0);
    sensitive << ( grp_decrypt_fu_242_word_1_ce0 );
    sensitive << ( grp_encrypt_fu_264_word_1_ce0 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_word_1_ce1);
    sensitive << ( grp_decrypt_fu_242_word_1_ce1 );
    sensitive << ( grp_encrypt_fu_264_word_1_ce1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_word_1_d0);
    sensitive << ( grp_decrypt_fu_242_word_1_d0 );
    sensitive << ( grp_encrypt_fu_264_word_1_d0 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_word_1_d1);
    sensitive << ( grp_decrypt_fu_242_word_1_d1 );
    sensitive << ( grp_encrypt_fu_264_word_1_d1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_word_1_we0);
    sensitive << ( grp_decrypt_fu_242_word_1_we0 );
    sensitive << ( grp_encrypt_fu_264_word_1_we0 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_word_1_we1);
    sensitive << ( grp_decrypt_fu_242_word_1_we1 );
    sensitive << ( grp_encrypt_fu_264_word_1_we1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_decrypt_fu_242_ap_done );
    sensitive << ( grp_encrypt_fu_264_ap_done );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000000000001";
    main_result = "00000000000000000000000000000000";
    grp_decrypt_fu_242_ap_start_reg = SC_LOGIC_0;
    grp_encrypt_fu_264_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "aes_main_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, word_0_address0, "word_0_address0");
    sc_trace(mVcdFile, word_0_ce0, "word_0_ce0");
    sc_trace(mVcdFile, word_0_we0, "word_0_we0");
    sc_trace(mVcdFile, word_0_d0, "word_0_d0");
    sc_trace(mVcdFile, word_0_q0, "word_0_q0");
    sc_trace(mVcdFile, word_0_address1, "word_0_address1");
    sc_trace(mVcdFile, word_0_ce1, "word_0_ce1");
    sc_trace(mVcdFile, word_0_we1, "word_0_we1");
    sc_trace(mVcdFile, word_0_d1, "word_0_d1");
    sc_trace(mVcdFile, word_0_q1, "word_0_q1");
    sc_trace(mVcdFile, word_1_address0, "word_1_address0");
    sc_trace(mVcdFile, word_1_ce0, "word_1_ce0");
    sc_trace(mVcdFile, word_1_we0, "word_1_we0");
    sc_trace(mVcdFile, word_1_d0, "word_1_d0");
    sc_trace(mVcdFile, word_1_q0, "word_1_q0");
    sc_trace(mVcdFile, word_1_address1, "word_1_address1");
    sc_trace(mVcdFile, word_1_ce1, "word_1_ce1");
    sc_trace(mVcdFile, word_1_we1, "word_1_we1");
    sc_trace(mVcdFile, word_1_d1, "word_1_d1");
    sc_trace(mVcdFile, word_1_q1, "word_1_q1");
    sc_trace(mVcdFile, main_result, "main_result");
    sc_trace(mVcdFile, statemt_0_address0, "statemt_0_address0");
    sc_trace(mVcdFile, statemt_0_ce0, "statemt_0_ce0");
    sc_trace(mVcdFile, statemt_0_we0, "statemt_0_we0");
    sc_trace(mVcdFile, statemt_0_d0, "statemt_0_d0");
    sc_trace(mVcdFile, statemt_0_q0, "statemt_0_q0");
    sc_trace(mVcdFile, statemt_0_address1, "statemt_0_address1");
    sc_trace(mVcdFile, statemt_0_ce1, "statemt_0_ce1");
    sc_trace(mVcdFile, statemt_0_we1, "statemt_0_we1");
    sc_trace(mVcdFile, statemt_0_d1, "statemt_0_d1");
    sc_trace(mVcdFile, statemt_0_q1, "statemt_0_q1");
    sc_trace(mVcdFile, statemt_1_address0, "statemt_1_address0");
    sc_trace(mVcdFile, statemt_1_ce0, "statemt_1_ce0");
    sc_trace(mVcdFile, statemt_1_we0, "statemt_1_we0");
    sc_trace(mVcdFile, statemt_1_d0, "statemt_1_d0");
    sc_trace(mVcdFile, statemt_1_q0, "statemt_1_q0");
    sc_trace(mVcdFile, statemt_1_address1, "statemt_1_address1");
    sc_trace(mVcdFile, statemt_1_ce1, "statemt_1_ce1");
    sc_trace(mVcdFile, statemt_1_we1, "statemt_1_we1");
    sc_trace(mVcdFile, statemt_1_d1, "statemt_1_d1");
    sc_trace(mVcdFile, statemt_1_q1, "statemt_1_q1");
    sc_trace(mVcdFile, key_0_address0, "key_0_address0");
    sc_trace(mVcdFile, key_0_ce0, "key_0_ce0");
    sc_trace(mVcdFile, key_0_we0, "key_0_we0");
    sc_trace(mVcdFile, key_0_d0, "key_0_d0");
    sc_trace(mVcdFile, key_0_q0, "key_0_q0");
    sc_trace(mVcdFile, key_0_address1, "key_0_address1");
    sc_trace(mVcdFile, key_0_ce1, "key_0_ce1");
    sc_trace(mVcdFile, key_0_we1, "key_0_we1");
    sc_trace(mVcdFile, key_0_d1, "key_0_d1");
    sc_trace(mVcdFile, key_0_q1, "key_0_q1");
    sc_trace(mVcdFile, grp_decrypt_fu_242_ap_start, "grp_decrypt_fu_242_ap_start");
    sc_trace(mVcdFile, grp_decrypt_fu_242_ap_done, "grp_decrypt_fu_242_ap_done");
    sc_trace(mVcdFile, grp_decrypt_fu_242_ap_idle, "grp_decrypt_fu_242_ap_idle");
    sc_trace(mVcdFile, grp_decrypt_fu_242_ap_ready, "grp_decrypt_fu_242_ap_ready");
    sc_trace(mVcdFile, grp_decrypt_fu_242_statemt_0_address0, "grp_decrypt_fu_242_statemt_0_address0");
    sc_trace(mVcdFile, grp_decrypt_fu_242_statemt_0_ce0, "grp_decrypt_fu_242_statemt_0_ce0");
    sc_trace(mVcdFile, grp_decrypt_fu_242_statemt_0_we0, "grp_decrypt_fu_242_statemt_0_we0");
    sc_trace(mVcdFile, grp_decrypt_fu_242_statemt_0_d0, "grp_decrypt_fu_242_statemt_0_d0");
    sc_trace(mVcdFile, grp_decrypt_fu_242_statemt_0_address1, "grp_decrypt_fu_242_statemt_0_address1");
    sc_trace(mVcdFile, grp_decrypt_fu_242_statemt_0_ce1, "grp_decrypt_fu_242_statemt_0_ce1");
    sc_trace(mVcdFile, grp_decrypt_fu_242_statemt_0_we1, "grp_decrypt_fu_242_statemt_0_we1");
    sc_trace(mVcdFile, grp_decrypt_fu_242_statemt_0_d1, "grp_decrypt_fu_242_statemt_0_d1");
    sc_trace(mVcdFile, grp_decrypt_fu_242_statemt_1_address0, "grp_decrypt_fu_242_statemt_1_address0");
    sc_trace(mVcdFile, grp_decrypt_fu_242_statemt_1_ce0, "grp_decrypt_fu_242_statemt_1_ce0");
    sc_trace(mVcdFile, grp_decrypt_fu_242_statemt_1_we0, "grp_decrypt_fu_242_statemt_1_we0");
    sc_trace(mVcdFile, grp_decrypt_fu_242_statemt_1_d0, "grp_decrypt_fu_242_statemt_1_d0");
    sc_trace(mVcdFile, grp_decrypt_fu_242_statemt_1_address1, "grp_decrypt_fu_242_statemt_1_address1");
    sc_trace(mVcdFile, grp_decrypt_fu_242_statemt_1_ce1, "grp_decrypt_fu_242_statemt_1_ce1");
    sc_trace(mVcdFile, grp_decrypt_fu_242_statemt_1_we1, "grp_decrypt_fu_242_statemt_1_we1");
    sc_trace(mVcdFile, grp_decrypt_fu_242_statemt_1_d1, "grp_decrypt_fu_242_statemt_1_d1");
    sc_trace(mVcdFile, grp_decrypt_fu_242_key_0_address0, "grp_decrypt_fu_242_key_0_address0");
    sc_trace(mVcdFile, grp_decrypt_fu_242_key_0_ce0, "grp_decrypt_fu_242_key_0_ce0");
    sc_trace(mVcdFile, grp_decrypt_fu_242_key_0_address1, "grp_decrypt_fu_242_key_0_address1");
    sc_trace(mVcdFile, grp_decrypt_fu_242_key_0_ce1, "grp_decrypt_fu_242_key_0_ce1");
    sc_trace(mVcdFile, grp_decrypt_fu_242_round_val, "grp_decrypt_fu_242_round_val");
    sc_trace(mVcdFile, grp_decrypt_fu_242_round_val_ap_vld, "grp_decrypt_fu_242_round_val_ap_vld");
    sc_trace(mVcdFile, grp_decrypt_fu_242_word_0_address0, "grp_decrypt_fu_242_word_0_address0");
    sc_trace(mVcdFile, grp_decrypt_fu_242_word_0_ce0, "grp_decrypt_fu_242_word_0_ce0");
    sc_trace(mVcdFile, grp_decrypt_fu_242_word_0_we0, "grp_decrypt_fu_242_word_0_we0");
    sc_trace(mVcdFile, grp_decrypt_fu_242_word_0_d0, "grp_decrypt_fu_242_word_0_d0");
    sc_trace(mVcdFile, grp_decrypt_fu_242_word_0_address1, "grp_decrypt_fu_242_word_0_address1");
    sc_trace(mVcdFile, grp_decrypt_fu_242_word_0_ce1, "grp_decrypt_fu_242_word_0_ce1");
    sc_trace(mVcdFile, grp_decrypt_fu_242_word_0_we1, "grp_decrypt_fu_242_word_0_we1");
    sc_trace(mVcdFile, grp_decrypt_fu_242_word_0_d1, "grp_decrypt_fu_242_word_0_d1");
    sc_trace(mVcdFile, grp_decrypt_fu_242_word_1_address0, "grp_decrypt_fu_242_word_1_address0");
    sc_trace(mVcdFile, grp_decrypt_fu_242_word_1_ce0, "grp_decrypt_fu_242_word_1_ce0");
    sc_trace(mVcdFile, grp_decrypt_fu_242_word_1_we0, "grp_decrypt_fu_242_word_1_we0");
    sc_trace(mVcdFile, grp_decrypt_fu_242_word_1_d0, "grp_decrypt_fu_242_word_1_d0");
    sc_trace(mVcdFile, grp_decrypt_fu_242_word_1_address1, "grp_decrypt_fu_242_word_1_address1");
    sc_trace(mVcdFile, grp_decrypt_fu_242_word_1_ce1, "grp_decrypt_fu_242_word_1_ce1");
    sc_trace(mVcdFile, grp_decrypt_fu_242_word_1_we1, "grp_decrypt_fu_242_word_1_we1");
    sc_trace(mVcdFile, grp_decrypt_fu_242_word_1_d1, "grp_decrypt_fu_242_word_1_d1");
    sc_trace(mVcdFile, grp_decrypt_fu_242_main_result_o, "grp_decrypt_fu_242_main_result_o");
    sc_trace(mVcdFile, grp_decrypt_fu_242_main_result_o_ap_vld, "grp_decrypt_fu_242_main_result_o_ap_vld");
    sc_trace(mVcdFile, grp_encrypt_fu_264_ap_start, "grp_encrypt_fu_264_ap_start");
    sc_trace(mVcdFile, grp_encrypt_fu_264_ap_done, "grp_encrypt_fu_264_ap_done");
    sc_trace(mVcdFile, grp_encrypt_fu_264_ap_idle, "grp_encrypt_fu_264_ap_idle");
    sc_trace(mVcdFile, grp_encrypt_fu_264_ap_ready, "grp_encrypt_fu_264_ap_ready");
    sc_trace(mVcdFile, grp_encrypt_fu_264_statemt_0_address0, "grp_encrypt_fu_264_statemt_0_address0");
    sc_trace(mVcdFile, grp_encrypt_fu_264_statemt_0_ce0, "grp_encrypt_fu_264_statemt_0_ce0");
    sc_trace(mVcdFile, grp_encrypt_fu_264_statemt_0_we0, "grp_encrypt_fu_264_statemt_0_we0");
    sc_trace(mVcdFile, grp_encrypt_fu_264_statemt_0_d0, "grp_encrypt_fu_264_statemt_0_d0");
    sc_trace(mVcdFile, grp_encrypt_fu_264_statemt_0_address1, "grp_encrypt_fu_264_statemt_0_address1");
    sc_trace(mVcdFile, grp_encrypt_fu_264_statemt_0_ce1, "grp_encrypt_fu_264_statemt_0_ce1");
    sc_trace(mVcdFile, grp_encrypt_fu_264_statemt_0_we1, "grp_encrypt_fu_264_statemt_0_we1");
    sc_trace(mVcdFile, grp_encrypt_fu_264_statemt_0_d1, "grp_encrypt_fu_264_statemt_0_d1");
    sc_trace(mVcdFile, grp_encrypt_fu_264_statemt_1_address0, "grp_encrypt_fu_264_statemt_1_address0");
    sc_trace(mVcdFile, grp_encrypt_fu_264_statemt_1_ce0, "grp_encrypt_fu_264_statemt_1_ce0");
    sc_trace(mVcdFile, grp_encrypt_fu_264_statemt_1_we0, "grp_encrypt_fu_264_statemt_1_we0");
    sc_trace(mVcdFile, grp_encrypt_fu_264_statemt_1_d0, "grp_encrypt_fu_264_statemt_1_d0");
    sc_trace(mVcdFile, grp_encrypt_fu_264_statemt_1_address1, "grp_encrypt_fu_264_statemt_1_address1");
    sc_trace(mVcdFile, grp_encrypt_fu_264_statemt_1_ce1, "grp_encrypt_fu_264_statemt_1_ce1");
    sc_trace(mVcdFile, grp_encrypt_fu_264_statemt_1_we1, "grp_encrypt_fu_264_statemt_1_we1");
    sc_trace(mVcdFile, grp_encrypt_fu_264_statemt_1_d1, "grp_encrypt_fu_264_statemt_1_d1");
    sc_trace(mVcdFile, grp_encrypt_fu_264_key_0_address0, "grp_encrypt_fu_264_key_0_address0");
    sc_trace(mVcdFile, grp_encrypt_fu_264_key_0_ce0, "grp_encrypt_fu_264_key_0_ce0");
    sc_trace(mVcdFile, grp_encrypt_fu_264_key_0_address1, "grp_encrypt_fu_264_key_0_address1");
    sc_trace(mVcdFile, grp_encrypt_fu_264_key_0_ce1, "grp_encrypt_fu_264_key_0_ce1");
    sc_trace(mVcdFile, grp_encrypt_fu_264_round_val, "grp_encrypt_fu_264_round_val");
    sc_trace(mVcdFile, grp_encrypt_fu_264_round_val_ap_vld, "grp_encrypt_fu_264_round_val_ap_vld");
    sc_trace(mVcdFile, grp_encrypt_fu_264_word_0_address0, "grp_encrypt_fu_264_word_0_address0");
    sc_trace(mVcdFile, grp_encrypt_fu_264_word_0_ce0, "grp_encrypt_fu_264_word_0_ce0");
    sc_trace(mVcdFile, grp_encrypt_fu_264_word_0_we0, "grp_encrypt_fu_264_word_0_we0");
    sc_trace(mVcdFile, grp_encrypt_fu_264_word_0_d0, "grp_encrypt_fu_264_word_0_d0");
    sc_trace(mVcdFile, grp_encrypt_fu_264_word_0_address1, "grp_encrypt_fu_264_word_0_address1");
    sc_trace(mVcdFile, grp_encrypt_fu_264_word_0_ce1, "grp_encrypt_fu_264_word_0_ce1");
    sc_trace(mVcdFile, grp_encrypt_fu_264_word_0_we1, "grp_encrypt_fu_264_word_0_we1");
    sc_trace(mVcdFile, grp_encrypt_fu_264_word_0_d1, "grp_encrypt_fu_264_word_0_d1");
    sc_trace(mVcdFile, grp_encrypt_fu_264_word_1_address0, "grp_encrypt_fu_264_word_1_address0");
    sc_trace(mVcdFile, grp_encrypt_fu_264_word_1_ce0, "grp_encrypt_fu_264_word_1_ce0");
    sc_trace(mVcdFile, grp_encrypt_fu_264_word_1_we0, "grp_encrypt_fu_264_word_1_we0");
    sc_trace(mVcdFile, grp_encrypt_fu_264_word_1_d0, "grp_encrypt_fu_264_word_1_d0");
    sc_trace(mVcdFile, grp_encrypt_fu_264_word_1_address1, "grp_encrypt_fu_264_word_1_address1");
    sc_trace(mVcdFile, grp_encrypt_fu_264_word_1_ce1, "grp_encrypt_fu_264_word_1_ce1");
    sc_trace(mVcdFile, grp_encrypt_fu_264_word_1_we1, "grp_encrypt_fu_264_word_1_we1");
    sc_trace(mVcdFile, grp_encrypt_fu_264_word_1_d1, "grp_encrypt_fu_264_word_1_d1");
    sc_trace(mVcdFile, grp_encrypt_fu_264_main_result_o, "grp_encrypt_fu_264_main_result_o");
    sc_trace(mVcdFile, grp_encrypt_fu_264_main_result_o_ap_vld, "grp_encrypt_fu_264_main_result_o_ap_vld");
    sc_trace(mVcdFile, grp_decrypt_fu_242_ap_start_reg, "grp_decrypt_fu_242_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, grp_encrypt_fu_264_ap_start_reg, "grp_encrypt_fu_264_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("aes_main.hdltvin.dat");
    mHdltvoutHandle.open("aes_main.hdltvout.dat");
}

aes_main::~aes_main() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete word_0_U;
    delete word_1_U;
    delete statemt_0_U;
    delete statemt_1_U;
    delete key_0_U;
    delete grp_decrypt_fu_242;
    delete grp_encrypt_fu_264;
}

void aes_main::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_decrypt_fu_242_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
            grp_decrypt_fu_242_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_decrypt_fu_242_ap_ready.read())) {
            grp_decrypt_fu_242_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_encrypt_fu_264_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            grp_encrypt_fu_264_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_encrypt_fu_264_ap_ready.read())) {
            grp_encrypt_fu_264_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, grp_encrypt_fu_264_main_result_o_ap_vld.read()))) {
        main_result = grp_encrypt_fu_264_main_result_o.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_decrypt_fu_242_main_result_o_ap_vld.read()))) {
        main_result = grp_decrypt_fu_242_main_result_o.read();
    }
}

void aes_main::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void aes_main::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void aes_main::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void aes_main::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void aes_main::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void aes_main::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void aes_main::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void aes_main::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void aes_main::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void aes_main::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void aes_main::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void aes_main::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void aes_main::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,1,1>(grp_decrypt_fu_242_ap_done.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void aes_main::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void aes_main::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,1,1>(grp_decrypt_fu_242_ap_done.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void aes_main::thread_ap_return() {
    ap_return = ap_const_lv32_0;
}

void aes_main::thread_grp_decrypt_fu_242_ap_start() {
    grp_decrypt_fu_242_ap_start = grp_decrypt_fu_242_ap_start_reg.read();
}

void aes_main::thread_grp_encrypt_fu_264_ap_start() {
    grp_encrypt_fu_264_ap_start = grp_encrypt_fu_264_ap_start_reg.read();
}

void aes_main::thread_key_0_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        key_0_address0 = ap_const_lv4_E;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        key_0_address0 = ap_const_lv4_C;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        key_0_address0 = ap_const_lv4_A;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        key_0_address0 = ap_const_lv4_8;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        key_0_address0 = ap_const_lv4_6;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        key_0_address0 = ap_const_lv4_4;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        key_0_address0 = ap_const_lv4_2;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        key_0_address0 = ap_const_lv4_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        key_0_address0 = grp_encrypt_fu_264_key_0_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        key_0_address0 = grp_decrypt_fu_242_key_0_address0.read();
    } else {
        key_0_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void aes_main::thread_key_0_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        key_0_address1 = ap_const_lv4_F;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        key_0_address1 = ap_const_lv4_D;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        key_0_address1 = ap_const_lv4_B;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        key_0_address1 = ap_const_lv4_9;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        key_0_address1 = ap_const_lv4_7;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        key_0_address1 = ap_const_lv4_5;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        key_0_address1 = ap_const_lv4_3;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        key_0_address1 = ap_const_lv4_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        key_0_address1 = grp_encrypt_fu_264_key_0_address1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        key_0_address1 = grp_decrypt_fu_242_key_0_address1.read();
    } else {
        key_0_address1 =  (sc_lv<4>) ("XXXX");
    }
}

void aes_main::thread_key_0_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        key_0_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        key_0_ce0 = grp_encrypt_fu_264_key_0_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        key_0_ce0 = grp_decrypt_fu_242_key_0_ce0.read();
    } else {
        key_0_ce0 = ap_const_logic_0;
    }
}

void aes_main::thread_key_0_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        key_0_ce1 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        key_0_ce1 = grp_encrypt_fu_264_key_0_ce1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        key_0_ce1 = grp_decrypt_fu_242_key_0_ce1.read();
    } else {
        key_0_ce1 = ap_const_logic_0;
    }
}

void aes_main::thread_key_0_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        key_0_d0 = ap_const_lv32_4F;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        key_0_d0 = ap_const_lv32_9;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        key_0_d0 = ap_const_lv32_AB;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        key_0_d0 = ap_const_lv32_D2;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        key_0_d0 = ap_const_lv32_28;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        key_0_d0 = ap_const_lv32_15;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        key_0_d0 = ap_const_lv32_2B;
    } else {
        key_0_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void aes_main::thread_key_0_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        key_0_d1 = ap_const_lv32_3C;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        key_0_d1 = ap_const_lv32_CF;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        key_0_d1 = ap_const_lv32_88;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        key_0_d1 = ap_const_lv32_F7;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        key_0_d1 = ap_const_lv32_A6;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        key_0_d1 = ap_const_lv32_AE;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        key_0_d1 = ap_const_lv32_16;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        key_0_d1 = ap_const_lv32_7E;
    } else {
        key_0_d1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void aes_main::thread_key_0_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        key_0_we0 = ap_const_logic_1;
    } else {
        key_0_we0 = ap_const_logic_0;
    }
}

void aes_main::thread_key_0_we1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        key_0_we1 = ap_const_logic_1;
    } else {
        key_0_we1 = ap_const_logic_0;
    }
}

void aes_main::thread_statemt_0_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        statemt_0_address0 = ap_const_lv4_6;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        statemt_0_address0 = ap_const_lv4_4;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        statemt_0_address0 = ap_const_lv4_2;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        statemt_0_address0 = ap_const_lv4_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        statemt_0_address0 = grp_encrypt_fu_264_statemt_0_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        statemt_0_address0 = grp_decrypt_fu_242_statemt_0_address0.read();
    } else {
        statemt_0_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void aes_main::thread_statemt_0_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        statemt_0_address1 = ap_const_lv4_7;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        statemt_0_address1 = ap_const_lv4_5;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        statemt_0_address1 = ap_const_lv4_3;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        statemt_0_address1 = ap_const_lv4_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        statemt_0_address1 = grp_encrypt_fu_264_statemt_0_address1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        statemt_0_address1 = grp_decrypt_fu_242_statemt_0_address1.read();
    } else {
        statemt_0_address1 =  (sc_lv<4>) ("XXXX");
    }
}

void aes_main::thread_statemt_0_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        statemt_0_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        statemt_0_ce0 = grp_encrypt_fu_264_statemt_0_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        statemt_0_ce0 = grp_decrypt_fu_242_statemt_0_ce0.read();
    } else {
        statemt_0_ce0 = ap_const_logic_0;
    }
}

void aes_main::thread_statemt_0_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        statemt_0_ce1 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        statemt_0_ce1 = grp_encrypt_fu_264_statemt_0_ce1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        statemt_0_ce1 = grp_decrypt_fu_242_statemt_0_ce1.read();
    } else {
        statemt_0_ce1 = ap_const_logic_0;
    }
}

void aes_main::thread_statemt_0_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        statemt_0_d0 = ap_const_lv32_E0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        statemt_0_d0 = ap_const_lv32_31;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        statemt_0_d0 = ap_const_lv32_88;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        statemt_0_d0 = ap_const_lv32_32;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        statemt_0_d0 = grp_encrypt_fu_264_statemt_0_d0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        statemt_0_d0 = grp_decrypt_fu_242_statemt_0_d0.read();
    } else {
        statemt_0_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void aes_main::thread_statemt_0_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        statemt_0_d1 = ap_const_lv32_7;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        statemt_0_d1 = ap_const_lv32_98;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        statemt_0_d1 = ap_const_lv32_30;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        statemt_0_d1 = ap_const_lv32_F6;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        statemt_0_d1 = grp_encrypt_fu_264_statemt_0_d1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        statemt_0_d1 = grp_decrypt_fu_242_statemt_0_d1.read();
    } else {
        statemt_0_d1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void aes_main::thread_statemt_0_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        statemt_0_we0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        statemt_0_we0 = grp_encrypt_fu_264_statemt_0_we0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        statemt_0_we0 = grp_decrypt_fu_242_statemt_0_we0.read();
    } else {
        statemt_0_we0 = ap_const_logic_0;
    }
}

void aes_main::thread_statemt_0_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        statemt_0_we1 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        statemt_0_we1 = grp_encrypt_fu_264_statemt_0_we1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        statemt_0_we1 = grp_decrypt_fu_242_statemt_0_we1.read();
    } else {
        statemt_0_we1 = ap_const_logic_0;
    }
}

void aes_main::thread_statemt_1_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        statemt_1_address0 = ap_const_lv4_6;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        statemt_1_address0 = ap_const_lv4_4;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        statemt_1_address0 = ap_const_lv4_2;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        statemt_1_address0 = ap_const_lv4_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        statemt_1_address0 = grp_encrypt_fu_264_statemt_1_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        statemt_1_address0 = grp_decrypt_fu_242_statemt_1_address0.read();
    } else {
        statemt_1_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void aes_main::thread_statemt_1_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        statemt_1_address1 = ap_const_lv4_7;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        statemt_1_address1 = ap_const_lv4_5;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        statemt_1_address1 = ap_const_lv4_3;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        statemt_1_address1 = ap_const_lv4_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        statemt_1_address1 = grp_encrypt_fu_264_statemt_1_address1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        statemt_1_address1 = grp_decrypt_fu_242_statemt_1_address1.read();
    } else {
        statemt_1_address1 =  (sc_lv<4>) ("XXXX");
    }
}

void aes_main::thread_statemt_1_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        statemt_1_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        statemt_1_ce0 = grp_encrypt_fu_264_statemt_1_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        statemt_1_ce0 = grp_decrypt_fu_242_statemt_1_ce0.read();
    } else {
        statemt_1_ce0 = ap_const_logic_0;
    }
}

void aes_main::thread_statemt_1_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        statemt_1_ce1 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        statemt_1_ce1 = grp_encrypt_fu_264_statemt_1_ce1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        statemt_1_ce1 = grp_decrypt_fu_242_statemt_1_ce1.read();
    } else {
        statemt_1_ce1 = ap_const_logic_0;
    }
}

void aes_main::thread_statemt_1_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        statemt_1_d0 = ap_const_lv32_37;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        statemt_1_d0 = ap_const_lv32_31;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        statemt_1_d0 = ap_const_lv32_5A;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        statemt_1_d0 = ap_const_lv32_43;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        statemt_1_d0 = grp_encrypt_fu_264_statemt_1_d0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        statemt_1_d0 = grp_decrypt_fu_242_statemt_1_d0.read();
    } else {
        statemt_1_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void aes_main::thread_statemt_1_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        statemt_1_d1 = ap_const_lv32_34;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        statemt_1_d1 = ap_const_lv32_A2;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        statemt_1_d1 = ap_const_lv32_8D;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        statemt_1_d1 = ap_const_lv32_A8;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        statemt_1_d1 = grp_encrypt_fu_264_statemt_1_d1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        statemt_1_d1 = grp_decrypt_fu_242_statemt_1_d1.read();
    } else {
        statemt_1_d1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void aes_main::thread_statemt_1_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        statemt_1_we0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        statemt_1_we0 = grp_encrypt_fu_264_statemt_1_we0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        statemt_1_we0 = grp_decrypt_fu_242_statemt_1_we0.read();
    } else {
        statemt_1_we0 = ap_const_logic_0;
    }
}

void aes_main::thread_statemt_1_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        statemt_1_we1 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        statemt_1_we1 = grp_encrypt_fu_264_statemt_1_we1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        statemt_1_we1 = grp_decrypt_fu_242_statemt_1_we1.read();
    } else {
        statemt_1_we1 = ap_const_logic_0;
    }
}

void aes_main::thread_word_0_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        word_0_address0 = grp_encrypt_fu_264_word_0_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        word_0_address0 = grp_decrypt_fu_242_word_0_address0.read();
    } else {
        word_0_address0 = "XXXXXXXX";
    }
}

void aes_main::thread_word_0_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        word_0_address1 = grp_encrypt_fu_264_word_0_address1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        word_0_address1 = grp_decrypt_fu_242_word_0_address1.read();
    } else {
        word_0_address1 = "XXXXXXXX";
    }
}

void aes_main::thread_word_0_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        word_0_ce0 = grp_encrypt_fu_264_word_0_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        word_0_ce0 = grp_decrypt_fu_242_word_0_ce0.read();
    } else {
        word_0_ce0 = ap_const_logic_0;
    }
}

void aes_main::thread_word_0_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        word_0_ce1 = grp_encrypt_fu_264_word_0_ce1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        word_0_ce1 = grp_decrypt_fu_242_word_0_ce1.read();
    } else {
        word_0_ce1 = ap_const_logic_0;
    }
}

void aes_main::thread_word_0_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        word_0_d0 = grp_encrypt_fu_264_word_0_d0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        word_0_d0 = grp_decrypt_fu_242_word_0_d0.read();
    } else {
        word_0_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void aes_main::thread_word_0_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        word_0_d1 = grp_encrypt_fu_264_word_0_d1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        word_0_d1 = grp_decrypt_fu_242_word_0_d1.read();
    } else {
        word_0_d1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void aes_main::thread_word_0_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        word_0_we0 = grp_encrypt_fu_264_word_0_we0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        word_0_we0 = grp_decrypt_fu_242_word_0_we0.read();
    } else {
        word_0_we0 = ap_const_logic_0;
    }
}

void aes_main::thread_word_0_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        word_0_we1 = grp_encrypt_fu_264_word_0_we1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        word_0_we1 = grp_decrypt_fu_242_word_0_we1.read();
    } else {
        word_0_we1 = ap_const_logic_0;
    }
}

void aes_main::thread_word_1_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        word_1_address0 = grp_encrypt_fu_264_word_1_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        word_1_address0 = grp_decrypt_fu_242_word_1_address0.read();
    } else {
        word_1_address0 = "XXXXXXXX";
    }
}

void aes_main::thread_word_1_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        word_1_address1 = grp_encrypt_fu_264_word_1_address1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        word_1_address1 = grp_decrypt_fu_242_word_1_address1.read();
    } else {
        word_1_address1 = "XXXXXXXX";
    }
}

void aes_main::thread_word_1_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        word_1_ce0 = grp_encrypt_fu_264_word_1_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        word_1_ce0 = grp_decrypt_fu_242_word_1_ce0.read();
    } else {
        word_1_ce0 = ap_const_logic_0;
    }
}

void aes_main::thread_word_1_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        word_1_ce1 = grp_encrypt_fu_264_word_1_ce1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        word_1_ce1 = grp_decrypt_fu_242_word_1_ce1.read();
    } else {
        word_1_ce1 = ap_const_logic_0;
    }
}

void aes_main::thread_word_1_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        word_1_d0 = grp_encrypt_fu_264_word_1_d0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        word_1_d0 = grp_decrypt_fu_242_word_1_d0.read();
    } else {
        word_1_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void aes_main::thread_word_1_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        word_1_d1 = grp_encrypt_fu_264_word_1_d1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        word_1_d1 = grp_decrypt_fu_242_word_1_d1.read();
    } else {
        word_1_d1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void aes_main::thread_word_1_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        word_1_we0 = grp_encrypt_fu_264_word_1_we0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        word_1_we0 = grp_decrypt_fu_242_word_1_we0.read();
    } else {
        word_1_we0 = ap_const_logic_0;
    }
}

void aes_main::thread_word_1_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        word_1_we1 = grp_encrypt_fu_264_word_1_we1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        word_1_we1 = grp_decrypt_fu_242_word_1_we1.read();
    } else {
        word_1_we1 = ap_const_logic_0;
    }
}

void aes_main::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(grp_encrypt_fu_264_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(grp_decrypt_fu_242_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<12>) ("XXXXXXXXXXXX");
            break;
    }
}

void aes_main::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

