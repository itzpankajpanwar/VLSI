// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _aes_main_HH_
#define _aes_main_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "decrypt.h"
#include "encrypt.h"
#include "aes_main_word.h"
#include "aes_main_statemt.h"
#include "aes_main_key.h"

namespace ap_rtl {

struct aes_main : public sc_module {
    // Port declarations 7
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    aes_main(sc_module_name name);
    SC_HAS_PROCESS(aes_main);

    ~aes_main();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    aes_main_word* word_U;
    aes_main_statemt* statemt_U;
    aes_main_key* key_U;
    decrypt* grp_decrypt_fu_237;
    encrypt* grp_encrypt_fu_261;
    sc_signal< sc_lv<12> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<9> > word_address0;
    sc_signal< sc_logic > word_ce0;
    sc_signal< sc_logic > word_we0;
    sc_signal< sc_lv<32> > word_d0;
    sc_signal< sc_lv<32> > word_q0;
    sc_signal< sc_lv<9> > word_address1;
    sc_signal< sc_logic > word_ce1;
    sc_signal< sc_lv<32> > word_q1;
    sc_signal< sc_lv<32> > main_result;
    sc_signal< sc_lv<5> > statemt_address0;
    sc_signal< sc_logic > statemt_ce0;
    sc_signal< sc_logic > statemt_we0;
    sc_signal< sc_lv<32> > statemt_d0;
    sc_signal< sc_lv<32> > statemt_q0;
    sc_signal< sc_lv<5> > statemt_address1;
    sc_signal< sc_logic > statemt_ce1;
    sc_signal< sc_logic > statemt_we1;
    sc_signal< sc_lv<32> > statemt_d1;
    sc_signal< sc_lv<32> > statemt_q1;
    sc_signal< sc_lv<5> > key_address0;
    sc_signal< sc_logic > key_ce0;
    sc_signal< sc_logic > key_we0;
    sc_signal< sc_lv<32> > key_d0;
    sc_signal< sc_lv<32> > key_q0;
    sc_signal< sc_lv<5> > key_address1;
    sc_signal< sc_logic > key_ce1;
    sc_signal< sc_logic > key_we1;
    sc_signal< sc_lv<32> > key_d1;
    sc_signal< sc_logic > grp_decrypt_fu_237_ap_start;
    sc_signal< sc_logic > grp_decrypt_fu_237_ap_done;
    sc_signal< sc_logic > grp_decrypt_fu_237_ap_idle;
    sc_signal< sc_logic > grp_decrypt_fu_237_ap_ready;
    sc_signal< sc_lv<5> > grp_decrypt_fu_237_statemt_address0;
    sc_signal< sc_logic > grp_decrypt_fu_237_statemt_ce0;
    sc_signal< sc_logic > grp_decrypt_fu_237_statemt_we0;
    sc_signal< sc_lv<32> > grp_decrypt_fu_237_statemt_d0;
    sc_signal< sc_lv<5> > grp_decrypt_fu_237_statemt_address1;
    sc_signal< sc_logic > grp_decrypt_fu_237_statemt_ce1;
    sc_signal< sc_logic > grp_decrypt_fu_237_statemt_we1;
    sc_signal< sc_lv<32> > grp_decrypt_fu_237_statemt_d1;
    sc_signal< sc_lv<5> > grp_decrypt_fu_237_key_address0;
    sc_signal< sc_logic > grp_decrypt_fu_237_key_ce0;
    sc_signal< sc_lv<9> > grp_decrypt_fu_237_word_address0;
    sc_signal< sc_logic > grp_decrypt_fu_237_word_ce0;
    sc_signal< sc_logic > grp_decrypt_fu_237_word_we0;
    sc_signal< sc_lv<32> > grp_decrypt_fu_237_word_d0;
    sc_signal< sc_lv<9> > grp_decrypt_fu_237_word_address1;
    sc_signal< sc_logic > grp_decrypt_fu_237_word_ce1;
    sc_signal< sc_lv<5> > grp_decrypt_fu_237_round_val;
    sc_signal< sc_logic > grp_decrypt_fu_237_round_val_ap_vld;
    sc_signal< sc_lv<4> > grp_decrypt_fu_237_nb;
    sc_signal< sc_logic > grp_decrypt_fu_237_nb_ap_vld;
    sc_signal< sc_lv<32> > grp_decrypt_fu_237_main_result_o;
    sc_signal< sc_logic > grp_decrypt_fu_237_main_result_o_ap_vld;
    sc_signal< sc_logic > grp_encrypt_fu_261_ap_start;
    sc_signal< sc_logic > grp_encrypt_fu_261_ap_done;
    sc_signal< sc_logic > grp_encrypt_fu_261_ap_idle;
    sc_signal< sc_logic > grp_encrypt_fu_261_ap_ready;
    sc_signal< sc_lv<5> > grp_encrypt_fu_261_statemt_address0;
    sc_signal< sc_logic > grp_encrypt_fu_261_statemt_ce0;
    sc_signal< sc_logic > grp_encrypt_fu_261_statemt_we0;
    sc_signal< sc_lv<32> > grp_encrypt_fu_261_statemt_d0;
    sc_signal< sc_lv<5> > grp_encrypt_fu_261_statemt_address1;
    sc_signal< sc_logic > grp_encrypt_fu_261_statemt_ce1;
    sc_signal< sc_logic > grp_encrypt_fu_261_statemt_we1;
    sc_signal< sc_lv<32> > grp_encrypt_fu_261_statemt_d1;
    sc_signal< sc_lv<5> > grp_encrypt_fu_261_key_address0;
    sc_signal< sc_logic > grp_encrypt_fu_261_key_ce0;
    sc_signal< sc_lv<9> > grp_encrypt_fu_261_word_address0;
    sc_signal< sc_logic > grp_encrypt_fu_261_word_ce0;
    sc_signal< sc_logic > grp_encrypt_fu_261_word_we0;
    sc_signal< sc_lv<32> > grp_encrypt_fu_261_word_d0;
    sc_signal< sc_lv<9> > grp_encrypt_fu_261_word_address1;
    sc_signal< sc_logic > grp_encrypt_fu_261_word_ce1;
    sc_signal< sc_lv<5> > grp_encrypt_fu_261_round_val;
    sc_signal< sc_logic > grp_encrypt_fu_261_round_val_ap_vld;
    sc_signal< sc_lv<4> > grp_encrypt_fu_261_nb;
    sc_signal< sc_logic > grp_encrypt_fu_261_nb_ap_vld;
    sc_signal< sc_lv<32> > grp_encrypt_fu_261_main_result_o;
    sc_signal< sc_logic > grp_encrypt_fu_261_main_result_o_ap_vld;
    sc_signal< sc_logic > grp_decrypt_fu_237_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_logic > grp_encrypt_fu_261_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<12> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<12> ap_ST_fsm_state1;
    static const sc_lv<12> ap_ST_fsm_state2;
    static const sc_lv<12> ap_ST_fsm_state3;
    static const sc_lv<12> ap_ST_fsm_state4;
    static const sc_lv<12> ap_ST_fsm_state5;
    static const sc_lv<12> ap_ST_fsm_state6;
    static const sc_lv<12> ap_ST_fsm_state7;
    static const sc_lv<12> ap_ST_fsm_state8;
    static const sc_lv<12> ap_ST_fsm_state9;
    static const sc_lv<12> ap_ST_fsm_state10;
    static const sc_lv<12> ap_ST_fsm_state11;
    static const sc_lv<12> ap_ST_fsm_state12;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_32;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_43;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_F6;
    static const sc_lv<5> ap_const_lv5_2;
    static const sc_lv<32> ap_const_lv32_A8;
    static const sc_lv<5> ap_const_lv5_3;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_88;
    static const sc_lv<5> ap_const_lv5_4;
    static const sc_lv<32> ap_const_lv32_5A;
    static const sc_lv<5> ap_const_lv5_5;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_30;
    static const sc_lv<5> ap_const_lv5_6;
    static const sc_lv<32> ap_const_lv32_8D;
    static const sc_lv<5> ap_const_lv5_7;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_31;
    static const sc_lv<5> ap_const_lv5_8;
    static const sc_lv<5> ap_const_lv5_9;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_98;
    static const sc_lv<5> ap_const_lv5_A;
    static const sc_lv<32> ap_const_lv32_A2;
    static const sc_lv<5> ap_const_lv5_B;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_E0;
    static const sc_lv<5> ap_const_lv5_C;
    static const sc_lv<32> ap_const_lv32_37;
    static const sc_lv<5> ap_const_lv5_D;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<5> ap_const_lv5_E;
    static const sc_lv<32> ap_const_lv32_34;
    static const sc_lv<5> ap_const_lv5_F;
    static const sc_lv<32> ap_const_lv32_2B;
    static const sc_lv<32> ap_const_lv32_7E;
    static const sc_lv<32> ap_const_lv32_15;
    static const sc_lv<32> ap_const_lv32_16;
    static const sc_lv<32> ap_const_lv32_28;
    static const sc_lv<32> ap_const_lv32_AE;
    static const sc_lv<32> ap_const_lv32_D2;
    static const sc_lv<32> ap_const_lv32_A6;
    static const sc_lv<32> ap_const_lv32_AB;
    static const sc_lv<32> ap_const_lv32_F7;
    static const sc_lv<32> ap_const_lv32_CF;
    static const sc_lv<32> ap_const_lv32_4F;
    static const sc_lv<32> ap_const_lv32_3C;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_grp_decrypt_fu_237_ap_start();
    void thread_grp_encrypt_fu_261_ap_start();
    void thread_key_address0();
    void thread_key_address1();
    void thread_key_ce0();
    void thread_key_ce1();
    void thread_key_d0();
    void thread_key_d1();
    void thread_key_we0();
    void thread_key_we1();
    void thread_statemt_address0();
    void thread_statemt_address1();
    void thread_statemt_ce0();
    void thread_statemt_ce1();
    void thread_statemt_d0();
    void thread_statemt_d1();
    void thread_statemt_we0();
    void thread_statemt_we1();
    void thread_word_address0();
    void thread_word_address1();
    void thread_word_ce0();
    void thread_word_ce1();
    void thread_word_d0();
    void thread_word_we0();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
